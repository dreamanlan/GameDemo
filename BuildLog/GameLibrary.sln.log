生成启动时间为 2023/6/28 12:49:35。
日志记录详细程度设置为: Detailed。     0>进程 = "C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\msbuild.exe"
       MSBuild 可执行文件路径 = "C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\msbuild.exe"
       命令行参数 = ""C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\msbuild.exe" /m /nologo /noconsolelogger /p:Configuration=Debug /flp:LogFile=D:\GitHub\GameDemo\.\Tools\Batch/../../BuildLog/GameLibrary.sln.log;Encoding=UTF-8 /t:clean;rebuild D:\GitHub\GameDemo\.\Tools\Batch/../../GameLibrary/GameLibrary.sln /p:Platform="Any CPU""
       当前目录 = "D:\GitHub\GameDemo"
       MSBuild 版本 = "17.4.0+18d5aef85"
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\SolutionFile\ImportAfter\*
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets (84,5) 处重新分配属性: $(_GenerateRestoreGraphProjectEntryInputProperties)=“
             ExcludeRestorePackageImports=true;
             _RestoreSolutionFileUsed=true;
             SolutionDir=D:\GitHub\GameDemo\GameLibrary\;
             SolutionName=GameLibrary;
             SolutionFileName=GameLibrary.sln;
             SolutionPath=D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln;
             SolutionExt=.sln;
           ”(先前值:“ExcludeRestorePackageImports=true”)
       项目中不存在 BeforeTargets 特性中的“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets (598,11)”位置列出的目标“_CheckForInvalidConfigurationAndPlatform”，将忽略该目标。
     1>项目“D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”在节点 1 上(clean;rebuild 个目标)。
     1>来自项目“D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”的文件“D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln.metaproj”中的目标“ValidateSolutionConfiguration”(入口点):
     1>由于 false 条件，已跳过任务“Error”；(('$(CurrentSolutionConfigurationContents)' == '') and ('$(SkipInvalidConfigurations)' != 'true'))计算为(('<SolutionConfiguration>
  <ProjectConfiguration Project="{1C8280CD-EB93-4849-940E-A99EDDF811D6}" AbsolutePath="D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
  <ProjectConfiguration Project="{F5FC4012-CE76-4AD8-B04A-25B1A0BF7EEC}" AbsolutePath="D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
  <ProjectConfiguration Project="{F1D962E1-3B17-4597-B542-BCB657E75829}" AbsolutePath="D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
</SolutionConfiguration>' == '') and ('' != 'true'))。
       由于 false 条件，已跳过任务“Warning”；(('$(CurrentSolutionConfigurationContents)' == '') and ('$(SkipInvalidConfigurations)' == 'true'))计算为(('<SolutionConfiguration>
         <ProjectConfiguration Project="{1C8280CD-EB93-4849-940E-A99EDDF811D6}" AbsolutePath="D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
         <ProjectConfiguration Project="{F5FC4012-CE76-4AD8-B04A-25B1A0BF7EEC}" AbsolutePath="D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
         <ProjectConfiguration Project="{F1D962E1-3B17-4597-B542-BCB657E75829}" AbsolutePath="D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
       </SolutionConfiguration>' == '') and ('' == 'true'))。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Message”任务。
       任务“Message”
         正在生成解决方案配置“Debug|Any CPU”。
       已完成执行任务“Message”的操作。
     1>已完成在项目“GameLibrary.sln”中生成目标“ValidateSolutionConfiguration”的操作。
     1>来自项目“D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”的文件“D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln.metaproj”中的目标“ValidateToolsVersions”(入口点):
       由于 false 条件，已跳过任务“Error”；('$(MSBuildToolsVersion)' == '2.0' and ('$(ProjectToolsVersion)' != '2.0' and '$(ProjectToolsVersion)' != ''))计算为('Current' == '2.0' and ('' != '2.0' and '' != ''))。
     1>已完成在项目“GameLibrary.sln”中生成目标“ValidateToolsVersions”的操作。
     1>来自项目“D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”的文件“D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln.metaproj”中的目标“ValidateProjects”(入口点):
       由于 false 条件，已跳过任务“Message”；( ('$(Configuration)' == 'Debug') and ('$(Platform)' == 'x86') )计算为( ('Debug' == 'Debug') and ('Any CPU' == 'x86') )。
       由于 false 条件，已跳过任务“Message”；( ('$(Configuration)' == 'Release') and ('$(Platform)' == 'x86') )计算为( ('Debug' == 'Release') and ('Any CPU' == 'x86') )。
     1>已完成在项目“GameLibrary.sln”中生成目标“ValidateProjects”的操作。
     1>来自项目“D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”的文件“D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln.metaproj”中的目标“Clean”(入口点):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“MSBuild”任务。
       任务“MSBuild”
         全局属性:
           BuildingSolutionFile=true
           CurrentSolutionConfigurationContents=<SolutionConfiguration>
           <ProjectConfiguration Project="{1C8280CD-EB93-4849-940E-A99EDDF811D6}" AbsolutePath="D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
           <ProjectConfiguration Project="{F5FC4012-CE76-4AD8-B04A-25B1A0BF7EEC}" AbsolutePath="D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
           <ProjectConfiguration Project="{F1D962E1-3B17-4597-B542-BCB657E75829}" AbsolutePath="D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
         </SolutionConfiguration>
           SolutionDir=D:\GitHub\GameDemo\GameLibrary\
           SolutionExt=.sln
           SolutionFileName=GameLibrary.sln
           SolutionName=GameLibrary
           SolutionPath=D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln
         项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的其他属性:
           Configuration=Debug
           Platform=AnyCPU
         项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的其他属性:
           Configuration=Debug
           Platform=AnyCPU
         项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的其他属性:
           Configuration=Debug
           Platform=AnyCPU
     0>“Configuration”属性是全局属性，不能修改。
       “Platform”属性是全局属性，不能修改。
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets (188,5) 处重新分配属性: $(CommandLineArgsForDesignTimeEvaluation)=“-langversion:7.3 -define:TRACE;DEBUG;ENABLE_ERROR_LOG;ENABLE_LOG”(先前值:“-langversion:7.3”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (13,5) 处重新分配属性: $(DefineCommonItemSchemas)=“false”(先前值:“true”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (14,5) 处重新分配属性: $(DefineCommonCapabilities)=“false”(先前值:“true”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (15,5) 处重新分配属性: $(DefineCommonReferenceSchemas)=“false”(先前值:“true”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Microsoft.Common.props
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Microsoft.Common.props (56,5) 处重新分配属性: $(MSBuildProjectExtensionsPath)=“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\”(先前值:“obj\”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportBefore\*
       “Configuration”属性是全局属性，不能修改。
       “Platform”属性是全局属性，不能修改。
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Microsoft.Common.targets\ImportBefore\*
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.NETFramework.CurrentVersion.props (117,5) 处重新分配属性: $(AvailablePlatforms)=“Any CPU,x86,x64,ARM64”(先前值:“Any CPU,x86,x64”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       “Platform”属性是全局属性，不能修改。
       “Configuration”属性是全局属性，不能修改。
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (175,5) 处重新分配属性: $(_DebugSymbolsProduced)=“true”(先前值:“false”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (185,5) 处重新分配属性: $(_DocumentationFileProduced)=“false”(先前值:“true”)
       “SolutionName”属性是全局属性，不能修改。
       “SolutionFileName”属性是全局属性，不能修改。
       “SolutionPath”属性是全局属性，不能修改。
       “SolutionDir”属性是全局属性，不能修改。
       “SolutionExt”属性是全局属性，不能修改。
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (515,5) 处重新分配属性: $(ProcessorArchitecture)=“msil”(先前值:“AnyCPU”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (568,5) 处重新分配属性: $(DelaySign)=“”(先前值:“false”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (637,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};”(先前值:“{CandidateAssemblyFiles}”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (638,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem}”(先前值:“{CandidateAssemblyFiles};”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (639,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory}”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem}”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (640,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory}”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (641,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx}”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (642,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders}”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx}”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (643,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders};{GAC}”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders}”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (644,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders};{GAC};{RawFileName}”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders};{GAC}”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (645,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders};{GAC};{RawFileName};bin\Debug\”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders};{GAC};{RawFileName}”)
       Property 'LOCALAPPDATA' with value 'C:\Users\dreamanlan\AppData\Local' expanded from the environment.
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (3789,5) 处重新分配属性: $(_SGenGenerateSerializationAssembliesConfig)=“Auto”(先前值:“”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (3790,5) 处重新分配属性: $(_SGenGenerateSerializationAssembliesConfig)=“Off”(先前值:“Auto”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (4927,5) 处重新分配属性: $(_TargetsThatPrepareProjectReferences)=“
             AssignProjectConfiguration;
             _SplitProjectReferencesByFileExistence
           ”(先前值:“_SplitProjectReferencesByFileExistence”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.CodeAnalysis.targets (125,5) 处重新分配属性: $(_CodeAnalysisTreatWarningsAsErrors)=“false”(先前值:“”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.CodeAnalysis.targets (167,9) 处重新分配属性: $(PrepareForRunDependsOn)=“
             CopyFilesToOutputDirectory
           ;RunCodeAnalysis”(先前值:“
             CopyFilesToOutputDirectory
           ”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.NETFramework.CurrentVersion.targets (74,5) 处重新分配属性: $(ResolveReferencesDependsOn)=“
             
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             ResolveComReferences;
             AfterResolveReferences
           ;
             ImplicitlyExpandDesignTimeFacades
           ”(先前值:“
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             ResolveComReferences;
             AfterResolveReferences
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets (97,7) 处重新分配属性: $(PrepareResourceNamesDependsOn)=“
                           AssignWinFXEmbeddedResource;
                           
             AssignTargetPaths;
             SplitResourcesByCulture;
             CreateManifestResourceNames;
             CreateCustomManifestResourceNames
           
             ”(先前值:“
             AssignTargetPaths;
             SplitResourcesByCulture;
             CreateManifestResourceNames;
             CreateCustomManifestResourceNames
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets (108,7) 处重新分配属性: $(PrepareResourcesDependsOn)=“
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
             ”(先前值:“
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets (184,5) 处重新分配属性: $(CompileDependsOn)=“
               
             ResolveReferences;
             ResolveKeySource;
             SetWin32ManifestProperties;
             FindReferenceAssembliesForReferences;
             _GenerateCompileInputs;
             BeforeCompile;
             _TimeStampBeforeCompile;
             _GenerateCompileDependencyCache;
             CoreCompile;
             _TimeStampAfterCompile;
             AfterCompile;
           ;
               _AfterCompileWinFXInternal
           ”(先前值:“
             ResolveReferences;
             ResolveKeySource;
             SetWin32ManifestProperties;
             FindReferenceAssembliesForReferences;
             _GenerateCompileInputs;
             BeforeCompile;
             _TimeStampBeforeCompile;
             _GenerateCompileDependencyCache;
             CoreCompile;
             _TimeStampAfterCompile;
             AfterCompile;
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets (813,9) 处重新分配属性: $(PublishBuildDependsOn)=“
                   BuildOnlySettings;
                   PrepareForBuild;
                   ResolveReferences;
                   PrepareResources;
                   ResolveKeySource;
                   PrepareResourcesForSatelliteAssemblies;
                   GenerateSerializationAssemblies;
                   CreateSatelliteAssemblies;
               ”(先前值:“
             BuildOnlySettings;
             PrepareForBuild;
             ResolveReferences;
             PrepareResources;
             ResolveKeySource;
             GenerateSerializationAssemblies;
             CreateSatelliteAssemblies;
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Data.Entity.targets (35,5) 处重新分配属性: $(BuildDependsOn)=“
             EntityDeploy;
             
             BeforeBuild;
             CoreBuild;
             AfterBuild
           
           ”(先前值:“
             BeforeBuild;
             CoreBuild;
             AfterBuild
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Data.Entity.targets (42,5) 处重新分配属性: $(CleanDependsOn)=“
             
             BeforeClean;
             UnmanagedUnregistration;
             CoreClean;
             CleanReferencedProjects;
             CleanPublishFolder;
             AfterClean
           ;
             EntityClean;
           ”(先前值:“
             BeforeClean;
             UnmanagedUnregistration;
             CoreClean;
             CleanReferencedProjects;
             CleanPublishFolder;
             AfterClean
           ”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets (35,5) 处重新分配属性: $(PrepareResourcesDependsOn)=“
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
              
           ”(先前值:“
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
             ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets (16,5) 处重新分配属性: $(PrepareResourcesDependsOn)=“
             ValidationExtension;
             ExpressionBuildExtension;
             
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
              
           
           ”(先前值:“
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
              
           ”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\TeamTest\Microsoft.TeamTest.targets (4,5) 处重新分配属性: $(ResolveReferencesDependsOn)=“
             
             
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             ResolveComReferences;
             AfterResolveReferences
           ;
             ImplicitlyExpandDesignTimeFacades
           ;
             ResolveTestReferences
           ”(先前值:“
             
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             ResolveComReferences;
             AfterResolveReferences
           ;
             ImplicitlyExpandDesignTimeFacades
           ”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Microsoft.Common.targets\ImportAfter\*
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\NuGet\17.0\Microsoft.NuGet.targets (74,5) 处重新分配属性: $(ProjectLockFile)=“obj\project.assets.json”(先前值:“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\project.assets.json”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\NuGet\17.0\Microsoft.NuGet.targets (185,5) 处重新分配属性: $(ResolveAssemblyReferencesDependsOn)=“
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ;ResolveNuGetPackageAssets”(先前值:“
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\NuGet\17.0\Microsoft.NuGet.targets (186,5) 处重新分配属性: $(PrepareResourcesDependsOn)=“ResolveNuGetPackageAssets;
             ValidationExtension;
             ExpressionBuildExtension;
             
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
              
           
           ”(先前值:“
             ValidationExtension;
             ExpressionBuildExtension;
             
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
              
           
           ”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\NuGet\17.0\Microsoft.NuGet.targets (267,5) 处重新分配属性: $(_HandlePackageFileConflictsAfter)=“ResolveNuGetPackageAssets;ResolveNuGetPackageAssetsNonAOT”(先前值:“ResolveNuGetPackageAssets”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveFrameworkReferences”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“ResolveFrameworkReferences”。
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.NETFramework.CurrentVersion.targets”中的目标“GetFrameworkPaths”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetFrameworkPaths”。
       正在使用项目“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets”中的目标“SatelliteDllsProjectOutputGroup”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“SatelliteDllsProjectOutputGroup”。
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.WorkflowBuildExtensions.targets”中的目标“GenerateCompiledExpressionsTempFile”重写项目“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets”中的目标“GenerateCompiledExpressionsTempFile”。
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets”中的目标“CollectPackageReferences”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“CollectPackageReferences”。
       项目中不存在 AfterTargets 特性中的“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.CodeAnalysis.targets (450,11)”位置列出的目标“ClCompile”，将忽略该目标。
     1>项目“D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”(1)正在节点 1 上生成“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(2) (Clean 个目标)。
     2>项目文件包含 ToolsVersion="12.0"。此工具集未知或缺失(在此情况下，您可以通过安装合适的 MSBuild 版本来解决此问题)，或者生成可能已被强制到特定的 ToolsVersion (出于策略原因)。将项目视为具有 ToolsVersion="Current"。有关详细信息，请参阅 http://go.microsoft.com/fwlink/?LinkId=293424。
       由于条件的计算结果为 false，已跳过目标“EnableIntermediateOutputPathMismatchWarning”；('$(RestoreProjectStyle)' == 'PackageReference')的计算结果为('' == 'PackageReference')。
     2>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CheckForInvalidConfigurationAndPlatform”(目标“BeforeClean”依赖于它):
       由于 false 条件，已跳过任务“Error”；( '$(_InvalidConfigurationError)' == 'true' )计算为( '' == 'true' )。
       由于 false 条件，已跳过任务“Warning”；( '$(_InvalidConfigurationWarning)' == 'true' )计算为( '' == 'true' )。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Message”任务。
       任务“Message”
         Configuration=Debug
       已完成执行任务“Message”的操作。
       任务“Message”
         Platform=AnyCPU
       已完成执行任务“Message”的操作。
       由于 false 条件，已跳过任务“Error”；('$(OutDir)' != '' and !HasTrailingSlash('$(OutDir)'))计算为('bin\Debug\' != '' and !HasTrailingSlash('bin\Debug\'))。
       由于 false 条件，已跳过任务“Error”；('$(IntermediateOutputPath)' != '' and !HasTrailingSlash('$(IntermediateOutputPath)'))计算为('obj\Debug\' != '' and !HasTrailingSlash('obj\Debug\'))。
       由于 false 条件，已跳过任务“Error”；('$(BaseIntermediateOutputPath)' != '' and !HasTrailingSlash('$(BaseIntermediateOutputPath)'))计算为('obj\' != '' and !HasTrailingSlash('obj\'))。
       由于 false 条件，已跳过任务“Error”；( '$(_InitialMSBuildProjectExtensionsPath)' != '' And '$(MSBuildProjectExtensionsPath)' != '$(_InitialMSBuildProjectExtensionsPath)' )计算为( 'D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\' != '' And 'D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\' != 'D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\' )。
       由于 false 条件，已跳过任务“Warning”；( '$(EnableBaseIntermediateOutputPathMismatchWarning)' == 'true' And '$(_InitialBaseIntermediateOutputPath)' != '$(BaseIntermediateOutputPath)' And '$(BaseIntermediateOutputPath)' != '$(MSBuildProjectExtensionsPath)' )计算为( '' == 'true' And 'obj\' != 'obj\' And 'obj\' != 'D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\' )。
     2>已完成在项目“StoryScript.csproj”中生成目标“_CheckForInvalidConfigurationAndPlatform”的操作。
     2>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeClean”(目标“Clean”依赖于它):
     2>已完成在项目“StoryScript.csproj”中生成目标“BeforeClean”的操作。
       由于条件的计算结果为 false，已跳过目标“UnmanagedUnregistration”；((('$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)' or '$(RegisterForComInterop)' != 'true' or '$(OutputType)' != 'library') or
                           ('$(_AssemblyTimestampBeforeCompile)' == '')) and
                          Exists('@(_UnmanagedRegistrationCache)'))的计算结果为((('' != '' or '' != 'true' or 'Library' != 'library') or
                           ('' == '')) and
                          Exists('obj\StoryScript.csproj.UnmanagedRegistration.cache'))。
     2>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CoreClean”(目标“Clean”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Delete”任务。
       任务“Delete”
         文件“obj\Debug\\TempCA\StoryScript.pdb”不存在。正在跳过。
         文件“obj\Debug\\TempCA\StoryScript.dll”不存在。正在跳过。
       已完成执行任务“Delete”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ReadLinesFromFile”任务。
       任务“ReadLinesFromFile”
       已完成执行任务“ReadLinesFromFile”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“FindUnderPath”任务。
       任务“FindUnderPath”
         比较路径为“bin\Debug\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“obj\Debug\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“Delete”
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\StoryScript.dll”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\StoryScript.pdb”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\Dsl.dll”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\LitJson.dll”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\UnityEngine.dll”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\Dsl.pdb”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\StoryScript.csproj.AssemblyReference.cache”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\StoryScript.csproj.CoreCompileInputs.cache”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\StoryScript.csproj.CopyComplete”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\StoryScript.dll”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\StoryScript.pdb”。
       已完成执行任务“Delete”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“RemoveDuplicates”任务。
       任务“RemoveDuplicates”
       已完成执行任务“RemoveDuplicates”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“MakeDir”任务。
       任务“MakeDir”
       已完成执行任务“MakeDir”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“WriteLinesToFile”任务。
       任务“WriteLinesToFile”
       已完成执行任务“WriteLinesToFile”的操作。
     2>已完成在项目“StoryScript.csproj”中生成目标“CoreClean”的操作。
     2>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AssignProjectConfiguration”(目标“PrepareProjectReferences”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“AssignProjectConfiguration”任务。
       任务“AssignProjectConfiguration”
       已完成执行任务“AssignProjectConfiguration”的操作。
     2>已完成在项目“StoryScript.csproj”中生成目标“AssignProjectConfiguration”的操作。
     2>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_SplitProjectReferencesByFileExistence”(目标“PrepareProjectReferences”依赖于它):
       由于 false 条件，已跳过任务“ResolveNonMSBuildProjectOutput”；('$(BuildingInsideVisualStudio)'=='true' and '@(ProjectReferenceWithConfiguration)'!='')计算为(''=='true' and ''!='')。
     2>已完成在项目“StoryScript.csproj”中生成目标“_SplitProjectReferencesByFileExistence”的操作。
     2>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_AddOutputPathToGlobalPropertiesToRemove”(目标“_GetProjectReferenceTargetFrameworkProperties”依赖于它):
     2>已完成在项目“StoryScript.csproj”中生成目标“_AddOutputPathToGlobalPropertiesToRemove”的操作。
     2>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GetProjectReferenceTargetFrameworkProperties”(目标“PrepareProjectReferences”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“MSBuild”任务。
       任务“MSBuild”
       已完成执行任务“MSBuild”的操作。
       由于 false 条件，已跳过任务“MSBuild”；('%(_MSBuildProjectReferenceExistent.SkipGetTargetFrameworkProperties)' != 'true' and '$(EnableDynamicPlatformResolution)' == 'true')计算为('' != 'true' and '' == 'true')。
       由于 false 条件，已跳过任务“GetReferenceNearestTargetFrameworkTask”；('@(_ProjectReferenceTargetFrameworkPossibilities)' != '' and '$(ReferringTargetFrameworkForProjectReferences)' != ''
                                                               And '$(GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter)' == 'true' and '%(_ProjectReferenceTargetFrameworkPossibilities.IsVcxOrNativeProj)' != 'true')计算为('' != '' and '.NETFramework,Version=v4.8' != ''
                                                               And 'true' == 'true' and '' != 'true')。
       由于 false 条件，已跳过任务“GetReferenceNearestTargetFrameworkTask”；('@(_ProjectReferenceTargetFrameworkPossibilities)' != '' and '$(ReferringTargetFrameworkForProjectReferences)' != ''
                                                               And '$(GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter)' != 'true' and '%(_ProjectReferenceTargetFrameworkPossibilities.IsVcxOrNativeProj)' != 'true')计算为('' != '' and '.NETFramework,Version=v4.8' != ''
                                                               And 'true' != 'true' and '' != 'true')。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“SetRidAgnosticValueForProjects”任务。
       任务“SetRidAgnosticValueForProjects”
       已完成执行任务“SetRidAgnosticValueForProjects”的操作。
     2>已完成在项目“StoryScript.csproj”中生成目标“_GetProjectReferenceTargetFrameworkProperties”的操作。
       由于条件的计算结果为 false，已跳过目标“_GetProjectReferencePlatformProperties”；('$(EnableDynamicPlatformResolution)' == 'true'
                            and '$(BuildingInsideVisualStudio)' != 'true'
                            and '@(_MSBuildProjectReferenceExistent)' != '')的计算结果为('' == 'true'
                            and '' != 'true'
                            and '' != '')。
     2>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareProjectReferences”(目标“CleanReferencedProjects”依赖于它):
     2>已完成在项目“StoryScript.csproj”中生成目标“PrepareProjectReferences”的操作。
     2>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CleanReferencedProjects”(目标“Clean”依赖于它):
       由于 false 条件，已跳过任务“MSBuild”；('$(BuildingInsideVisualStudio)' != 'true' and '$(BuildProjectReferences)' == 'true' and '@(_MSBuildProjectReferenceExistent)' != '')计算为('' != 'true' and 'true' == 'true' and '' != '')。
     2>已完成在项目“StoryScript.csproj”中生成目标“CleanReferencedProjects”的操作。
     2>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CleanPublishFolder”(目标“Clean”依赖于它):
       由于 false 条件，已跳过任务“RemoveDir”；(Exists('$(ClickOncePublishDir)'))计算为(Exists('bin\Debug\app.publish\'))。
     2>已完成在项目“StoryScript.csproj”中生成目标“CleanPublishFolder”的操作。
     2>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterClean”(目标“Clean”依赖于它):
     2>已完成在项目“StoryScript.csproj”中生成目标“AfterClean”的操作。
       由于条件的计算结果为 false，已跳过目标“EntityClean”；('@(EntityDeploy)' != '')的计算结果为('' != '')。
       已跳过目标“_CheckForInvalidConfigurationAndPlatform”。以前的生成已成功。
       已跳过目标“_CheckForInvalidConfigurationAndPlatform”。以前的生成已成功。
     2>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Clean”(入口点):
     2>已完成在项目“StoryScript.csproj”中生成目标“Clean”的操作。
     2>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.ServiceModel.targets”中的目标“CleanXsdCodeGen”(入口点):
       任务“Delete”
       已完成执行任务“Delete”的操作。
     2>已完成在项目“StoryScript.csproj”中生成目标“CleanXsdCodeGen”的操作。
     2>已完成生成项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(Clean 个目标)的操作。
     0>将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Microsoft.Common.props
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Microsoft.Common.props (56,5) 处重新分配属性: $(MSBuildProjectExtensionsPath)=“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\”(先前值:“obj\”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Microsoft.Common.props
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportBefore\*
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Microsoft.Common.props (56,5) 处重新分配属性: $(MSBuildProjectExtensionsPath)=“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\obj\”(先前值:“obj\”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportBefore\*
       “Configuration”属性是全局属性，不能修改。
       “Platform”属性是全局属性，不能修改。
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       “Configuration”属性是全局属性，不能修改。
       “Platform”属性是全局属性，不能修改。
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       “Configuration”属性是全局属性，不能修改。
       “Platform”属性是全局属性，不能修改。
       “Configuration”属性是全局属性，不能修改。
       “Platform”属性是全局属性，不能修改。
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets (188,5) 处重新分配属性: $(CommandLineArgsForDesignTimeEvaluation)=“-langversion:7.3 -define:TRACE;DEBUG;ENABLE_ERROR_LOG;ENABLE_LOG”(先前值:“-langversion:7.3”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets (188,5) 处重新分配属性: $(CommandLineArgsForDesignTimeEvaluation)=“-langversion:7.3 -define:TRACE;DEBUG;ROBOT”(先前值:“-langversion:7.3”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (13,5) 处重新分配属性: $(DefineCommonItemSchemas)=“false”(先前值:“true”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (14,5) 处重新分配属性: $(DefineCommonCapabilities)=“false”(先前值:“true”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (13,5) 处重新分配属性: $(DefineCommonItemSchemas)=“false”(先前值:“true”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (15,5) 处重新分配属性: $(DefineCommonReferenceSchemas)=“false”(先前值:“true”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (14,5) 处重新分配属性: $(DefineCommonCapabilities)=“false”(先前值:“true”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (15,5) 处重新分配属性: $(DefineCommonReferenceSchemas)=“false”(先前值:“true”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Microsoft.Common.targets\ImportBefore\*
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Microsoft.Common.targets\ImportBefore\*
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.NETFramework.CurrentVersion.props (117,5) 处重新分配属性: $(AvailablePlatforms)=“Any CPU,x86,x64,ARM64”(先前值:“Any CPU,x86,x64”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.NETFramework.CurrentVersion.props (117,5) 处重新分配属性: $(AvailablePlatforms)=“Any CPU,x86,x64,ARM64”(先前值:“Any CPU,x86,x64”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       “Platform”属性是全局属性，不能修改。
       “Platform”属性是全局属性，不能修改。
       “Configuration”属性是全局属性，不能修改。
       “Configuration”属性是全局属性，不能修改。
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (175,5) 处重新分配属性: $(_DebugSymbolsProduced)=“true”(先前值:“false”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (175,5) 处重新分配属性: $(_DebugSymbolsProduced)=“true”(先前值:“false”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (185,5) 处重新分配属性: $(_DocumentationFileProduced)=“false”(先前值:“true”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (185,5) 处重新分配属性: $(_DocumentationFileProduced)=“false”(先前值:“true”)
       “SolutionName”属性是全局属性，不能修改。
       “SolutionFileName”属性是全局属性，不能修改。
       “SolutionName”属性是全局属性，不能修改。
       “SolutionPath”属性是全局属性，不能修改。
       “SolutionFileName”属性是全局属性，不能修改。
       “SolutionDir”属性是全局属性，不能修改。
       “SolutionPath”属性是全局属性，不能修改。
       “SolutionDir”属性是全局属性，不能修改。
       “SolutionExt”属性是全局属性，不能修改。
       “SolutionExt”属性是全局属性，不能修改。
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (515,5) 处重新分配属性: $(ProcessorArchitecture)=“msil”(先前值:“AnyCPU”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (529,5) 处重新分配属性: $(ProcessorArchitecture)=“msil”(先前值:“”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (568,5) 处重新分配属性: $(DelaySign)=“”(先前值:“false”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (568,5) 处重新分配属性: $(DelaySign)=“”(先前值:“false”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (637,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};”(先前值:“{CandidateAssemblyFiles}”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (638,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem}”(先前值:“{CandidateAssemblyFiles};”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (637,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};”(先前值:“{CandidateAssemblyFiles}”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (639,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory}”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem}”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (638,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem}”(先前值:“{CandidateAssemblyFiles};”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (640,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory}”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (639,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory}”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem}”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (641,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx}”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (640,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory}”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (642,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders}”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx}”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (641,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx}”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (643,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders};{GAC}”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders}”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (642,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders}”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx}”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (644,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders};{GAC};{RawFileName}”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders};{GAC}”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (643,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders};{GAC}”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders}”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (645,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders};{GAC};{RawFileName};bin\Debug\”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders};{GAC};{RawFileName}”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (644,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders};{GAC};{RawFileName}”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders};{GAC}”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (645,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders};{GAC};{RawFileName};bin\Debug\”(先前值:“{CandidateAssemblyFiles};;{HintPathFromItem};{TargetFrameworkDirectory};{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8};;{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx};{AssemblyFolders};{GAC};{RawFileName}”)
       Property 'LOCALAPPDATA' with value 'C:\Users\dreamanlan\AppData\Local' expanded from the environment.
       Property 'LOCALAPPDATA' with value 'C:\Users\dreamanlan\AppData\Local' expanded from the environment.
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (3789,5) 处重新分配属性: $(_SGenGenerateSerializationAssembliesConfig)=“Auto”(先前值:“”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (3790,5) 处重新分配属性: $(_SGenGenerateSerializationAssembliesConfig)=“Off”(先前值:“Auto”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (3789,5) 处重新分配属性: $(_SGenGenerateSerializationAssembliesConfig)=“Auto”(先前值:“”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (4927,5) 处重新分配属性: $(_TargetsThatPrepareProjectReferences)=“
             AssignProjectConfiguration;
             _SplitProjectReferencesByFileExistence
           ”(先前值:“_SplitProjectReferencesByFileExistence”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (3790,5) 处重新分配属性: $(_SGenGenerateSerializationAssembliesConfig)=“Off”(先前值:“Auto”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (4927,5) 处重新分配属性: $(_TargetsThatPrepareProjectReferences)=“
             AssignProjectConfiguration;
             _SplitProjectReferencesByFileExistence
           ”(先前值:“_SplitProjectReferencesByFileExistence”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.CodeAnalysis.targets (125,5) 处重新分配属性: $(_CodeAnalysisTreatWarningsAsErrors)=“false”(先前值:“”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.CodeAnalysis.targets (125,5) 处重新分配属性: $(_CodeAnalysisTreatWarningsAsErrors)=“false”(先前值:“”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.CodeAnalysis.targets (167,9) 处重新分配属性: $(PrepareForRunDependsOn)=“
             CopyFilesToOutputDirectory
           ;RunCodeAnalysis”(先前值:“
             CopyFilesToOutputDirectory
           ”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.CodeAnalysis.targets (167,9) 处重新分配属性: $(PrepareForRunDependsOn)=“
             CopyFilesToOutputDirectory
           ;RunCodeAnalysis”(先前值:“
             CopyFilesToOutputDirectory
           ”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.NETFramework.CurrentVersion.targets (74,5) 处重新分配属性: $(ResolveReferencesDependsOn)=“
             
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             ResolveComReferences;
             AfterResolveReferences
           ;
             ImplicitlyExpandDesignTimeFacades
           ”(先前值:“
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             ResolveComReferences;
             AfterResolveReferences
           ”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.NETFramework.CurrentVersion.targets (74,5) 处重新分配属性: $(ResolveReferencesDependsOn)=“
             
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             ResolveComReferences;
             AfterResolveReferences
           ;
             ImplicitlyExpandDesignTimeFacades
           ”(先前值:“
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             ResolveComReferences;
             AfterResolveReferences
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets (97,7) 处重新分配属性: $(PrepareResourceNamesDependsOn)=“
                           AssignWinFXEmbeddedResource;
                           
             AssignTargetPaths;
             SplitResourcesByCulture;
             CreateManifestResourceNames;
             CreateCustomManifestResourceNames
           
             ”(先前值:“
             AssignTargetPaths;
             SplitResourcesByCulture;
             CreateManifestResourceNames;
             CreateCustomManifestResourceNames
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets (97,7) 处重新分配属性: $(PrepareResourceNamesDependsOn)=“
                           AssignWinFXEmbeddedResource;
                           
             AssignTargetPaths;
             SplitResourcesByCulture;
             CreateManifestResourceNames;
             CreateCustomManifestResourceNames
           
             ”(先前值:“
             AssignTargetPaths;
             SplitResourcesByCulture;
             CreateManifestResourceNames;
             CreateCustomManifestResourceNames
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets (108,7) 处重新分配属性: $(PrepareResourcesDependsOn)=“
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
             ”(先前值:“
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets (108,7) 处重新分配属性: $(PrepareResourcesDependsOn)=“
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
             ”(先前值:“
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets (184,5) 处重新分配属性: $(CompileDependsOn)=“
               
             ResolveReferences;
             ResolveKeySource;
             SetWin32ManifestProperties;
             FindReferenceAssembliesForReferences;
             _GenerateCompileInputs;
             BeforeCompile;
             _TimeStampBeforeCompile;
             _GenerateCompileDependencyCache;
             CoreCompile;
             _TimeStampAfterCompile;
             AfterCompile;
           ;
               _AfterCompileWinFXInternal
           ”(先前值:“
             ResolveReferences;
             ResolveKeySource;
             SetWin32ManifestProperties;
             FindReferenceAssembliesForReferences;
             _GenerateCompileInputs;
             BeforeCompile;
             _TimeStampBeforeCompile;
             _GenerateCompileDependencyCache;
             CoreCompile;
             _TimeStampAfterCompile;
             AfterCompile;
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets (184,5) 处重新分配属性: $(CompileDependsOn)=“
               
             ResolveReferences;
             ResolveKeySource;
             SetWin32ManifestProperties;
             FindReferenceAssembliesForReferences;
             _GenerateCompileInputs;
             BeforeCompile;
             _TimeStampBeforeCompile;
             _GenerateCompileDependencyCache;
             CoreCompile;
             _TimeStampAfterCompile;
             AfterCompile;
           ;
               _AfterCompileWinFXInternal
           ”(先前值:“
             ResolveReferences;
             ResolveKeySource;
             SetWin32ManifestProperties;
             FindReferenceAssembliesForReferences;
             _GenerateCompileInputs;
             BeforeCompile;
             _TimeStampBeforeCompile;
             _GenerateCompileDependencyCache;
             CoreCompile;
             _TimeStampAfterCompile;
             AfterCompile;
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets (813,9) 处重新分配属性: $(PublishBuildDependsOn)=“
                   BuildOnlySettings;
                   PrepareForBuild;
                   ResolveReferences;
                   PrepareResources;
                   ResolveKeySource;
                   PrepareResourcesForSatelliteAssemblies;
                   GenerateSerializationAssemblies;
                   CreateSatelliteAssemblies;
               ”(先前值:“
             BuildOnlySettings;
             PrepareForBuild;
             ResolveReferences;
             PrepareResources;
             ResolveKeySource;
             GenerateSerializationAssemblies;
             CreateSatelliteAssemblies;
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets (813,9) 处重新分配属性: $(PublishBuildDependsOn)=“
                   BuildOnlySettings;
                   PrepareForBuild;
                   ResolveReferences;
                   PrepareResources;
                   ResolveKeySource;
                   PrepareResourcesForSatelliteAssemblies;
                   GenerateSerializationAssemblies;
                   CreateSatelliteAssemblies;
               ”(先前值:“
             BuildOnlySettings;
             PrepareForBuild;
             ResolveReferences;
             PrepareResources;
             ResolveKeySource;
             GenerateSerializationAssemblies;
             CreateSatelliteAssemblies;
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Data.Entity.targets (35,5) 处重新分配属性: $(BuildDependsOn)=“
             EntityDeploy;
             
             BeforeBuild;
             CoreBuild;
             AfterBuild
           
           ”(先前值:“
             BeforeBuild;
             CoreBuild;
             AfterBuild
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Data.Entity.targets (35,5) 处重新分配属性: $(BuildDependsOn)=“
             EntityDeploy;
             
             BeforeBuild;
             CoreBuild;
             AfterBuild
           
           ”(先前值:“
             BeforeBuild;
             CoreBuild;
             AfterBuild
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Data.Entity.targets (42,5) 处重新分配属性: $(CleanDependsOn)=“
             
             BeforeClean;
             UnmanagedUnregistration;
             CoreClean;
             CleanReferencedProjects;
             CleanPublishFolder;
             AfterClean
           ;
             EntityClean;
           ”(先前值:“
             BeforeClean;
             UnmanagedUnregistration;
             CoreClean;
             CleanReferencedProjects;
             CleanPublishFolder;
             AfterClean
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Data.Entity.targets (42,5) 处重新分配属性: $(CleanDependsOn)=“
             
             BeforeClean;
             UnmanagedUnregistration;
             CoreClean;
             CleanReferencedProjects;
             CleanPublishFolder;
             AfterClean
           ;
             EntityClean;
           ”(先前值:“
             BeforeClean;
             UnmanagedUnregistration;
             CoreClean;
             CleanReferencedProjects;
             CleanPublishFolder;
             AfterClean
           ”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets (35,5) 处重新分配属性: $(PrepareResourcesDependsOn)=“
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
              
           ”(先前值:“
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
             ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets (35,5) 处重新分配属性: $(PrepareResourcesDependsOn)=“
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
              
           ”(先前值:“
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
             ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets (16,5) 处重新分配属性: $(PrepareResourcesDependsOn)=“
             ValidationExtension;
             ExpressionBuildExtension;
             
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
              
           
           ”(先前值:“
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
              
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets (16,5) 处重新分配属性: $(PrepareResourcesDependsOn)=“
             ValidationExtension;
             ExpressionBuildExtension;
             
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
              
           
           ”(先前值:“
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
              
           ”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\TeamTest\Microsoft.TeamTest.targets (4,5) 处重新分配属性: $(ResolveReferencesDependsOn)=“
             
             
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             ResolveComReferences;
             AfterResolveReferences
           ;
             ImplicitlyExpandDesignTimeFacades
           ;
             ResolveTestReferences
           ”(先前值:“
             
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             ResolveComReferences;
             AfterResolveReferences
           ;
             ImplicitlyExpandDesignTimeFacades
           ”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\TeamTest\Microsoft.TeamTest.targets (4,5) 处重新分配属性: $(ResolveReferencesDependsOn)=“
             
             
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             ResolveComReferences;
             AfterResolveReferences
           ;
             ImplicitlyExpandDesignTimeFacades
           ;
             ResolveTestReferences
           ”(先前值:“
             
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             ResolveComReferences;
             AfterResolveReferences
           ;
             ImplicitlyExpandDesignTimeFacades
           ”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Microsoft.Common.targets\ImportAfter\*
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Microsoft.Common.targets\ImportAfter\*
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\NuGet\17.0\Microsoft.NuGet.targets (74,5) 处重新分配属性: $(ProjectLockFile)=“obj\project.assets.json”(先前值:“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\obj\project.assets.json”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\NuGet\17.0\Microsoft.NuGet.targets (74,5) 处重新分配属性: $(ProjectLockFile)=“obj\project.assets.json”(先前值:“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\project.assets.json”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\NuGet\17.0\Microsoft.NuGet.targets (185,5) 处重新分配属性: $(ResolveAssemblyReferencesDependsOn)=“
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ;ResolveNuGetPackageAssets”(先前值:“
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\NuGet\17.0\Microsoft.NuGet.targets (185,5) 处重新分配属性: $(ResolveAssemblyReferencesDependsOn)=“
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ;ResolveNuGetPackageAssets”(先前值:“
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\NuGet\17.0\Microsoft.NuGet.targets (186,5) 处重新分配属性: $(PrepareResourcesDependsOn)=“ResolveNuGetPackageAssets;
             ValidationExtension;
             ExpressionBuildExtension;
             
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
              
           
           ”(先前值:“
             ValidationExtension;
             ExpressionBuildExtension;
             
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
              
           
           ”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\NuGet\17.0\Microsoft.NuGet.targets (186,5) 处重新分配属性: $(PrepareResourcesDependsOn)=“ResolveNuGetPackageAssets;
             ValidationExtension;
             ExpressionBuildExtension;
             
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
              
           
           ”(先前值:“
             ValidationExtension;
             ExpressionBuildExtension;
             
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
              
           
           ”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\NuGet\17.0\Microsoft.NuGet.targets (267,5) 处重新分配属性: $(_HandlePackageFileConflictsAfter)=“ResolveNuGetPackageAssets;ResolveNuGetPackageAssetsNonAOT”(先前值:“ResolveNuGetPackageAssets”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\NuGet\17.0\Microsoft.NuGet.targets (267,5) 处重新分配属性: $(_HandlePackageFileConflictsAfter)=“ResolveNuGetPackageAssets;ResolveNuGetPackageAssetsNonAOT”(先前值:“ResolveNuGetPackageAssets”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveFrameworkReferences”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“ResolveFrameworkReferences”。
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveFrameworkReferences”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“ResolveFrameworkReferences”。
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.NETFramework.CurrentVersion.targets”中的目标“GetFrameworkPaths”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetFrameworkPaths”。
       正在使用项目“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets”中的目标“SatelliteDllsProjectOutputGroup”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“SatelliteDllsProjectOutputGroup”。
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.WorkflowBuildExtensions.targets”中的目标“GenerateCompiledExpressionsTempFile”重写项目“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets”中的目标“GenerateCompiledExpressionsTempFile”。
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets”中的目标“CollectPackageReferences”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“CollectPackageReferences”。
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.NETFramework.CurrentVersion.targets”中的目标“GetFrameworkPaths”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetFrameworkPaths”。
       正在使用项目“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets”中的目标“SatelliteDllsProjectOutputGroup”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“SatelliteDllsProjectOutputGroup”。
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.WorkflowBuildExtensions.targets”中的目标“GenerateCompiledExpressionsTempFile”重写项目“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets”中的目标“GenerateCompiledExpressionsTempFile”。
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets”中的目标“CollectPackageReferences”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“CollectPackageReferences”。
       项目中不存在 AfterTargets 特性中的“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.CodeAnalysis.targets (450,11)”位置列出的目标“ClCompile”，将忽略该目标。
       项目中不存在 AfterTargets 特性中的“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.CodeAnalysis.targets (450,11)”位置列出的目标“ClCompile”，将忽略该目标。
     1>项目“D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”(1)正在节点 2 上生成“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(3) (Clean 个目标)。
     3>项目文件包含 ToolsVersion="12.0"。此工具集未知或缺失(在此情况下，您可以通过安装合适的 MSBuild 版本来解决此问题)，或者生成可能已被强制到特定的 ToolsVersion (出于策略原因)。将项目视为具有 ToolsVersion="Current"。有关详细信息，请参阅 http://go.microsoft.com/fwlink/?LinkId=293424。
       由于条件的计算结果为 false，已跳过目标“EnableIntermediateOutputPathMismatchWarning”；('$(RestoreProjectStyle)' == 'PackageReference')的计算结果为('' == 'PackageReference')。
     3>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CheckForInvalidConfigurationAndPlatform”(目标“BeforeClean”依赖于它):
       由于 false 条件，已跳过任务“Error”；( '$(_InvalidConfigurationError)' == 'true' )计算为( '' == 'true' )。
       由于 false 条件，已跳过任务“Warning”；( '$(_InvalidConfigurationWarning)' == 'true' )计算为( '' == 'true' )。
     1>项目“D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”(1)正在节点 3 上生成“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”(4) (Clean 个目标)。
     4>项目文件包含 ToolsVersion="12.0"。此工具集未知或缺失(在此情况下，您可以通过安装合适的 MSBuild 版本来解决此问题)，或者生成可能已被强制到特定的 ToolsVersion (出于策略原因)。将项目视为具有 ToolsVersion="Current"。有关详细信息，请参阅 http://go.microsoft.com/fwlink/?LinkId=293424。
       由于条件的计算结果为 false，已跳过目标“EnableIntermediateOutputPathMismatchWarning”；('$(RestoreProjectStyle)' == 'PackageReference')的计算结果为('' == 'PackageReference')。
     4>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CheckForInvalidConfigurationAndPlatform”(目标“BeforeClean”依赖于它):
       由于 false 条件，已跳过任务“Error”；( '$(_InvalidConfigurationError)' == 'true' )计算为( '' == 'true' )。
       由于 false 条件，已跳过任务“Warning”；( '$(_InvalidConfigurationWarning)' == 'true' )计算为( '' == 'true' )。
     3>_CheckForInvalidConfigurationAndPlatform:
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Message”任务。
       任务“Message”
         Configuration=Debug
       已完成执行任务“Message”的操作。
       任务“Message”
         Platform=AnyCPU
     4>_CheckForInvalidConfigurationAndPlatform:
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Message”任务。
     3>已完成执行任务“Message”的操作。
     4>任务“Message”
     3>_CheckForInvalidConfigurationAndPlatform:
       由于 false 条件，已跳过任务“Error”；('$(OutDir)' != '' and !HasTrailingSlash('$(OutDir)'))计算为('bin\Debug\' != '' and !HasTrailingSlash('bin\Debug\'))。
       由于 false 条件，已跳过任务“Error”；('$(IntermediateOutputPath)' != '' and !HasTrailingSlash('$(IntermediateOutputPath)'))计算为('obj\Debug\' != '' and !HasTrailingSlash('obj\Debug\'))。
       由于 false 条件，已跳过任务“Error”；('$(BaseIntermediateOutputPath)' != '' and !HasTrailingSlash('$(BaseIntermediateOutputPath)'))计算为('obj\' != '' and !HasTrailingSlash('obj\'))。
       由于 false 条件，已跳过任务“Error”；( '$(_InitialMSBuildProjectExtensionsPath)' != '' And '$(MSBuildProjectExtensionsPath)' != '$(_InitialMSBuildProjectExtensionsPath)' )计算为( 'D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\' != '' And 'D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\' != 'D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\' )。
       由于 false 条件，已跳过任务“Warning”；( '$(EnableBaseIntermediateOutputPathMismatchWarning)' == 'true' And '$(_InitialBaseIntermediateOutputPath)' != '$(BaseIntermediateOutputPath)' And '$(BaseIntermediateOutputPath)' != '$(MSBuildProjectExtensionsPath)' )计算为( '' == 'true' And 'obj\' != 'obj\' And 'obj\' != 'D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\' )。
     3>已完成在项目“Common.csproj”中生成目标“_CheckForInvalidConfigurationAndPlatform”的操作。
     4>_CheckForInvalidConfigurationAndPlatform:
         Configuration=Debug
       已完成执行任务“Message”的操作。
     3>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeClean”(目标“Clean”依赖于它):
     3>已完成在项目“Common.csproj”中生成目标“BeforeClean”的操作。
     4>任务“Message”
     3>由于条件的计算结果为 false，已跳过目标“UnmanagedUnregistration”；((('$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)' or '$(RegisterForComInterop)' != 'true' or '$(OutputType)' != 'library') or
                    ('$(_AssemblyTimestampBeforeCompile)' == '')) and
                   Exists('@(_UnmanagedRegistrationCache)'))的计算结果为((('' != '' or '' != 'true' or 'Library' != 'library') or
                    ('' == '')) and
                   Exists('obj\Common.csproj.UnmanagedRegistration.cache'))。
     4>_CheckForInvalidConfigurationAndPlatform:
         Platform=AnyCPU
       已完成执行任务“Message”的操作。
       由于 false 条件，已跳过任务“Error”；('$(OutDir)' != '' and !HasTrailingSlash('$(OutDir)'))计算为('bin\Debug\' != '' and !HasTrailingSlash('bin\Debug\'))。
       由于 false 条件，已跳过任务“Error”；('$(IntermediateOutputPath)' != '' and !HasTrailingSlash('$(IntermediateOutputPath)'))计算为('obj\Debug\' != '' and !HasTrailingSlash('obj\Debug\'))。
       由于 false 条件，已跳过任务“Error”；('$(BaseIntermediateOutputPath)' != '' and !HasTrailingSlash('$(BaseIntermediateOutputPath)'))计算为('obj\' != '' and !HasTrailingSlash('obj\'))。
       由于 false 条件，已跳过任务“Error”；( '$(_InitialMSBuildProjectExtensionsPath)' != '' And '$(MSBuildProjectExtensionsPath)' != '$(_InitialMSBuildProjectExtensionsPath)' )计算为( 'D:\GitHub\GameDemo\GameLibrary\App\GameKernel\obj\' != '' And 'D:\GitHub\GameDemo\GameLibrary\App\GameKernel\obj\' != 'D:\GitHub\GameDemo\GameLibrary\App\GameKernel\obj\' )。
     3>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CoreClean”(目标“Clean”依赖于它):
     3>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Delete”任务。
     4>_CheckForInvalidConfigurationAndPlatform:
       由于 false 条件，已跳过任务“Warning”；( '$(EnableBaseIntermediateOutputPathMismatchWarning)' == 'true' And '$(_InitialBaseIntermediateOutputPath)' != '$(BaseIntermediateOutputPath)' And '$(BaseIntermediateOutputPath)' != '$(MSBuildProjectExtensionsPath)' )计算为( '' == 'true' And 'obj\' != 'obj\' And 'obj\' != 'D:\GitHub\GameDemo\GameLibrary\App\GameKernel\obj\' )。
     3>任务“Delete”
     4>已完成在项目“GameKernel.csproj”中生成目标“_CheckForInvalidConfigurationAndPlatform”的操作。
     4>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeClean”(目标“Clean”依赖于它):
     4>已完成在项目“GameKernel.csproj”中生成目标“BeforeClean”的操作。
       由于条件的计算结果为 false，已跳过目标“UnmanagedUnregistration”；((('$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)' or '$(RegisterForComInterop)' != 'true' or '$(OutputType)' != 'library') or
                           ('$(_AssemblyTimestampBeforeCompile)' == '')) and
                          Exists('@(_UnmanagedRegistrationCache)'))的计算结果为((('' != '' or '' != 'true' or 'Library' != 'library') or
                           ('' == '')) and
                          Exists('obj\GameKernel.csproj.UnmanagedRegistration.cache'))。
     4>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CoreClean”(目标“Clean”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Delete”任务。
       任务“Delete”
         文件“obj\Debug\\TempCA\GameKernel.pdb”不存在。正在跳过。
     3>CoreClean:
         文件“obj\Debug\\TempCA\Common.pdb”不存在。正在跳过。
     4>CoreClean:
         文件“obj\Debug\\TempCA\GameKernel.dll”不存在。正在跳过。
     3>CoreClean:
         文件“obj\Debug\\TempCA\Common.dll”不存在。正在跳过。
       已完成执行任务“Delete”的操作。
     4>已完成执行任务“Delete”的操作。
     3>CoreClean:
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ReadLinesFromFile”任务。
       任务“ReadLinesFromFile”
     4>CoreClean:
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ReadLinesFromFile”任务。
       任务“ReadLinesFromFile”
     3>已完成执行任务“ReadLinesFromFile”的操作。
     4>已完成执行任务“ReadLinesFromFile”的操作。
     3>CoreClean:
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“FindUnderPath”任务。
     4>CoreClean:
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“FindUnderPath”任务。
     3>任务“FindUnderPath”
     4>任务“FindUnderPath”
     3>CoreClean:
         比较路径为“bin\Debug\”。
     4>CoreClean:
         比较路径为“bin\Debug\”。
     3>已完成执行任务“FindUnderPath”的操作。
     4>已完成执行任务“FindUnderPath”的操作。
     3>任务“FindUnderPath”
     4>任务“FindUnderPath”
     3>CoreClean:
         比较路径为“obj\Debug\”。
       已完成执行任务“FindUnderPath”的操作。
     4>CoreClean:
         比较路径为“obj\Debug\”。
     3>任务“Delete”
     4>已完成执行任务“FindUnderPath”的操作。
       任务“Delete”
     3>CoreClean:
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\Common.dll”。
     4>CoreClean:
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\GameKernel.dll”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\GameKernel.pdb”。
     3>CoreClean:
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\Common.pdb”。
     4>CoreClean:
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\Common.dll”。
     3>CoreClean:
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\UnityEngine.dll”。
     4>CoreClean:
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\Dsl.dll”。
     3>CoreClean:
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\Common.csproj.AssemblyReference.cache”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\Common.csproj.CoreCompileInputs.cache”。
     4>CoreClean:
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\LitJson.dll”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\StoryScript.dll”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\UnityEngine.dll”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\UnityEngine.UI.dll”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\UnityEditor.dll”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\Common.pdb”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\StoryScript.pdb”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\Dsl.pdb”。
     3>CoreClean:
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\Common.csproj.CopyComplete”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\Common.dll”。
     4>CoreClean:
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\obj\Debug\GameKernel.csproj.AssemblyReference.cache”。
     3>CoreClean:
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\Common.pdb”。
     4>CoreClean:
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\obj\Debug\GameKernel.csproj.CoreCompileInputs.cache”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\obj\Debug\GameKernel.csproj.CopyComplete”。
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\obj\Debug\GameKernel.dll”。
     3>已完成执行任务“Delete”的操作。
     4>CoreClean:
         正在删除文件“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\obj\Debug\GameKernel.pdb”。
     3>CoreClean:
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“RemoveDuplicates”任务。
       任务“RemoveDuplicates”
     4>已完成执行任务“Delete”的操作。
     3>已完成执行任务“RemoveDuplicates”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“MakeDir”任务。
       任务“MakeDir”
     4>CoreClean:
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“RemoveDuplicates”任务。
       任务“RemoveDuplicates”
       已完成执行任务“RemoveDuplicates”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“MakeDir”任务。
       任务“MakeDir”
     3>已完成执行任务“MakeDir”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“WriteLinesToFile”任务。
       任务“WriteLinesToFile”
     4>已完成执行任务“MakeDir”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“WriteLinesToFile”任务。
       任务“WriteLinesToFile”
     3>已完成执行任务“WriteLinesToFile”的操作。
     3>已完成在项目“Common.csproj”中生成目标“CoreClean”的操作。
     3>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AssignProjectConfiguration”(目标“PrepareProjectReferences”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“AssignProjectConfiguration”任务。
       任务“AssignProjectConfiguration”
     4>已完成执行任务“WriteLinesToFile”的操作。
     4>已完成在项目“GameKernel.csproj”中生成目标“CoreClean”的操作。
     3>已完成执行任务“AssignProjectConfiguration”的操作。
     4>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AssignProjectConfiguration”(目标“PrepareProjectReferences”依赖于它):
     4>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“AssignProjectConfiguration”任务。
       任务“AssignProjectConfiguration”
     3>已完成在项目“Common.csproj”中生成目标“AssignProjectConfiguration”的操作。
     3>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_SplitProjectReferencesByFileExistence”(目标“PrepareProjectReferences”依赖于它):
       由于 false 条件，已跳过任务“ResolveNonMSBuildProjectOutput”；('$(BuildingInsideVisualStudio)'=='true' and '@(ProjectReferenceWithConfiguration)'!='')计算为(''=='true' and ''!='')。
     3>已完成在项目“Common.csproj”中生成目标“_SplitProjectReferencesByFileExistence”的操作。
     4>AssignProjectConfiguration:
         已为项目引用“..\..\Infrastructure\Common\Common.csproj”指定了“Debug|AnyCPU”配置。
         已为项目引用“..\..\Infrastructure\StoryScript\StoryScript.csproj”指定了“Debug|AnyCPU”配置。
     3>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_AddOutputPathToGlobalPropertiesToRemove”(目标“_GetProjectReferenceTargetFrameworkProperties”依赖于它):
     3>已完成在项目“Common.csproj”中生成目标“_AddOutputPathToGlobalPropertiesToRemove”的操作。
     4>已完成执行任务“AssignProjectConfiguration”的操作。
     3>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GetProjectReferenceTargetFrameworkProperties”(目标“PrepareProjectReferences”依赖于它):
     3>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“MSBuild”任务。
     4>已完成在项目“GameKernel.csproj”中生成目标“AssignProjectConfiguration”的操作。
     3>任务“MSBuild”
     4>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_SplitProjectReferencesByFileExistence”(目标“PrepareProjectReferences”依赖于它):
     4>由于 false 条件，已跳过任务“ResolveNonMSBuildProjectOutput”；('$(BuildingInsideVisualStudio)'=='true' and '@(ProjectReferenceWithConfiguration)'!='')计算为(''=='true' and '..\..\Infrastructure\Common\Common.csproj;..\..\Infrastructure\StoryScript\StoryScript.csproj'!='')。
     4>已完成在项目“GameKernel.csproj”中生成目标“_SplitProjectReferencesByFileExistence”的操作。
     3>已完成执行任务“MSBuild”的操作。
     4>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_AddOutputPathToGlobalPropertiesToRemove”(目标“_GetProjectReferenceTargetFrameworkProperties”依赖于它):
     4>已完成在项目“GameKernel.csproj”中生成目标“_AddOutputPathToGlobalPropertiesToRemove”的操作。
     3>_GetProjectReferenceTargetFrameworkProperties:
       由于 false 条件，已跳过任务“MSBuild”；('%(_MSBuildProjectReferenceExistent.SkipGetTargetFrameworkProperties)' != 'true' and '$(EnableDynamicPlatformResolution)' == 'true')计算为('' != 'true' and '' == 'true')。
     4>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GetProjectReferenceTargetFrameworkProperties”(目标“PrepareProjectReferences”依赖于它):
     4>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“MSBuild”任务。
       任务“MSBuild”
         全局属性:
           Configuration=Debug
           Platform=AnyCPU
         移除属性:
           TargetFramework
           RuntimeIdentifier
           SelfContained
     4>项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”(4)正在节点 1 上生成“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(2:2) (GetTargetFrameworks 个目标)。
   2:2>项目文件包含 ToolsVersion="12.0"。此工具集未知或缺失(在此情况下，您可以通过安装合适的 MSBuild 版本来解决此问题)，或者生成可能已被强制到特定的 ToolsVersion (出于策略原因)。将项目视为具有 ToolsVersion="Current"。有关详细信息，请参阅 http://go.microsoft.com/fwlink/?LinkId=293424。
   2:2>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetFrameworksWithPlatformForSingleTargetFramework”(目标“GetTargetFrameworks”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“CombineTargetFrameworkInfoProperties”任务。
       任务“CombineTargetFrameworkInfoProperties”
       已完成执行任务“CombineTargetFrameworkInfoProperties”的操作。
   2:2>已完成在项目“StoryScript.csproj”中生成目标“GetTargetFrameworksWithPlatformForSingleTargetFramework”的操作。
   2:2>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetFrameworks”(入口点):
       由于 false 条件，已跳过任务“Error”；('$(IsCrossTargetingBuild)' == 'true')计算为('' == 'true')。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“CombineXmlElements”任务。
       任务“CombineXmlElements”
       已完成执行任务“CombineXmlElements”的操作。
   2:2>已完成在项目“StoryScript.csproj”中生成目标“GetTargetFrameworks”的操作。
   2:2>已完成生成项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(GetTargetFrameworks 个目标)的操作。
     3>_GetProjectReferenceTargetFrameworkProperties:
       由于 false 条件，已跳过任务“GetReferenceNearestTargetFrameworkTask”；('@(_ProjectReferenceTargetFrameworkPossibilities)' != '' and '$(ReferringTargetFrameworkForProjectReferences)' != ''
                                                               And '$(GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter)' == 'true' and '%(_ProjectReferenceTargetFrameworkPossibilities.IsVcxOrNativeProj)' != 'true')计算为('' != '' and '.NETFramework,Version=v4.8' != ''
                                                               And 'true' == 'true' and '' != 'true')。
       由于 false 条件，已跳过任务“GetReferenceNearestTargetFrameworkTask”；('@(_ProjectReferenceTargetFrameworkPossibilities)' != '' and '$(ReferringTargetFrameworkForProjectReferences)' != ''
                                                               And '$(GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter)' != 'true' and '%(_ProjectReferenceTargetFrameworkPossibilities.IsVcxOrNativeProj)' != 'true')计算为('' != '' and '.NETFramework,Version=v4.8' != ''
                                                               And 'true' != 'true' and '' != 'true')。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“SetRidAgnosticValueForProjects”任务。
       任务“SetRidAgnosticValueForProjects”
       已完成执行任务“SetRidAgnosticValueForProjects”的操作。
     3>已完成在项目“Common.csproj”中生成目标“_GetProjectReferenceTargetFrameworkProperties”的操作。
       由于条件的计算结果为 false，已跳过目标“_GetProjectReferencePlatformProperties”；('$(EnableDynamicPlatformResolution)' == 'true'
                            and '$(BuildingInsideVisualStudio)' != 'true'
                            and '@(_MSBuildProjectReferenceExistent)' != '')的计算结果为('' == 'true'
                            and '' != 'true'
                            and '' != '')。
     3>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareProjectReferences”(目标“CleanReferencedProjects”依赖于它):
     3>已完成在项目“Common.csproj”中生成目标“PrepareProjectReferences”的操作。
     3>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CleanReferencedProjects”(目标“Clean”依赖于它):
       由于 false 条件，已跳过任务“MSBuild”；('$(BuildingInsideVisualStudio)' != 'true' and '$(BuildProjectReferences)' == 'true' and '@(_MSBuildProjectReferenceExistent)' != '')计算为('' != 'true' and 'true' == 'true' and '' != '')。
     3>已完成在项目“Common.csproj”中生成目标“CleanReferencedProjects”的操作。
     3>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CleanPublishFolder”(目标“Clean”依赖于它):
       由于 false 条件，已跳过任务“RemoveDir”；(Exists('$(ClickOncePublishDir)'))计算为(Exists('bin\Debug\app.publish\'))。
     3>已完成在项目“Common.csproj”中生成目标“CleanPublishFolder”的操作。
     3>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterClean”(目标“Clean”依赖于它):
     3>已完成在项目“Common.csproj”中生成目标“AfterClean”的操作。
       由于条件的计算结果为 false，已跳过目标“EntityClean”；('@(EntityDeploy)' != '')的计算结果为('' != '')。
       已跳过目标“_CheckForInvalidConfigurationAndPlatform”。以前的生成已成功。
       已跳过目标“_CheckForInvalidConfigurationAndPlatform”。以前的生成已成功。
     3>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Clean”(入口点):
     3>已完成在项目“Common.csproj”中生成目标“Clean”的操作。
     3>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.ServiceModel.targets”中的目标“CleanXsdCodeGen”(入口点):
       任务“Delete”
       已完成执行任务“Delete”的操作。
     3>已完成在项目“Common.csproj”中生成目标“CleanXsdCodeGen”的操作。
     3>已完成生成项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(Clean 个目标)的操作。
     4>项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”(4)正在节点 2 上生成“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(3:2) (GetTargetFrameworks 个目标)。
   3:2>项目文件包含 ToolsVersion="12.0"。此工具集未知或缺失(在此情况下，您可以通过安装合适的 MSBuild 版本来解决此问题)，或者生成可能已被强制到特定的 ToolsVersion (出于策略原因)。将项目视为具有 ToolsVersion="Current"。有关详细信息，请参阅 http://go.microsoft.com/fwlink/?LinkId=293424。
   3:2>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetFrameworksWithPlatformForSingleTargetFramework”(目标“GetTargetFrameworks”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“CombineTargetFrameworkInfoProperties”任务。
       任务“CombineTargetFrameworkInfoProperties”
       已完成执行任务“CombineTargetFrameworkInfoProperties”的操作。
   3:2>已完成在项目“Common.csproj”中生成目标“GetTargetFrameworksWithPlatformForSingleTargetFramework”的操作。
   3:2>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetFrameworks”(入口点):
       由于 false 条件，已跳过任务“Error”；('$(IsCrossTargetingBuild)' == 'true')计算为('' == 'true')。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“CombineXmlElements”任务。
       任务“CombineXmlElements”
       已完成执行任务“CombineXmlElements”的操作。
   3:2>已完成在项目“Common.csproj”中生成目标“GetTargetFrameworks”的操作。
   3:2>已完成生成项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(GetTargetFrameworks 个目标)的操作。
     4>已完成执行任务“MSBuild”的操作。
       由于 false 条件，已跳过任务“MSBuild”；('%(_MSBuildProjectReferenceExistent.SkipGetTargetFrameworkProperties)' != 'true' and '$(EnableDynamicPlatformResolution)' == 'true')计算为('' != 'true' and '' == 'true')。
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Build.Tasks.dll”中的“GetReferenceNearestTargetFrameworkTask”任务。
       任务“GetReferenceNearestTargetFrameworkTask”
         (in) CurrentProjectTargetFramework '.NETFramework,Version=v4.8'
         (in) CurrentProjectTargetPlatform 'Windows,Version=7.0'
         (in) FallbackTargetFrameworks ''
         (in) AnnotatedProjectReferences '..\..\Infrastructure\Common\Common.csproj;..\..\Infrastructure\StoryScript\StoryScript.csproj'
         (out) AssignedProjects '..\..\Infrastructure\Common\Common.csproj;..\..\Infrastructure\StoryScript\StoryScript.csproj'
       已完成执行任务“GetReferenceNearestTargetFrameworkTask”的操作。
       由于 false 条件，已跳过任务“GetReferenceNearestTargetFrameworkTask”；('@(_ProjectReferenceTargetFrameworkPossibilities)' != '' and '$(ReferringTargetFrameworkForProjectReferences)' != ''
                                                               And '$(GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter)' != 'true' and '%(_ProjectReferenceTargetFrameworkPossibilities.IsVcxOrNativeProj)' != 'true')计算为('..\..\Infrastructure\Common\Common.csproj;..\..\Infrastructure\StoryScript\StoryScript.csproj' != '' and '.NETFramework,Version=v4.8' != ''
                                                               And 'true' != 'true' and '' != 'true')。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“SetRidAgnosticValueForProjects”任务。
       任务“SetRidAgnosticValueForProjects”
       已完成执行任务“SetRidAgnosticValueForProjects”的操作。
     4>已完成在项目“GameKernel.csproj”中生成目标“_GetProjectReferenceTargetFrameworkProperties”的操作。
       由于条件的计算结果为 false，已跳过目标“_GetProjectReferencePlatformProperties”；('$(EnableDynamicPlatformResolution)' == 'true'
                            and '$(BuildingInsideVisualStudio)' != 'true'
                            and '@(_MSBuildProjectReferenceExistent)' != '')的计算结果为('' == 'true'
                            and '' != 'true'
                            and '..\..\Infrastructure\Common\Common.csproj;..\..\Infrastructure\StoryScript\StoryScript.csproj' != '')。
     4>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareProjectReferences”(目标“CleanReferencedProjects”依赖于它):
     4>已完成在项目“GameKernel.csproj”中生成目标“PrepareProjectReferences”的操作。
     4>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CleanReferencedProjects”(目标“Clean”依赖于它):
       任务“MSBuild”
         全局属性:
           Configuration=Debug
           Platform=AnyCPU
         移除项目“..\..\Infrastructure\Common\Common.csproj”的属性:
           TargetFramework
           RuntimeIdentifier
           SelfContained
         移除项目“..\..\Infrastructure\StoryScript\StoryScript.csproj”的属性:
           TargetFramework
           RuntimeIdentifier
           SelfContained
     4>项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”(4)正在节点 2 上生成“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(3:3) (Clean 个目标)。
   3:3>已跳过目标“Clean”。以前的生成已成功。
   3:3>已完成生成项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(Clean 个目标)的操作。
     4>项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”(4)正在节点 1 上生成“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(2:3) (Clean 个目标)。
   2:3>已跳过目标“Clean”。以前的生成已成功。
   2:3>已完成生成项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(Clean 个目标)的操作。
     4>已完成执行任务“MSBuild”的操作。
     4>已完成在项目“GameKernel.csproj”中生成目标“CleanReferencedProjects”的操作。
     4>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CleanPublishFolder”(目标“Clean”依赖于它):
       由于 false 条件，已跳过任务“RemoveDir”；(Exists('$(ClickOncePublishDir)'))计算为(Exists('bin\Debug\app.publish\'))。
     4>已完成在项目“GameKernel.csproj”中生成目标“CleanPublishFolder”的操作。
     4>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterClean”(目标“Clean”依赖于它):
     4>已完成在项目“GameKernel.csproj”中生成目标“AfterClean”的操作。
       由于条件的计算结果为 false，已跳过目标“EntityClean”；('@(EntityDeploy)' != '')的计算结果为('' != '')。
       已跳过目标“_CheckForInvalidConfigurationAndPlatform”。以前的生成已成功。
       已跳过目标“_CheckForInvalidConfigurationAndPlatform”。以前的生成已成功。
     4>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Clean”(入口点):
     4>已完成在项目“GameKernel.csproj”中生成目标“Clean”的操作。
     4>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.ServiceModel.targets”中的目标“CleanXsdCodeGen”(入口点):
       任务“Delete”
       已完成执行任务“Delete”的操作。
     4>已完成在项目“GameKernel.csproj”中生成目标“CleanXsdCodeGen”的操作。
     4>已完成生成项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”(Clean 个目标)的操作。
     1>已完成执行任务“MSBuild”的操作。
     1>已完成在项目“GameLibrary.sln”中生成目标“Clean”的操作。
     1>来自项目“D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”的文件“D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln.metaproj”中的目标“Rebuild”(入口点):
       任务“MSBuild”
         全局属性:
           BuildingSolutionFile=true
           CurrentSolutionConfigurationContents=<SolutionConfiguration>
           <ProjectConfiguration Project="{1C8280CD-EB93-4849-940E-A99EDDF811D6}" AbsolutePath="D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
           <ProjectConfiguration Project="{F5FC4012-CE76-4AD8-B04A-25B1A0BF7EEC}" AbsolutePath="D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
           <ProjectConfiguration Project="{F1D962E1-3B17-4597-B542-BCB657E75829}" AbsolutePath="D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
         </SolutionConfiguration>
           SolutionDir=D:\GitHub\GameDemo\GameLibrary\
           SolutionExt=.sln
           SolutionFileName=GameLibrary.sln
           SolutionName=GameLibrary
           SolutionPath=D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln
         项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的其他属性:
           Configuration=Debug
           Platform=AnyCPU
         项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的其他属性:
           Configuration=Debug
           Platform=AnyCPU
         项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的其他属性:
           Configuration=Debug
           Platform=AnyCPU
     1>项目“D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”(1)正在节点 1 上生成“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(2:4) (Rebuild 个目标)。
   2:4>项目文件包含 ToolsVersion="12.0"。此工具集未知或缺失(在此情况下，您可以通过安装合适的 MSBuild 版本来解决此问题)，或者生成可能已被强制到特定的 ToolsVersion (出于策略原因)。将项目视为具有 ToolsVersion="Current"。有关详细信息，请参阅 http://go.microsoft.com/fwlink/?LinkId=293424。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeRebuild”(目标“Rebuild”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“BeforeRebuild”的操作。
       已跳过目标“Clean”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“EntityDeploy”；('@(EntityDeploy)' != '')的计算结果为('' != '')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeBuild”(目标“Build”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“BeforeBuild”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BuildOnlySettings”(目标“CoreBuild”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“BuildOnlySettings”的操作。
     1>项目“D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”(1)正在节点 3 上生成“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”(4:2) (Rebuild 个目标)。
   4:2>项目文件包含 ToolsVersion="12.0"。此工具集未知或缺失(在此情况下，您可以通过安装合适的 MSBuild 版本来解决此问题)，或者生成可能已被强制到特定的 ToolsVersion (出于策略原因)。将项目视为具有 ToolsVersion="Current"。有关详细信息，请参阅 http://go.microsoft.com/fwlink/?LinkId=293424。
     1>项目“D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”(1)正在节点 2 上生成“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(3:4) (Rebuild 个目标)。
   3:4>项目文件包含 ToolsVersion="12.0"。此工具集未知或缺失(在此情况下，您可以通过安装合适的 MSBuild 版本来解决此问题)，或者生成可能已被强制到特定的 ToolsVersion (出于策略原因)。将项目视为具有 ToolsVersion="Current"。有关详细信息，请参阅 http://go.microsoft.com/fwlink/?LinkId=293424。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.NETFramework.CurrentVersion.targets”中的目标“GetFrameworkPaths”(目标“PrepareForBuild”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“GetFrameworkPaths”的操作。
       由于条件的计算结果为 false，已跳过目标“GetWinFXPath”；(('@(Page)' != '' or '@(ApplicationDefinition)' != '' or '@(Resource)' != '') and ('$(GetWinFXNativePath)' != '' or '$(GetWinFXWoWPath)' != '' ))的计算结果为(('' != '' or '' != '' or '' != '') and ('' != '' or '' != '' ))。
       已跳过目标“GetFrameworkPaths”。以前的生成已成功。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeRebuild”(目标“Rebuild”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“BeforeRebuild”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeRebuild”(目标“Rebuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“BeforeRebuild”的操作。
   4:2>已跳过目标“Clean”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“EntityDeploy”；('@(EntityDeploy)' != '')的计算结果为('' != '')。
   3:4>已跳过目标“Clean”。以前的生成已成功。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeBuild”(目标“Build”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“BeforeBuild”的操作。
   3:4>由于条件的计算结果为 false，已跳过目标“EntityDeploy”；('@(EntityDeploy)' != '')的计算结果为('' != '')。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BuildOnlySettings”(目标“CoreBuild”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“BuildOnlySettings”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeBuild”(目标“Build”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“BeforeBuild”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.NETFramework.CurrentVersion.targets”中的目标“GetFrameworkPaths”(目标“PrepareForBuild”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“GetFrameworkPaths”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetReferenceAssemblyPaths”(目标“PrepareForBuild”依赖于它):
   2:4>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“GetReferenceAssemblyPaths”任务。
       任务“GetReferenceAssemblyPaths”
   4:2>由于条件的计算结果为 false，已跳过目标“GetWinFXPath”；(('@(Page)' != '' or '@(ApplicationDefinition)' != '' or '@(Resource)' != '') and ('$(GetWinFXNativePath)' != '' or '$(GetWinFXWoWPath)' != '' ))的计算结果为(('' != '' or '' != '' or '' != '') and ('' != '' or '' != '' ))。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BuildOnlySettings”(目标“CoreBuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“BuildOnlySettings”的操作。
   4:2>已跳过目标“GetFrameworkPaths”。以前的生成已成功。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.NETFramework.CurrentVersion.targets”中的目标“GetFrameworkPaths”(目标“PrepareForBuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“GetFrameworkPaths”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetReferenceAssemblyPaths”(目标“PrepareForBuild”依赖于它):
   4:2>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“GetReferenceAssemblyPaths”任务。
   3:4>由于条件的计算结果为 false，已跳过目标“GetWinFXPath”；(('@(Page)' != '' or '@(ApplicationDefinition)' != '' or '@(Resource)' != '') and ('$(GetWinFXNativePath)' != '' or '$(GetWinFXWoWPath)' != '' ))的计算结果为(('' != '' or '' != '' or '' != '') and ('' != '' or '' != '' ))。
   4:2>任务“GetReferenceAssemblyPaths”
   3:4>已跳过目标“GetFrameworkPaths”。以前的生成已成功。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetReferenceAssemblyPaths”(目标“PrepareForBuild”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“GetReferenceAssemblyPaths”任务。
       任务“GetReferenceAssemblyPaths”
   2:4>已完成执行任务“GetReferenceAssemblyPaths”的操作。
   4:2>已完成执行任务“GetReferenceAssemblyPaths”的操作。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“GetReferenceAssemblyPaths”的操作。
       由于条件的计算结果为 false，已跳过目标“AssignLinkMetadata”；( '$(SynthesizeLinkMetadata)' == 'true' )的计算结果为( '' == 'true' )。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“GetReferenceAssemblyPaths”的操作。
   3:4>已完成执行任务“GetReferenceAssemblyPaths”的操作。
   4:2>由于条件的计算结果为 false，已跳过目标“AssignLinkMetadata”；( '$(SynthesizeLinkMetadata)' == 'true' )的计算结果为( '' == 'true' )。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareForBuild”(目标“CoreBuild”依赖于它):
   2:4>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“FindAppConfigFile”任务。
       任务“FindAppConfigFile”
   3:4>已完成在项目“Common.csproj”中生成目标“GetReferenceAssemblyPaths”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareForBuild”(目标“CoreBuild”依赖于它):
   4:2>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“FindAppConfigFile”任务。
   3:4>由于条件的计算结果为 false，已跳过目标“AssignLinkMetadata”；( '$(SynthesizeLinkMetadata)' == 'true' )的计算结果为( '' == 'true' )。
   4:2>任务“FindAppConfigFile”
   2:4>已完成执行任务“FindAppConfigFile”的操作。
       任务“MakeDir”
       已完成执行任务“MakeDir”的操作。
   4:2>已完成执行任务“FindAppConfigFile”的操作。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“PrepareForBuild”的操作。
       由于条件的计算结果为 false，已跳过目标“PreBuildEvent”；('$(PreBuildEvent)'!='')的计算结果为(''!='')。
   4:2>任务“MakeDir”
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeResolveReferences”(目标“ResolveReferences”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“BeforeResolveReferences”的操作。
       已跳过目标“AssignProjectConfiguration”。以前的生成已成功。
       已跳过目标“PrepareProjectReferences”。以前的生成已成功。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareForBuild”(目标“CoreBuild”依赖于它):
   3:4>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“FindAppConfigFile”任务。
   4:2>已完成执行任务“MakeDir”的操作。
   3:4>任务“FindAppConfigFile”
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveProjectReferences”(目标“ResolveReferences”依赖于它):
   2:4>由于 false 条件，已跳过任务“MSBuild”；('%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildProjectReferences)' != 'true') and '$(VisualStudioVersion)' != '10.0' and '@(_MSBuildProjectReferenceExistent)' != '')计算为('' == 'true' and '' != '' and ('' == 'true' or 'true' != 'true') and '17.0' != '10.0' and '' != '')。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“PrepareForBuild”的操作。
   2:4>ResolveProjectReferences:
       由于 false 条件，已跳过任务“MSBuild”；('%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and '$(BuildingInsideVisualStudio)' != 'true' and '$(BuildProjectReferences)' == 'true' and '@(_MSBuildProjectReferenceExistent)' != '')计算为('' == 'true' and '' != '' and '' != 'true' and 'true' == 'true' and '' != '')。
   4:2>由于条件的计算结果为 false，已跳过目标“PreBuildEvent”；('$(PreBuildEvent)'!='')的计算结果为(''!='')。
   2:4>ResolveProjectReferences:
       由于 false 条件，已跳过任务“MSBuild”；('%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and '$(BuildingProject)' == 'true' and '@(_MSBuildProjectReferenceExistent)' != '')计算为('' == 'true' and '' != '' and 'true' == 'true' and '' != '')。
   3:4>已完成执行任务“FindAppConfigFile”的操作。
   2:4>ResolveProjectReferences:
       由于 false 条件，已跳过任务“Warning”；('@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceNonexistent)' != '')计算为('' != '' and '' != '')。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeResolveReferences”(目标“ResolveReferences”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“BeforeResolveReferences”的操作。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“ResolveProjectReferences”的操作。
   3:4>任务“MakeDir”
   2:4>由于条件的计算结果为 false，已跳过目标“FindInvalidProjectReferences”；('$(FindInvalidProjectReferences)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“ResolveNativeReferences”；('@(NativeReference)'!='')的计算结果为(''!='')。
       已跳过目标“ResolveProjectReferences”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“FindInvalidProjectReferences”；('$(FindInvalidProjectReferences)' == 'true')的计算结果为('' == 'true')。
       已跳过目标“GetFrameworkPaths”。以前的生成已成功。
   4:2>已跳过目标“AssignProjectConfiguration”。以前的生成已成功。
   2:4>已跳过目标“GetReferenceAssemblyPaths”。以前的生成已成功。
       已跳过目标“PrepareForBuild”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“GetInstalledSDKLocations”；('@(SDKReference)' != '')的计算结果为('' != '')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveSDKReferences”(目标“ResolveAssemblyReferences”依赖于它):
       由于 false 条件，已跳过任务“ResolveSDKReference”；('@(SDKReference)'!='')计算为(''!='')。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“ResolveSDKReferences”的操作。
       已跳过目标“ResolveSDKReferences”。以前的生成已成功。
   4:2>已跳过目标“PrepareProjectReferences”。以前的生成已成功。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ExpandSDKReferences”(目标“ResolveAssemblyReferences”依赖于它):
   2:4>由于 false 条件，已跳过任务“GetSDKReferenceFiles”；('@(ResolvedSDKReference)'!='')计算为(''!='')。
   3:4>已完成执行任务“MakeDir”的操作。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“ExpandSDKReferences”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“PrepareForBuild”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveProjectReferences”(目标“ResolveReferences”依赖于它):
   4:2>由于 false 条件，已跳过任务“MSBuild”；('%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildProjectReferences)' != 'true') and '$(VisualStudioVersion)' != '10.0' and '@(_MSBuildProjectReferenceExistent)' != '')计算为('true' == 'true' and '..\..\Infrastructure\Common\Common.csproj;..\..\Infrastructure\StoryScript\StoryScript.csproj' != '' and ('' == 'true' or 'true' != 'true') and '17.0' != '10.0' and '..\..\Infrastructure\Common\Common.csproj;..\..\Infrastructure\StoryScript\StoryScript.csproj' != '')。
   2:4>由于条件的计算结果为 false，已跳过目标“ResolveNuGetPackageAssets”；('$(ResolveNuGetPackages)' == 'true' and exists('$(ProjectLockFile)'))的计算结果为('true' == 'true' and exists('obj\project.assets.json'))。
   3:4>由于条件的计算结果为 false，已跳过目标“PreBuildEvent”；('$(PreBuildEvent)'!='')的计算结果为(''!='')。
   4:2>任务“MSBuild”
         全局属性:
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeResolveReferences”(目标“ResolveReferences”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“BeforeResolveReferences”的操作。
   4:2>ResolveProjectReferences:
           Configuration=Debug
   3:4>已跳过目标“AssignProjectConfiguration”。以前的生成已成功。
   4:2>ResolveProjectReferences:
           Platform=AnyCPU
   3:4>已跳过目标“PrepareProjectReferences”。以前的生成已成功。
   4:2>ResolveProjectReferences:
         移除项目“..\..\Infrastructure\Common\Common.csproj”的属性:
           TargetFramework
           RuntimeIdentifier
           SelfContained
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveProjectReferences”(目标“ResolveReferences”依赖于它):
   3:4>由于 false 条件，已跳过任务“MSBuild”；('%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildProjectReferences)' != 'true') and '$(VisualStudioVersion)' != '10.0' and '@(_MSBuildProjectReferenceExistent)' != '')计算为('' == 'true' and '' != '' and ('' == 'true' or 'true' != 'true') and '17.0' != '10.0' and '' != '')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\Microsoft.NET.Build.Extensions.NETFramework.targets”中的目标“ImplicitlyExpandNETStandardFacades”(目标“ResolveAssemblyReferences”依赖于它):
   2:4>由于 false 条件，已跳过任务“GetDependsOnNETStandard”；('$(_RunGetDependsOnNETStandard)' == 'true')计算为('' == 'true')。
   4:2>ResolveProjectReferences:
         移除项目“..\..\Infrastructure\StoryScript\StoryScript.csproj”的属性:
   2:4>ImplicitlyExpandNETStandardFacades:
       由于 false 条件，已跳过任务“NETBuildExtensionsError”；('$(DependsOnNETStandard)' == 'true' AND '$(NETStandardInbox)' != 'true' AND '$(_UsingOldSDK)' == 'true')计算为('' == 'true' AND 'true' != 'true' AND '' == 'true')。
   3:4>ResolveProjectReferences:
       由于 false 条件，已跳过任务“MSBuild”；('%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and '$(BuildingInsideVisualStudio)' != 'true' and '$(BuildProjectReferences)' == 'true' and '@(_MSBuildProjectReferenceExistent)' != '')计算为('' == 'true' and '' != '' and '' != 'true' and 'true' == 'true' and '' != '')。
   2:4>ImplicitlyExpandNETStandardFacades:
       由于 false 条件，已跳过任务“AddFacadesToReferences”；('@(_NETStandardLibraryNETFrameworkLib)' != '')计算为('' != '')。
   4:2>ResolveProjectReferences:
           TargetFramework
   2:4>已完成在项目“StoryScript.csproj”中生成目标“ImplicitlyExpandNETStandardFacades”的操作。
   3:4>ResolveProjectReferences:
       由于 false 条件，已跳过任务“MSBuild”；('%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and '$(BuildingProject)' == 'true' and '@(_MSBuildProjectReferenceExistent)' != '')计算为('' == 'true' and '' != '' and 'true' == 'true' and '' != '')。
   2:4>已跳过目标“GetFrameworkPaths”。以前的生成已成功。
       已跳过目标“GetReferenceAssemblyPaths”。以前的生成已成功。
   4:2>ResolveProjectReferences:
           RuntimeIdentifier
           SelfContained
   3:4>ResolveProjectReferences:
       由于 false 条件，已跳过任务“Warning”；('@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceNonexistent)' != '')计算为('' != '' and '' != '')。
   3:4>已完成在项目“Common.csproj”中生成目标“ResolveProjectReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“FindInvalidProjectReferences”；('$(FindInvalidProjectReferences)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“ResolveNativeReferences”；('@(NativeReference)'!='')的计算结果为(''!='')。
       已跳过目标“ResolveProjectReferences”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“FindInvalidProjectReferences”；('$(FindInvalidProjectReferences)' == 'true')的计算结果为('' == 'true')。
       已跳过目标“GetFrameworkPaths”。以前的生成已成功。
       已跳过目标“GetReferenceAssemblyPaths”。以前的生成已成功。
       已跳过目标“PrepareForBuild”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“GetInstalledSDKLocations”；('@(SDKReference)' != '')的计算结果为('' != '')。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveSDKReferences”(目标“ResolveAssemblyReferences”依赖于它):
       由于 false 条件，已跳过任务“ResolveSDKReference”；('@(SDKReference)'!='')计算为(''!='')。
   3:4>已完成在项目“Common.csproj”中生成目标“ResolveSDKReferences”的操作。
       已跳过目标“ResolveSDKReferences”。以前的生成已成功。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ExpandSDKReferences”(目标“ResolveAssemblyReferences”依赖于它):
       由于 false 条件，已跳过任务“GetSDKReferenceFiles”；('@(ResolvedSDKReference)'!='')计算为(''!='')。
   3:4>已完成在项目“Common.csproj”中生成目标“ExpandSDKReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveNuGetPackageAssets”；('$(ResolveNuGetPackages)' == 'true' and exists('$(ProjectLockFile)'))的计算结果为('true' == 'true' and exists('obj\project.assets.json'))。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\Microsoft.NET.Build.Extensions.NETFramework.targets”中的目标“ImplicitlyExpandNETStandardFacades”(目标“ResolveAssemblyReferences”依赖于它):
       由于 false 条件，已跳过任务“GetDependsOnNETStandard”；('$(_RunGetDependsOnNETStandard)' == 'true')计算为('' == 'true')。
       由于 false 条件，已跳过任务“NETBuildExtensionsError”；('$(DependsOnNETStandard)' == 'true' AND '$(NETStandardInbox)' != 'true' AND '$(_UsingOldSDK)' == 'true')计算为('' == 'true' AND 'true' != 'true' AND '' == 'true')。
       由于 false 条件，已跳过任务“AddFacadesToReferences”；('@(_NETStandardLibraryNETFrameworkLib)' != '')计算为('' != '')。
   3:4>已完成在项目“Common.csproj”中生成目标“ImplicitlyExpandNETStandardFacades”的操作。
       已跳过目标“GetFrameworkPaths”。以前的生成已成功。
       已跳过目标“GetReferenceAssemblyPaths”。以前的生成已成功。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\Microsoft.NET.Build.Extensions.ConflictResolution.targets”中的目标“_HandlePackageFileConflicts”(目标“ResolveAssemblyReferences”依赖于它):
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\\tools\net472\Microsoft.NET.Build.Extensions.Tasks.dll”中的“ResolvePackageFileConflicts”任务。
       任务“ResolvePackageFileConflicts”
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\Microsoft.NET.Build.Extensions.ConflictResolution.targets”中的目标“_HandlePackageFileConflicts”(目标“ResolveAssemblyReferences”依赖于它):
   2:4>正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\\tools\net472\Microsoft.NET.Build.Extensions.Tasks.dll”中的“ResolvePackageFileConflicts”任务。
       任务“ResolvePackageFileConflicts”
       已完成执行任务“ResolvePackageFileConflicts”的操作。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“_HandlePackageFileConflicts”的操作。
   3:4>已完成执行任务“ResolvePackageFileConflicts”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_HandlePackageFileConflicts”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveAssemblyReferences”(目标“ResolveReferences”依赖于它):
   2:4>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ResolveAssemblyReference”任务。
       任务“ResolveAssemblyReference”
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveAssemblyReferences”(目标“ResolveReferences”依赖于它):
   3:4>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ResolveAssemblyReference”任务。
       任务“ResolveAssemblyReference”
   2:4>ResolveAssemblyReferences:
         TargetFrameworkMoniker:
             .NETFramework,Version=v4.8
         TargetFrameworkMonikerDisplayName:
             .NET Framework 4.8
         TargetedRuntimeVersion:
             v4.0.30319
         Assemblies:
             Dsl
                 HintPath =“..\..\ExternLibrary\Dsl.dll”
             LitJson
                 HintPath =“..\..\ExternLibrary\LitJson.dll”
             System
             UnityEngine
                 HintPath =“..\..\ExternLibrary\UnityEngine.dll”
             System.Core
         AssemblyFiles:
             C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\mscorlib.dll
         CandidateAssemblyFiles:
         TargetFrameworkDirectories:
             C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\,C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\
         InstalledAssemblyTables:
         IgnoreInstalledAssemblyTable:
             False
         SearchPaths:
             {CandidateAssemblyFiles}
             {HintPathFromItem}
             {TargetFrameworkDirectory}
             {AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8}
             {Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx}
             {AssemblyFolders}
             {GAC}
             {RawFileName}
             bin\Debug\
         AllowedAssemblyExtensions:
             .winmd
             .dll
             .exe
         AllowedRelatedFileExtensions:
             .pdb
             .xml
             .pri
             .dll.config
             .exe.config
         AppConfigFile:
             
         AutoUnify:
             True
         CopyLocalDependenciesWhenParentReferenceInGac:
             True
         FindDependencies:
             True
         TargetProcessorArchitecture:
             msil
         StateFile:
             obj\Debug\StoryScript.csproj.AssemblyReference.cache
         InstalledAssemblySubsetTables:
         IgnoreInstalledAssemblySubsetTable:
             False
         TargetFrameworkSubsets:
         FullTargetFrameworkSubsetNames:
             Full
         ProfileName:
             
         FullFrameworkFolders:
             C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\
         LatestTargetFrameworkDirectories:
         ProfileTablesLocation:
   3:4>ResolveAssemblyReferences:
         TargetFrameworkMoniker:
             .NETFramework,Version=v4.8
         TargetFrameworkMonikerDisplayName:
             .NET Framework 4.8
         TargetedRuntimeVersion:
             v4.0.30319
         Assemblies:
             System
             UnityEngine
                 HintPath =“..\..\ExternLibrary\UnityEngine.dll”
             System.Core
         AssemblyFiles:
             C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\mscorlib.dll
         CandidateAssemblyFiles:
         TargetFrameworkDirectories:
             C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\,C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\
         InstalledAssemblyTables:
         IgnoreInstalledAssemblyTable:
             False
         SearchPaths:
             {CandidateAssemblyFiles}
             {HintPathFromItem}
             {TargetFrameworkDirectory}
             {AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8}
             {Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx}
             {AssemblyFolders}
             {GAC}
             {RawFileName}
             bin\Debug\
         AllowedAssemblyExtensions:
             .winmd
             .dll
             .exe
         AllowedRelatedFileExtensions:
             .pdb
             .xml
             .pri
             .dll.config
             .exe.config
         AppConfigFile:
             
         AutoUnify:
             True
         CopyLocalDependenciesWhenParentReferenceInGac:
             True
         FindDependencies:
             True
         TargetProcessorArchitecture:
             msil
         StateFile:
             obj\Debug\Common.csproj.AssemblyReference.cache
         InstalledAssemblySubsetTables:
         IgnoreInstalledAssemblySubsetTable:
             False
         TargetFrameworkSubsets:
         FullTargetFrameworkSubsetNames:
             Full
         ProfileName:
             
         FullFrameworkFolders:
             C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\
         LatestTargetFrameworkDirectories:
         ProfileTablesLocation:
         统一主引用“mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             使用此版本而不是“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll”中的原始版本“2.0.0.0”，因为存在此框架文件的更新版本。
             解析的文件路径为“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\mscorlib.dll”。
             在搜索路径位置“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\mscorlib.dll”找到引用。
             此引用不是“CopyLocal”，因为它是系统必备文件。
         统一主引用“System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             使用此版本而不是“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll”中的原始版本“2.0.0.0”，因为存在此框架文件的更新版本。
             解析的文件路径为“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.dll”。
             在搜索路径位置“{TargetFrameworkDirectory}”找到引用。
                 用于 SearchPath“{TargetFrameworkDirectory}”。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.winmd”，但它不存在。
             此引用不是“CopyLocal”，因为它是系统必备文件。
         主引用“UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
             此引用的 ImageRuntimeVersion 是“v2.0.50727”。
         统一主引用“System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             使用此版本而不是“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll”中的原始版本“3.5.0.0”，因为存在此框架文件的更新版本。
             解析的文件路径为“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.Core.dll”。
             在搜索路径位置“{TargetFrameworkDirectory}”找到引用。
                 用于 SearchPath“{TargetFrameworkDirectory}”。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.Core.winmd”，但它不存在。
             此引用不是“CopyLocal”，因为它是系统必备文件。
   2:4>ResolveAssemblyReferences:
         统一主引用“mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
   3:4>已完成执行任务“ResolveAssemblyReference”的操作。
   2:4>ResolveAssemblyReferences:
             使用此版本而不是“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll”中的原始版本“2.0.0.0”，因为存在此框架文件的更新版本。
             使用此版本而不是“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll”中的原始版本“2.0.0.0”，因为存在此框架文件的更新版本。
             解析的文件路径为“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\mscorlib.dll”。
             在搜索路径位置“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\mscorlib.dll”找到引用。
             此引用不是“CopyLocal”，因为它是系统必备文件。
         主引用“Dsl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
             找到相关文件“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.pdb”。
         主引用“LitJson, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
             此引用的 ImageRuntimeVersion 是“v2.0.50727”。
         统一主引用“System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             使用此版本而不是“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll”中的原始版本“2.0.0.0”，因为存在此框架文件的更新版本。
             使用此版本而不是“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll”中的原始版本“2.0.0.0”，因为存在此框架文件的更新版本。
             解析的文件路径为“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.dll”。
             在搜索路径位置“{TargetFrameworkDirectory}”找到引用。
                 用于 SearchPath“{TargetFrameworkDirectory}”。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.winmd”，但它不存在。
             此引用不是“CopyLocal”，因为它是系统必备文件。
         主引用“UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
             此引用的 ImageRuntimeVersion 是“v2.0.50727”。
         统一主引用“System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             使用此版本而不是“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll”中的原始版本“3.5.0.0”，因为存在此框架文件的更新版本。
             解析的文件路径为“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.Core.dll”。
             在搜索路径位置“{TargetFrameworkDirectory}”找到引用。
                 用于 SearchPath“{TargetFrameworkDirectory}”。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.Core.winmd”，但它不存在。
             此引用不是“CopyLocal”，因为它是系统必备文件。
   3:4>已完成在项目“Common.csproj”中生成目标“ResolveAssemblyReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateBindingRedirects”；('$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true')的计算结果为('true' == 'true' and '' == 'true')。
   2:4>已完成执行任务“ResolveAssemblyReference”的操作。
   3:4>已跳过目标“ResolveAssemblyReferences”。以前的生成已成功。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“ResolveAssemblyReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateBindingRedirects”；('$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true')的计算结果为('true' == 'true' and '' == 'true')。
       已跳过目标“ResolveAssemblyReferences”。以前的生成已成功。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\Microsoft.NET.Build.Extensions.NETFramework.targets”中的目标“_RemoveZipFileSuggestedRedirect”(目标“GenerateBindingRedirects”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“_RemoveZipFileSuggestedRedirect”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateBindingRedirectsUpdateAppConfig”；('$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true' and Exists('$(_GenerateBindingRedirectsIntermediateAppConfig)'))的计算结果为('true' == 'true' and '' == 'true' and Exists('obj\Debug\StoryScript.dll.config'))。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\Microsoft.NET.Build.Extensions.NETFramework.targets”中的目标“_RemoveZipFileSuggestedRedirect”(目标“GenerateBindingRedirects”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_RemoveZipFileSuggestedRedirect”的操作。
   2:4>由于条件的计算结果为 false，已跳过目标“ResolveComReferences”；('@(COMReference)'!='' or '@(COMFileReference)'!='')的计算结果为(''!='' or ''!='')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterResolveReferences”(目标“ResolveReferences”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“AfterResolveReferences”的操作。
       已跳过目标“GetReferenceAssemblyPaths”。以前的生成已成功。
   3:4>由于条件的计算结果为 false，已跳过目标“GenerateBindingRedirectsUpdateAppConfig”；('$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true' and Exists('$(_GenerateBindingRedirectsIntermediateAppConfig)'))的计算结果为('true' == 'true' and '' == 'true' and Exists('obj\Debug\Common.dll.config'))。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.NETFramework.CurrentVersion.targets”中的目标“ImplicitlyExpandDesignTimeFacades”(目标“ResolveReferences”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“ImplicitlyExpandDesignTimeFacades”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveTestReferences”；('@(Shadow)'!='')的计算结果为(''!='')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveReferences”(目标“CoreBuild”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“ResolveReferences”的操作。
   3:4>由于条件的计算结果为 false，已跳过目标“ResolveComReferences”；('@(COMReference)'!='' or '@(COMFileReference)'!='')的计算结果为(''!='' or ''!='')。
   2:4>由于条件的计算结果为 false，已跳过目标“ResolveNuGetPackageAssets”；('$(ResolveNuGetPackages)' == 'true' and exists('$(ProjectLockFile)'))的计算结果为('true' == 'true' and exists('obj\project.assets.json'))。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets”中的目标“ValidationExtension”(目标“PrepareResources”依赖于它):
       由于 false 条件，已跳过任务“WorkflowBuildMessageTask”；('$(SkipWorkflowValidation)'!='' and '$(SkipWorkflowValidation)'!='true' and '$(SkipWorkflowValidation)'!='false')计算为(''!='' and ''!='true' and ''!='false')。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“ValidationExtension”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets”中的目标“ExpressionBuildExtension”(目标“PrepareResources”依赖于它):
       由于 false 条件，已跳过任务“WorkflowBuildMessageTask”；('$(DisableWorkflowCompiledExpressions)'!='' and '$(DisableWorkflowCompiledExpressions)'!='true' and '$(DisableWorkflowCompiledExpressions)'!='false')计算为(''!='' and ''!='true' and ''!='false')。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterResolveReferences”(目标“ResolveReferences”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“AfterResolveReferences”的操作。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“ExpressionBuildExtension”的操作。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompilePass1”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileReadGeneratedFileList”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileAddFilesGenerated”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompilePass2”；('$(XamlRequiresCompilationPass2)' == 'true' )的计算结果为('false' == 'true' )。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileReadPass2Flag”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
   3:4>已跳过目标“GetReferenceAssemblyPaths”。以前的生成已成功。
   2:4>由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileAddExtensionFilesGenerated”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“AddDeferredValidationErrorsFileToFileWrites”；(Exists('$(DeferredValidationErrorsFileName)'))的计算结果为(Exists('obj\Debug\\AC2C1ABA-CCF6-44D4-8127-588FD4D0A860-DeferredValidationErrors.xml'))。
       由于条件的计算结果为 false，已跳过目标“ReportValidationBuildExtensionErrors”；('$(SkipWorkflowValidation)' != 'true' and ('@(XamlPage)' != '' or '@(XamlAppDef)' != ''))的计算结果为('' != 'true' and ('' != '' or '' != ''))。
       由于条件的计算结果为 false，已跳过目标“MarkupCompilePass1”；('@(Page)' != '' or '@(ApplicationDefinition)' != '' )的计算结果为('' != '' or '' != '' )。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets”中的目标“AfterMarkupCompilePass1”(目标“PrepareResources”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“AfterMarkupCompilePass1”的操作。
       由于条件的计算结果为 false，已跳过目标“MarkupCompilePass2ForMainAssembly”；('$(_RequireMCPass2ForMainAssembly)' == 'true' )的计算结果为('false' == 'true' )。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.NETFramework.CurrentVersion.targets”中的目标“ImplicitlyExpandDesignTimeFacades”(目标“ResolveReferences”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“ImplicitlyExpandDesignTimeFacades”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets”中的目标“FileClassification”(目标“PrepareResources”依赖于它):
   2:4>由于 false 条件，已跳过任务“FileClassifier”；('@(GeneratedBaml)' != '' or '@(Resource)' != '' or '@(Font)' != '')计算为('' != '' or '' != '' or '' != '')。
       由于 false 条件，已跳过任务“Message”；('$(MSBuildTargetsVerbose)'=='true')计算为(''=='true')。
       由于 false 条件，已跳过任务“Message”；('$(MSBuildTargetsVerbose)'=='true')计算为(''=='true')。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“FileClassification”的操作。
       由于条件的计算结果为 false，已跳过目标“MainResourcesGeneration”；('@(MainEmbeddedFiles)' != '')的计算结果为('' != '')。
       由于条件的计算结果为 false，已跳过目标“AssignWinFXEmbeddedResource”；('@(WinFXEmbeddedResource)' != '')的计算结果为('' != '')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“CopyAdditionalFiles”(目标“AssignTargetPaths”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“CopyAdditionalFiles”的操作。
   3:4>由于条件的计算结果为 false，已跳过目标“ResolveTestReferences”；('@(Shadow)'!='')的计算结果为(''!='')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AssignTargetPaths”(目标“PrepareResourceNames”依赖于它):
   2:4>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“AssignTargetPath”任务。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       任务“AssignTargetPath”
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveReferences”(目标“CoreBuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“ResolveReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveNuGetPackageAssets”；('$(ResolveNuGetPackages)' == 'true' and exists('$(ProjectLockFile)'))的计算结果为('true' == 'true' and exists('obj\project.assets.json'))。
   2:4>已完成执行任务“AssignTargetPath”的操作。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       任务“AssignTargetPath”
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets”中的目标“ValidationExtension”(目标“PrepareResources”依赖于它):
   3:4>由于 false 条件，已跳过任务“WorkflowBuildMessageTask”；('$(SkipWorkflowValidation)'!='' and '$(SkipWorkflowValidation)'!='true' and '$(SkipWorkflowValidation)'!='false')计算为(''!='' and ''!='true' and ''!='false')。
   2:4>已完成执行任务“AssignTargetPath”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“ValidationExtension”的操作。
   2:4>AssignTargetPaths:
       由于 false 条件，已跳过任务“AssignTargetPath”；('@(_DeploymentBaseManifestWithTargetPath)'=='' and '%(None.Extension)'=='.manifest')计算为(''=='' and ''=='.manifest')。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“AssignTargetPaths”的操作。
       已跳过目标“AssignTargetPaths”。以前的生成已成功。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“SplitResourcesByCulture”(目标“PrepareResourceNames”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ResxWithNoCulture)'!='')计算为(''!='')。
       由于 false 条件，已跳过任务“Warning”；('@(ResxWithCulture)'!='')计算为(''!='')。
       由于 false 条件，已跳过任务“Warning”；('@(NonResxWithCulture)'!='')计算为(''!='')。
       由于 false 条件，已跳过任务“Warning”；('@(NonResxWithNoCulture)'!='')计算为(''!='')。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets”中的目标“ExpressionBuildExtension”(目标“PrepareResources”依赖于它):
   3:4>由于 false 条件，已跳过任务“WorkflowBuildMessageTask”；('$(DisableWorkflowCompiledExpressions)'!='' and '$(DisableWorkflowCompiledExpressions)'!='true' and '$(DisableWorkflowCompiledExpressions)'!='false')计算为(''!='' and ''!='true' and ''!='false')。
   3:4>已完成在项目“Common.csproj”中生成目标“ExpressionBuildExtension”的操作。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompilePass1”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileReadGeneratedFileList”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileAddFilesGenerated”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompilePass2”；('$(XamlRequiresCompilationPass2)' == 'true' )的计算结果为('false' == 'true' )。
   2:4>SplitResourcesByCulture:
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“AssignCulture”任务。
       任务“AssignCulture”
   3:4>由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileReadPass2Flag”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileAddExtensionFilesGenerated”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“AddDeferredValidationErrorsFileToFileWrites”；(Exists('$(DeferredValidationErrorsFileName)'))的计算结果为(Exists('obj\Debug\\AC2C1ABA-CCF6-44D4-8127-588FD4D0A860-DeferredValidationErrors.xml'))。
   2:4>已完成执行任务“AssignCulture”的操作。
   3:4>由于条件的计算结果为 false，已跳过目标“ReportValidationBuildExtensionErrors”；('$(SkipWorkflowValidation)' != 'true' and ('@(XamlPage)' != '' or '@(XamlAppDef)' != ''))的计算结果为('' != 'true' and ('' != '' or '' != ''))。
       由于条件的计算结果为 false，已跳过目标“MarkupCompilePass1”；('@(Page)' != '' or '@(ApplicationDefinition)' != '' )的计算结果为('' != '' or '' != '' )。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“SplitResourcesByCulture”的操作。
       由于条件的计算结果为 false，已跳过目标“CreateManifestResourceNames”；('@(EmbeddedResource)' != '')的计算结果为('' != '')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CreateCustomManifestResourceNames”(目标“PrepareResourceNames”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“CreateCustomManifestResourceNames”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareResourceNames”(目标“PrepareResources”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“PrepareResourceNames”的操作。
       已跳过目标“ResolveAssemblyReferences”。以前的生成已成功。
       已跳过目标“SplitResourcesByCulture”。以前的生成已成功。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeResGen”(目标“ResGen”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“BeforeResGen”的操作。
       已跳过目标“ResolveReferences”。以前的生成已成功。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets”中的目标“AfterMarkupCompilePass1”(目标“PrepareResources”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“AfterMarkupCompilePass1”的操作。
       由于条件的计算结果为 false，已跳过目标“MarkupCompilePass2ForMainAssembly”；('$(_RequireMCPass2ForMainAssembly)' == 'true' )的计算结果为('false' == 'true' )。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets”中的目标“FileClassification”(目标“PrepareResources”依赖于它):
       由于 false 条件，已跳过任务“FileClassifier”；('@(GeneratedBaml)' != '' or '@(Resource)' != '' or '@(Font)' != '')计算为('' != '' or '' != '' or '' != '')。
       由于 false 条件，已跳过任务“Message”；('$(MSBuildTargetsVerbose)'=='true')计算为(''=='true')。
       由于 false 条件，已跳过任务“Message”；('$(MSBuildTargetsVerbose)'=='true')计算为(''=='true')。
   3:4>已完成在项目“Common.csproj”中生成目标“FileClassification”的操作。
       由于条件的计算结果为 false，已跳过目标“MainResourcesGeneration”；('@(MainEmbeddedFiles)' != '')的计算结果为('' != '')。
       由于条件的计算结果为 false，已跳过目标“AssignWinFXEmbeddedResource”；('@(WinFXEmbeddedResource)' != '')的计算结果为('' != '')。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“CopyAdditionalFiles”(目标“AssignTargetPaths”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“CopyAdditionalFiles”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“FindReferenceAssembliesForReferences”(目标“CoreResGen”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“FindReferenceAssembliesForReferences”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AssignTargetPaths”(目标“PrepareResourceNames”依赖于它):
   3:4>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“AssignTargetPath”任务。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       任务“AssignTargetPath”
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CoreResGen”(目标“ResGen”依赖于它):
   2:4>由于 false 条件，已跳过任务“GenerateResource”；('%(EmbeddedResource.Type)' == 'Resx' and '%(EmbeddedResource.GenerateResource)' != 'false' and '$(GenerateResourceMSBuildRuntime)' != 'CLR2')计算为('' == 'Resx' and '' != 'false' and 'CurrentRuntime' != 'CLR2')。
   3:4>已完成执行任务“AssignTargetPath”的操作。
   2:4>CoreResGen:
       由于 false 条件，已跳过任务“GenerateResource”；('%(EmbeddedResource.Type)' == 'Resx' and '%(EmbeddedResource.GenerateResource)' != 'false' and '$(GenerateResourceMSBuildRuntime)' == 'CLR2')计算为('' == 'Resx' and '' != 'false' and 'CurrentRuntime' == 'CLR2')。
   3:4>任务“AssignTargetPath”
   2:4>已完成在项目“StoryScript.csproj”中生成目标“CoreResGen”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterResGen”(目标“ResGen”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“AfterResGen”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResGen”(目标“PrepareResources”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“ResGen”的操作。
       由于条件的计算结果为 false，已跳过目标“CompileLicxFiles”；('@(_LicxFile)'!='')的计算结果为(''!='')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareResources”(目标“CoreBuild”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“PrepareResources”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveKeySource”；($(SignManifests) == 'true' or $(SignAssembly) == 'true')的计算结果为( == 'true' or  == 'true')。
       已跳过目标“ResolveReferences”。以前的生成已成功。
   3:4>已完成执行任务“AssignTargetPath”的操作。
   2:4>由于条件的计算结果为 false，已跳过目标“ResolveKeySource”；($(SignManifests) == 'true' or $(SignAssembly) == 'true')的计算结果为( == 'true' or  == 'true')。
       由于条件的计算结果为 false，已跳过目标“ResolveComReferences”；('@(COMReference)'!='' or '@(COMFileReference)'!='')的计算结果为(''!='' or ''!='')。
       由于条件的计算结果为 false，已跳过目标“ResolveNativeReferences”；('@(NativeReference)'!='')的计算结果为(''!='')。
       由于条件的计算结果为 false，已跳过目标“_SetExternalWin32ManifestProperties”；('$(GenerateClickOnceManifests)'=='true' or '@(NativeReference)'!='' or '@(ResolvedIsolatedComModules)'!='')的计算结果为(''=='true' or ''!='' or ''!='')。
   3:4>AssignTargetPaths:
       由于 false 条件，已跳过任务“AssignTargetPath”；('@(_DeploymentBaseManifestWithTargetPath)'=='' and '%(None.Extension)'=='.manifest')计算为(''=='' and ''=='.manifest')。
   3:4>已完成在项目“Common.csproj”中生成目标“AssignTargetPaths”的操作。
       已跳过目标“AssignTargetPaths”。以前的生成已成功。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“SplitResourcesByCulture”(目标“PrepareResourceNames”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ResxWithNoCulture)'!='')计算为(''!='')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_SetEmbeddedWin32ManifestProperties”(目标“SetWin32ManifestProperties”依赖于它):
   2:4>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“GetFrameworkPath”任务。
       任务“GetFrameworkPath”
   3:4>SplitResourcesByCulture:
       由于 false 条件，已跳过任务“Warning”；('@(ResxWithCulture)'!='')计算为(''!='')。
       由于 false 条件，已跳过任务“Warning”；('@(NonResxWithCulture)'!='')计算为(''!='')。
       由于 false 条件，已跳过任务“Warning”；('@(NonResxWithNoCulture)'!='')计算为(''!='')。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“AssignCulture”任务。
       任务“AssignCulture”
       已完成执行任务“AssignCulture”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“SplitResourcesByCulture”的操作。
       由于条件的计算结果为 false，已跳过目标“CreateManifestResourceNames”；('@(EmbeddedResource)' != '')的计算结果为('' != '')。
   2:4>已完成执行任务“GetFrameworkPath”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CreateCustomManifestResourceNames”(目标“PrepareResourceNames”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“CreateCustomManifestResourceNames”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareResourceNames”(目标“PrepareResources”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“PrepareResourceNames”的操作。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“_SetEmbeddedWin32ManifestProperties”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“SetWin32ManifestProperties”(目标“Compile”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“SetWin32ManifestProperties”的操作。
       已跳过目标“FindReferenceAssembliesForReferences”。以前的生成已成功。
   3:4>已跳过目标“ResolveAssemblyReferences”。以前的生成已成功。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GenerateCompileInputs”(目标“Compile”依赖于它):
   2:4>由于 false 条件，已跳过任务“Warning”；('@(ManifestResourceWithNoCulture)'!='' and '%(ManifestResourceWithNoCulture.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
   3:4>已跳过目标“SplitResourcesByCulture”。以前的生成已成功。
   2:4>_GenerateCompileInputs:
       由于 false 条件，已跳过任务“Warning”；('@(ManifestNonResxWithNoCultureOnDisk)'!='' and '%(ManifestNonResxWithNoCultureOnDisk.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“_GenerateCompileInputs”的操作。
       已跳过目标“PrepareForBuild”。以前的生成已成功。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeResGen”(目标“ResGen”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“BeforeResGen”的操作。
       已跳过目标“ResolveReferences”。以前的生成已成功。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“GenerateMSBuildEditorConfigFileShouldRun”(目标“GenerateMSBuildEditorConfigFile”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“GenerateMSBuildEditorConfigFileShouldRun”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“FindReferenceAssembliesForReferences”(目标“CoreResGen”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“FindReferenceAssembliesForReferences”的操作。
   2:4>由于条件的计算结果为 false，已跳过目标“GenerateMSBuildEditorConfigFileCore”；('$(_GeneratedEditorConfigShouldRun)' == 'true')的计算结果为('' == 'true')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“GenerateMSBuildEditorConfigFile”(目标“BeforeCompile”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“GenerateMSBuildEditorConfigFile”的操作。
       已跳过目标“PrepareForBuild”。以前的生成已成功。
       已跳过目标“GetReferenceAssemblyPaths”。以前的生成已成功。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CoreResGen”(目标“ResGen”依赖于它):
   3:4>由于 false 条件，已跳过任务“GenerateResource”；('%(EmbeddedResource.Type)' == 'Resx' and '%(EmbeddedResource.GenerateResource)' != 'false' and '$(GenerateResourceMSBuildRuntime)' != 'CLR2')计算为('' == 'Resx' and '' != 'false' and 'CurrentRuntime' != 'CLR2')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.CSharp.CurrentVersion.targets”中的目标“_SetTargetFrameworkMonikerAttribute”(目标“GenerateTargetFrameworkMonikerAttribute”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“_SetTargetFrameworkMonikerAttribute”的操作。
   3:4>CoreResGen:
       由于 false 条件，已跳过任务“GenerateResource”；('%(EmbeddedResource.Type)' == 'Resx' and '%(EmbeddedResource.GenerateResource)' != 'false' and '$(GenerateResourceMSBuildRuntime)' == 'CLR2')计算为('' == 'Resx' and '' != 'false' and 'CurrentRuntime' == 'CLR2')。
   3:4>已完成在项目“Common.csproj”中生成目标“CoreResGen”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GenerateTargetFrameworkMonikerAttribute”(目标“BeforeCompile”依赖于它):
   2:4>正在跳过目标“GenerateTargetFrameworkMonikerAttribute”，因为所有输出文件相对于输入文件而言都是最新的。
       输入文件:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.targets
       输出文件:obj\Debug\.NETFramework,Version=v4.8.AssemblyAttributes.cs
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterResGen”(目标“ResGen”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“AfterResGen”的操作。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“GenerateTargetFrameworkMonikerAttribute”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateAdditionalSources”；('@(AssemblyAttributes)' != '' and '$(GenerateAdditionalSources)' == 'true')的计算结果为('' != '' and '' == 'true')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeCompile”(目标“Compile”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“BeforeCompile”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResGen”(目标“PrepareResources”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“ResGen”的操作。
   2:4>由于条件的计算结果为 false，已跳过目标“_TimeStampBeforeCompile”；('$(RunPostBuildEvent)'=='OnOutputUpdated' or ('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library'))的计算结果为(''=='OnOutputUpdated' or (''=='true' and 'Library'=='library'))。
       已跳过目标“ResolveAssemblyReferences”。以前的生成已成功。
   3:4>由于条件的计算结果为 false，已跳过目标“CompileLicxFiles”；('@(_LicxFile)'!='')的计算结果为(''!='')。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareResources”(目标“CoreBuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“PrepareResources”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveKeySource”；($(SignManifests) == 'true' or $(SignAssembly) == 'true')的计算结果为( == 'true' or  == 'true')。
       已跳过目标“ResolveReferences”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“ResolveKeySource”；($(SignManifests) == 'true' or $(SignAssembly) == 'true')的计算结果为( == 'true' or  == 'true')。
       由于条件的计算结果为 false，已跳过目标“ResolveComReferences”；('@(COMReference)'!='' or '@(COMFileReference)'!='')的计算结果为(''!='' or ''!='')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GenerateCompileDependencyCache”(目标“Compile”依赖于它):
   2:4>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Hash”任务。
       任务“Hash”
   3:4>由于条件的计算结果为 false，已跳过目标“ResolveNativeReferences”；('@(NativeReference)'!='')的计算结果为(''!='')。
       由于条件的计算结果为 false，已跳过目标“_SetExternalWin32ManifestProperties”；('$(GenerateClickOnceManifests)'=='true' or '@(NativeReference)'!='' or '@(ResolvedIsolatedComModules)'!='')的计算结果为(''=='true' or ''!='' or ''!='')。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_SetEmbeddedWin32ManifestProperties”(目标“SetWin32ManifestProperties”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“GetFrameworkPath”任务。
       任务“GetFrameworkPath”
       已完成执行任务“GetFrameworkPath”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_SetEmbeddedWin32ManifestProperties”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“SetWin32ManifestProperties”(目标“Compile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“SetWin32ManifestProperties”的操作。
       已跳过目标“FindReferenceAssembliesForReferences”。以前的生成已成功。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GenerateCompileInputs”(目标“Compile”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ManifestResourceWithNoCulture)'!='' and '%(ManifestResourceWithNoCulture.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
   2:4>已完成执行任务“Hash”的操作。
       任务“WriteLinesToFile”
   3:4>_GenerateCompileInputs:
       由于 false 条件，已跳过任务“Warning”；('@(ManifestNonResxWithNoCultureOnDisk)'!='' and '%(ManifestNonResxWithNoCultureOnDisk.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
   3:4>已完成在项目“Common.csproj”中生成目标“_GenerateCompileInputs”的操作。
       已跳过目标“PrepareForBuild”。以前的生成已成功。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“GenerateMSBuildEditorConfigFileShouldRun”(目标“GenerateMSBuildEditorConfigFile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“GenerateMSBuildEditorConfigFileShouldRun”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateMSBuildEditorConfigFileCore”；('$(_GeneratedEditorConfigShouldRun)' == 'true')的计算结果为('' == 'true')。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“GenerateMSBuildEditorConfigFile”(目标“BeforeCompile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“GenerateMSBuildEditorConfigFile”的操作。
       已跳过目标“PrepareForBuild”。以前的生成已成功。
       已跳过目标“GetReferenceAssemblyPaths”。以前的生成已成功。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.CSharp.CurrentVersion.targets”中的目标“_SetTargetFrameworkMonikerAttribute”(目标“GenerateTargetFrameworkMonikerAttribute”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_SetTargetFrameworkMonikerAttribute”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GenerateTargetFrameworkMonikerAttribute”(目标“BeforeCompile”依赖于它):
       正在跳过目标“GenerateTargetFrameworkMonikerAttribute”，因为所有输出文件相对于输入文件而言都是最新的。
       输入文件:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.targets
       输出文件:obj\Debug\.NETFramework,Version=v4.8.AssemblyAttributes.cs
   3:4>已完成在项目“Common.csproj”中生成目标“GenerateTargetFrameworkMonikerAttribute”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateAdditionalSources”；('@(AssemblyAttributes)' != '' and '$(GenerateAdditionalSources)' == 'true')的计算结果为('' != '' and '' == 'true')。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeCompile”(目标“Compile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“BeforeCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“_TimeStampBeforeCompile”；('$(RunPostBuildEvent)'=='OnOutputUpdated' or ('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library'))的计算结果为(''=='OnOutputUpdated' or (''=='true' and 'Library'=='library'))。
   2:4>已完成执行任务“WriteLinesToFile”的操作。
   3:4>已跳过目标“ResolveAssemblyReferences”。以前的生成已成功。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GenerateCompileDependencyCache”(目标“Compile”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Hash”任务。
       任务“Hash”
       已完成执行任务“Hash”的操作。
       任务“WriteLinesToFile”
   2:4>已完成在项目“StoryScript.csproj”中生成目标“_GenerateCompileDependencyCache”的操作。
       由于条件的计算结果为 false，已跳过目标“_ComputeNonExistentFileProperty”；(('$(BuildingInsideVisualStudio)' == 'true') and ('$(BuildingOutOfProcess)' != 'true') and (('$(BuildingProject)' == 'false') or ('$(UseHostCompilerIfAvailable)' == 'true')))的计算结果为(('' == 'true') and ('' != 'true') and (('true' == 'false') or ('true' == 'true')))。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.CSharp.CurrentVersion.targets”中的目标“ResolveCodeAnalysisRuleSet”(目标“CoreCompile”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ResolveCodeAnalysisRuleSet”任务。
       任务“ResolveCodeAnalysisRuleSet”
   3:4>已完成执行任务“WriteLinesToFile”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_GenerateCompileDependencyCache”的操作。
       由于条件的计算结果为 false，已跳过目标“_ComputeNonExistentFileProperty”；(('$(BuildingInsideVisualStudio)' == 'true') and ('$(BuildingOutOfProcess)' != 'true') and (('$(BuildingProject)' == 'false') or ('$(UseHostCompilerIfAvailable)' == 'true')))的计算结果为(('' == 'true') and ('' != 'true') and (('true' == 'false') or ('true' == 'true')))。
       由于条件的计算结果为 false，已跳过目标“ResolveCodeAnalysisRuleSet”；('$(CodeAnalysisRuleSet)' != '')的计算结果为('' != '')。
       由于条件的计算结果为 false，已跳过目标“ShimReferencePathsWhenCommonTargetsDoesNotUnderstandReferenceAssemblies”；('@(ReferencePathWithRefAssemblies)' == '')的计算结果为('C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\mscorlib.dll;C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.Core.dll;C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.dll;...' == '')。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“_BeforeVBCSCoreCompile”(目标“CoreCompile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_BeforeVBCSCoreCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“ShimReferencePathsWhenCommonTargetsDoesNotUnderstandReferenceAssemblies”；('@(ReferencePathWithRefAssemblies)' == '')的计算结果为('C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\mscorlib.dll;C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.Core.dll;C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.dll;...' == '')。
   2:4>已完成执行任务“ResolveCodeAnalysisRuleSet”的操作。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“ResolveCodeAnalysisRuleSet”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“_ComputeSkipAnalyzers”(目标“CoreCompile”依赖于它):
   3:4>由于 false 条件，已跳过任务“ShowMessageForImplicitlySkipAnalyzers”；('$(_ImplicitlySkipAnalyzers)' == 'true')计算为('' == 'true')。
   2:4>由于条件的计算结果为 false，已跳过目标“ShimReferencePathsWhenCommonTargetsDoesNotUnderstandReferenceAssemblies”；('@(ReferencePathWithRefAssemblies)' == '')的计算结果为('D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll;D:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll;C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\mscorlib.dll;...' == '')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“_BeforeVBCSCoreCompile”(目标“CoreCompile”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“_BeforeVBCSCoreCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“ShimReferencePathsWhenCommonTargetsDoesNotUnderstandReferenceAssemblies”；('@(ReferencePathWithRefAssemblies)' == '')的计算结果为('D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll;D:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll;C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\mscorlib.dll;...' == '')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“_ComputeSkipAnalyzers”(目标“CoreCompile”依赖于它):
       由于 false 条件，已跳过任务“ShowMessageForImplicitlySkipAnalyzers”；('$(_ImplicitlySkipAnalyzers)' == 'true')计算为('' == 'true')。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“_ComputeSkipAnalyzers”的操作。
       由于条件的计算结果为 false，已跳过目标“_SetPathMapFromSourceRoots”；('$(DeterministicSourcePaths)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“CreateCompilerGeneratedFilesOutputPath”；('$(EmitCompilerGeneratedFiles)' == 'true' and !('$(DesignTimeBuild)' == 'true' OR '$(BuildingProject)' != 'true'))的计算结果为('false' == 'true' and !('' == 'true' OR 'true' != 'true'))。
   3:4>已完成在项目“Common.csproj”中生成目标“_ComputeSkipAnalyzers”的操作。
       由于条件的计算结果为 false，已跳过目标“_SetPathMapFromSourceRoots”；('$(DeterministicSourcePaths)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“CreateCompilerGeneratedFilesOutputPath”；('$(EmitCompilerGeneratedFiles)' == 'true' and !('$(DesignTimeBuild)' == 'true' OR '$(BuildingProject)' != 'true'))的计算结果为('false' == 'true' and !('' == 'true' OR 'true' != 'true'))。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.ServiceModel.targets”中的目标“PreXsdCodeGen”(目标“CoreCompile”依赖于它):
   2:4>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“CallTarget”任务。
       任务“CallTarget”
       已跳过目标“CleanXsdCodeGen”。以前的生成已成功。
       已完成执行任务“CallTarget”的操作。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“PreXsdCodeGen”的操作。
       由于条件的计算结果为 false，已跳过目标“XsdCodeGen”；( '$(XsdCodeGenPreCondition)' == 'True' )的计算结果为( 'False' == 'True' )。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets”中的目标“CoreCompile”(目标“Compile”依赖于它):
       正在完全生成目标“CoreCompile”。
       输出文件“obj\Debug\StoryScript.dll”不存在。
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Build.Tasks.CodeAnalysis.dll”中的“Csc”任务。
       任务“Csc”
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.ServiceModel.targets”中的目标“PreXsdCodeGen”(目标“CoreCompile”依赖于它):
   3:4>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“CallTarget”任务。
       任务“CallTarget”
       已跳过目标“CleanXsdCodeGen”。以前的生成已成功。
       已完成执行任务“CallTarget”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“PreXsdCodeGen”的操作。
       由于条件的计算结果为 false，已跳过目标“XsdCodeGen”；( '$(XsdCodeGenPreCondition)' == 'True' )的计算结果为( 'False' == 'True' )。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets”中的目标“CoreCompile”(目标“Compile”依赖于它):
       正在完全生成目标“CoreCompile”。
       输出文件“obj\Debug\Common.dll”不存在。
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Build.Tasks.CodeAnalysis.dll”中的“Csc”任务。
       任务“Csc”
   2:4>CoreCompile:
         C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\csc.exe /noconfig /nowarn:1701,1702 /fullpaths /nostdlib+ /platform:AnyCPU /errorreport:prompt /define:TRACE;DEBUG;ENABLE_ERROR_LOG;ENABLE_LOG /highentropyva+ /reference:D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll /reference:D:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\mscorlib.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.Core.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.dll" /reference:D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll /debug+ /debug:full /filealign:512 /out:obj\Debug\StoryScript.dll /ruleset:"C:\Program Files\Microsoft Visual Studio\2022\Community\Team Tools\Static Analysis Tools\\Rule Sets\MinimumRecommendedRules.ruleset" /subsystemversion:6.00 /target:library /utf8output /langversion:7.3 CommonValues\Linq.cs CustomCommandValueParser.cs CommonCommands\Assign.cs CommonCommands\Composite.cs CommonCommands\Foreach.cs CommonCommands\IfElse.cs CommonCommands\Hashtable.cs CommonCommands\LocalMessage.cs CommonCommands\Log.cs CommonCommands\ReflectionCommand.cs CommonCommands\Terminate.cs CommonCommands\Wait.cs CommonCommands\While.cs CommonValues\Arithmetic.cs CommonValues\Compare.cs CommonValues\Composite.cs CommonValues\GeneralValues.cs CommonValues\Hashtable.cs CommonValues\Logic.cs CommonValues\ReflectionValue.cs CommonValues\String.cs CommonValues\Time.cs IStoryCommand.cs IStoryCommandFactory.cs IStoryValue.cs Log\LogSystem.cs Properties\AssemblyInfo.cs StoryCommandHelper.cs StoryCommandManager.cs StoryConfigManager.cs StoryDefine.cs StoryInstance.cs StoryValueHelper.cs StoryValueManager.cs Util\Converter.cs Util\GenericUtility.cs Util\StoryHelper.cs Util\SimpleObjectPool.cs Util\StringLower.cs Util\TimeUtility.cs "obj\Debug\.NETFramework,Version=v4.8.AssemblyAttributes.cs"
   3:4>CoreCompile:
         C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\csc.exe /noconfig /nowarn:1701,1702 /fullpaths /nostdlib+ /platform:AnyCPU /errorreport:prompt /warn:4 /define:TRACE;DEBUG;ENABLE_ERROR_LOG;ENABLE_LOG /highentropyva+ /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\mscorlib.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.Core.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.dll" /reference:D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll /debug+ /debug:full /filealign:512 /optimize- /out:obj\Debug\Common.dll /subsystemversion:6.00 /target:library /utf8output /langversion:7.3 ClientConcurrent\ClientConcurrentActionProcessor.cs ClientConcurrent\ClientConcurrentCommandProcessor.cs ClientConcurrent\ClientConcurrentDictionary.cs ClientConcurrent\ClientConcurrentObjectPool.cs ClientConcurrent\ClientConcurrentOrderedList.cs ClientConcurrent\ClientConcurrentPoolAllocatedAction.cs ClientConcurrent\ClientConcurrentQueue.cs ClientConcurrent\ClientConcurrentStack.cs ClientConcurrent\ClientConcurrentTypedDataCollection.cs ClientConcurrent\ClientInterlocked.cs ClientConcurrent\ClientSpinLock.cs ClientConcurrent\ClientSpinWait.cs ClientConcurrent\ClientWatch.cs ClientConcurrent\MyThread.cs Geometry\Geometry.cs Geometry\Geometry3D.cs GlobalVariables.cs Log\LogSystem.cs Properties\AssemblyInfo.cs PublishSubscribe\PublishSubscribeSystem.cs Util\Heap.cs Util\Helper.cs HomePath.cs Util\IActionQueue.cs Util\LinkedListDictionary.cs Util\MyActionAndFunc.cs Util\ObjectPool.cs Util\PoolAllocatedAction.cs Util\RandomTable.cs Util\SimpleObjectPool.cs Util\StringLower.cs Util\TimeUtility.cs Util\TypedDataCollection.cs "obj\Debug\.NETFramework,Version=v4.8.AssemblyAttributes.cs"
         Microsoft(R) Visual C# 编译器 版本 4.4.0-6.22565.8 (53091686)
         版权所有(C) Microsoft Corporation。保留所有权利。
         CompilerServer: server - server processed compilation - 07c91a75-f1cc-401a-9fb4-251f82ea8349
       已完成执行任务“Csc”的操作。
       由于 false 条件，已跳过任务“CallTarget”；('$(TargetsTriggeredByCompilation)' != '')计算为('' != '')。
   3:4>已完成在项目“Common.csproj”中生成目标“CoreCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“_TouchLastBuildWithSkipAnalyzers”；('$(_SkipAnalyzers)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_TimeStampAfterCompile”；('$(RunPostBuildEvent)'=='OnOutputUpdated' or ('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library'))的计算结果为(''=='OnOutputUpdated' or (''=='true' and 'Library'=='library'))。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterCompile”(目标“Compile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“AfterCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“PrepareResourcesForSatelliteAssemblies”；('$(UICulture)' != '')的计算结果为('' != '')。
       由于条件的计算结果为 false，已跳过目标“MergeLocalizationDirectives”；('@(GeneratedLocalizationFiles)' !='')的计算结果为('' !='')。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets”中的目标“AfterCompileWinFX”(目标“_AfterCompileWinFXInternal”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“AfterCompileWinFX”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets”中的目标“_AfterCompileWinFXInternal”(目标“Compile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_AfterCompileWinFXInternal”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Compile”(目标“CoreBuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“Compile”的操作。
       由于条件的计算结果为 false，已跳过目标“DeferredValidation”；('$(SkipWorkflowValidation)' != 'true' and ('@(XamlPage)' != '' or '@(XamlAppDef)' != ''))的计算结果为('' != 'true' and ('' != '' or '' != ''))。
       由于条件的计算结果为 false，已跳过目标“ExportWindowsMDFile”；('$(ExportWinMDFile)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“UnmanagedUnregistration”；((('$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)' or '$(RegisterForComInterop)' != 'true' or '$(OutputType)' != 'library') or
                           ('$(_AssemblyTimestampBeforeCompile)' == '')) and
                          Exists('@(_UnmanagedRegistrationCache)'))的计算结果为((('' != '' or '' != 'true' or 'Library' != 'library') or
                           ('' == '')) and
                          Exists('obj\Common.csproj.UnmanagedRegistration.cache'))。
       由于条件的计算结果为 false，已跳过目标“GenerateSerializationAssemblies”；('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))的计算结果为('Off' == 'On' or (''!='' and 'Off' == 'Auto'))。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GenerateSatelliteAssemblyInputs”(目标“CreateSatelliteAssemblies”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ManifestResourceWithCulture)'!='' and '%(ManifestResourceWithCulture.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
       由于 false 条件，已跳过任务“Warning”；('@(ManifestNonResxWithCultureOnDisk)'!='' and '%(ManifestNonResxWithCultureOnDisk.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
   3:4>已完成在项目“Common.csproj”中生成目标“_GenerateSatelliteAssemblyInputs”的操作。
       由于条件的计算结果为 false，已跳过目标“ComputeIntermediateSatelliteAssemblies”；(@(EmbeddedResource->'%(WithCulture)') != '')的计算结果为( != '')。
       由于条件的计算结果为 false，已跳过目标“GenerateSatelliteAssemblies”；('@(_SatelliteAssemblyResourceInputs)' != '' and '$(GenerateSatelliteAssembliesForCore)' != 'true')的计算结果为('' != '' and '' != 'true')。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CreateSatelliteAssemblies”(目标“CoreBuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“CreateSatelliteAssemblies”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateManifests”；('$(GenerateClickOnceManifests)'=='true' or '@(NativeReference)'!='' or '@(ResolvedIsolatedComModules)'!='' or '$(GenerateAppxManifest)' == 'true')的计算结果为(''=='true' or ''!='' or ''!='' or '' == 'true')。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetPathWithTargetPlatformMoniker”(目标“GetTargetPath”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“GetTargetPathWithTargetPlatformMoniker”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetPath”(目标“CoreBuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“GetTargetPath”的操作。
       由于条件的计算结果为 false，已跳过目标“ComputeIntermediateSatelliteAssemblies”；(@(EmbeddedResource->'%(WithCulture)') != '')的计算结果为( != '')。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CopyFilesMarkedCopyLocal”(目标“CopyFilesToOutputDirectory”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Copy”任务。
       任务“Copy”
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll”复制到“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\UnityEngine.dll”。
       已完成执行任务“Copy”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Touch”任务。
       任务“Touch”
         正在创建“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\Common.csproj.CopyComplete”，因为已指定“AlwaysCreate”。
       已完成执行任务“Touch”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_CopyFilesMarkedCopyLocal”的操作。
       已跳过目标“AssignTargetPaths”。以前的生成已成功。
       已跳过目标“AssignProjectConfiguration”。以前的生成已成功。
       已跳过目标“_SplitProjectReferencesByFileExistence”。以前的生成已成功。
       已跳过目标“_GetProjectReferenceTargetFrameworkProperties”。以前的生成已成功。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”(目标“GetCopyToOutputDirectoryItems”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets”中的目标“GetCopyToOutputDirectoryXamlAppDefs”(目标“GetCopyToOutputDirectoryItems”依赖于它):
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“GetCopyToOutputDirectoryXamlAppDefs”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetCopyToOutputDirectoryItems”(目标“_CopySourceItemsToOutputDirectory”依赖于它):
       任务“CallTarget”
       已跳过目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”。以前的生成已成功。
       已跳过目标“_AddOutputPathToGlobalPropertiesToRemove”。以前的生成已成功。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences”(目标“GetCopyToOutputDirectoryItems”依赖于它):
       由于 false 条件，已跳过任务“MSBuild”；('@(_MSBuildProjectReferenceExistent)' != '' and '$(_GetChildProjectCopyToOutputDirectoryItems)' == 'true' and '%(_MSBuildProjectReferenceExistent.Private)' != 'false' and '$(UseCommonOutputDirectory)' != 'true')计算为('' != '' and 'true' == 'true' and '' != 'false' and 'false' != 'true')。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences”的操作。
       已完成执行任务“CallTarget”的操作。
       任务“CallTarget”
       已跳过目标“AssignTargetPaths”。以前的生成已成功。
       已跳过目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”。以前的生成已成功。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GetCopyToOutputDirectoryItemsFromThisProject”(目标“GetCopyToOutputDirectoryItems”依赖于它):
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_GetCopyToOutputDirectoryItemsFromThisProject”的操作。
       已完成执行任务“CallTarget”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“GetCopyToOutputDirectoryItems”的操作。
       由于条件的计算结果为 false，已跳过目标“_CopyOutOfDateSourceItemsToOutputDirectory”；( '@(_SourceItemsToCopyToOutputDirectory)' != '' )的计算结果为( '' != '' )。
       由于条件的计算结果为 false，已跳过目标“_CopyOutOfDateSourceItemsToOutputDirectoryAlways”；( '@(_SourceItemsToCopyToOutputDirectoryAlways)' != '' )的计算结果为( '' != '' )。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CopySourceItemsToOutputDirectory”(目标“CopyFilesToOutputDirectory”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_CopySourceItemsToOutputDirectory”的操作。
       由于条件的计算结果为 false，已跳过目标“_CopyAppConfigFile”；( '@(AppConfigWithTargetPath)' != '' )的计算结果为( '' != '' )。
       由于条件的计算结果为 false，已跳过目标“_CopyManifestFiles”；( '$(_DeploymentCopyApplicationManifest)'=='true' or '$(GenerateClickOnceManifests)'=='true' )的计算结果为( ''=='true' or ''=='true' )。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CheckForCompileOutputs”(目标“CopyFilesToOutputDirectory”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_CheckForCompileOutputs”的操作。
       由于条件的计算结果为 false，已跳过目标“_SGenCheckForOutputs”；('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))的计算结果为('Off' == 'On' or (''!='' and 'Off' == 'Auto'))。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CopyFilesToOutputDirectory”(目标“PrepareForRun”依赖于它):
       任务“Copy”
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\Common.dll”复制到“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\Common.dll”。
       已完成执行任务“Copy”的操作。
       由于 false 条件，已跳过任务“CopyRefAssembly”；('$(ProduceReferenceAssembly)' == 'true' and '$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true')计算为('false' == 'true' and 'true' == 'true' and '' != 'true')。
       任务“Message”
         Common -> D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\Common.dll
       已完成执行任务“Message”的操作。
       由于 false 条件，已跳过任务“Copy”；('@(AddModules)' != '')计算为('' != '')。
       由于 false 条件，已跳过任务“Copy”；('$(_SGenDllCreated)'=='true')计算为('false'=='true')。
       任务“Copy”
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\Common.pdb”复制到“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\Common.pdb”。
       已完成执行任务“Copy”的操作。
       由于 false 条件，已跳过任务“Copy”；('$(_DocumentationFileProduced)'=='true' and '$(CopyDocumentationFileToOutputDirectory)'=='true')计算为('false'=='true' and 'true'=='true')。
       由于 false 条件，已跳过任务“Copy”；('@(IntermediateSatelliteAssembliesWithTargetPath)' != '')计算为('' != '')。
       由于 false 条件，已跳过任务“Copy”；('@(ReferenceComWrappersToCopyLocal)' != '' or '@(ResolvedIsolatedComModules)' != '' or '@(_DeploymentLooseManifestFile)' != '' or '@(NativeReferenceFile)' != '' )计算为('' != '' or '' != '' or '' != '' or '' != '' )。
       由于 false 条件，已跳过任务“Copy”；('$(SkipCopyWinMDArtifact)' != 'true' and '@(WinMDExpArtifacts)' != '')计算为('' != 'true' and '' != '')。
       由于 false 条件，已跳过任务“Message”；('$(SkipCopyWinMDArtifact)' != 'true' and '$(_WindowsMetadataOutputPath)' != '')计算为('' != 'true' and '' != '')。
   3:4>已完成在项目“Common.csproj”中生成目标“CopyFilesToOutputDirectory”的操作。
       由于条件的计算结果为 false，已跳过目标“RunCodeAnalysis”；('$(RunCodeAnalysisOnThisProject)'=='true')的计算结果为(''=='true')。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareForRun”(目标“CoreBuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“PrepareForRun”的操作。
       由于条件的计算结果为 false，已跳过目标“UnmanagedRegistration”；('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library')的计算结果为(''=='true' and 'Library'=='library')。
       已跳过目标“_CheckForCompileOutputs”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“_SGenCheckForOutputs”；('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))的计算结果为('Off' == 'On' or (''!='' and 'Off' == 'Auto'))。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CleanGetCurrentAndPriorFileWrites”(目标“IncrementalClean”依赖于它):
       任务“ReadLinesFromFile”
       已完成执行任务“ReadLinesFromFile”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ConvertToAbsolutePath”任务。
       任务“ConvertToAbsolutePath”
       已完成执行任务“ConvertToAbsolutePath”的操作。
       任务“FindUnderPath”
         比较路径为“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“bin\Debug\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“obj\Debug\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“RemoveDuplicates”
       已完成执行任务“RemoveDuplicates”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_CleanGetCurrentAndPriorFileWrites”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“IncrementalClean”(目标“CoreBuild”依赖于它):
       任务“FindUnderPath”
         比较路径为“bin\Debug\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“obj\Debug\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“Delete”
       已完成执行任务“Delete”的操作。
       任务“RemoveDuplicates”
       已完成执行任务“RemoveDuplicates”的操作。
       任务“WriteLinesToFile”
       已完成执行任务“WriteLinesToFile”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“IncrementalClean”的操作。
       由于条件的计算结果为 false，已跳过目标“PostBuildEvent”；('$(PostBuildEvent)' != '' and ('$(RunPostBuildEvent)' != 'OnOutputUpdated' or '$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)'))的计算结果为('' != '' and ('' != 'OnOutputUpdated' or '' != ''))。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CoreBuild”(目标“Build”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“CoreBuild”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterBuild”(目标“Build”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“AfterBuild”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Build”(目标“Rebuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“Build”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterRebuild”(目标“Rebuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“AfterRebuild”的操作。
   3:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Rebuild”(入口点):
   3:4>已完成在项目“Common.csproj”中生成目标“Rebuild”的操作。
   3:4>已完成生成项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(Rebuild 个目标)的操作。
   4:2>项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”(4:2)正在节点 2 上生成“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(3:5) (默认目标)。
   3:5>项目文件包含 ToolsVersion="12.0"。此工具集未知或缺失(在此情况下，您可以通过安装合适的 MSBuild 版本来解决此问题)，或者生成可能已被强制到特定的 ToolsVersion (出于策略原因)。将项目视为具有 ToolsVersion="Current"。有关详细信息，请参阅 http://go.microsoft.com/fwlink/?LinkId=293424。
       已跳过目标“Build”。以前的生成已成功。
   3:5>已完成生成项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(默认目标)的操作。
   2:4>CoreCompile:
         Microsoft(R) Visual C# 编译器 版本 4.4.0-6.22565.8 (53091686)
         版权所有(C) Microsoft Corporation。保留所有权利。
         CompilerServer: server - server processed compilation - deec9e1f-ae5f-4b97-a8a7-65d973d508e9
       已完成执行任务“Csc”的操作。
       由于 false 条件，已跳过任务“CallTarget”；('$(TargetsTriggeredByCompilation)' != '')计算为('' != '')。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“CoreCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“_TouchLastBuildWithSkipAnalyzers”；('$(_SkipAnalyzers)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_TimeStampAfterCompile”；('$(RunPostBuildEvent)'=='OnOutputUpdated' or ('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library'))的计算结果为(''=='OnOutputUpdated' or (''=='true' and 'Library'=='library'))。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterCompile”(目标“Compile”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“AfterCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“PrepareResourcesForSatelliteAssemblies”；('$(UICulture)' != '')的计算结果为('' != '')。
       由于条件的计算结果为 false，已跳过目标“MergeLocalizationDirectives”；('@(GeneratedLocalizationFiles)' !='')的计算结果为('' !='')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets”中的目标“AfterCompileWinFX”(目标“_AfterCompileWinFXInternal”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“AfterCompileWinFX”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets”中的目标“_AfterCompileWinFXInternal”(目标“Compile”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“_AfterCompileWinFXInternal”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Compile”(目标“CoreBuild”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“Compile”的操作。
       由于条件的计算结果为 false，已跳过目标“DeferredValidation”；('$(SkipWorkflowValidation)' != 'true' and ('@(XamlPage)' != '' or '@(XamlAppDef)' != ''))的计算结果为('' != 'true' and ('' != '' or '' != ''))。
       由于条件的计算结果为 false，已跳过目标“ExportWindowsMDFile”；('$(ExportWinMDFile)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“UnmanagedUnregistration”；((('$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)' or '$(RegisterForComInterop)' != 'true' or '$(OutputType)' != 'library') or
                           ('$(_AssemblyTimestampBeforeCompile)' == '')) and
                          Exists('@(_UnmanagedRegistrationCache)'))的计算结果为((('' != '' or '' != 'true' or 'Library' != 'library') or
                           ('' == '')) and
                          Exists('obj\StoryScript.csproj.UnmanagedRegistration.cache'))。
       由于条件的计算结果为 false，已跳过目标“GenerateSerializationAssemblies”；('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))的计算结果为('Off' == 'On' or (''!='' and 'Off' == 'Auto'))。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GenerateSatelliteAssemblyInputs”(目标“CreateSatelliteAssemblies”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ManifestResourceWithCulture)'!='' and '%(ManifestResourceWithCulture.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
       由于 false 条件，已跳过任务“Warning”；('@(ManifestNonResxWithCultureOnDisk)'!='' and '%(ManifestNonResxWithCultureOnDisk.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“_GenerateSatelliteAssemblyInputs”的操作。
       由于条件的计算结果为 false，已跳过目标“ComputeIntermediateSatelliteAssemblies”；(@(EmbeddedResource->'%(WithCulture)') != '')的计算结果为( != '')。
       由于条件的计算结果为 false，已跳过目标“GenerateSatelliteAssemblies”；('@(_SatelliteAssemblyResourceInputs)' != '' and '$(GenerateSatelliteAssembliesForCore)' != 'true')的计算结果为('' != '' and '' != 'true')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CreateSatelliteAssemblies”(目标“CoreBuild”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“CreateSatelliteAssemblies”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateManifests”；('$(GenerateClickOnceManifests)'=='true' or '@(NativeReference)'!='' or '@(ResolvedIsolatedComModules)'!='' or '$(GenerateAppxManifest)' == 'true')的计算结果为(''=='true' or ''!='' or ''!='' or '' == 'true')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetPathWithTargetPlatformMoniker”(目标“GetTargetPath”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“GetTargetPathWithTargetPlatformMoniker”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetPath”(目标“CoreBuild”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“GetTargetPath”的操作。
       由于条件的计算结果为 false，已跳过目标“ComputeIntermediateSatelliteAssemblies”；(@(EmbeddedResource->'%(WithCulture)') != '')的计算结果为( != '')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CopyFilesMarkedCopyLocal”(目标“CopyFilesToOutputDirectory”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Copy”任务。
       任务“Copy”
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll”复制到“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\Dsl.dll”。
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.pdb”复制到“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\Dsl.pdb”。
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll”复制到“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\LitJson.dll”。
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll”复制到“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\UnityEngine.dll”。
       已完成执行任务“Copy”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Touch”任务。
       任务“Touch”
         正在创建“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\StoryScript.csproj.CopyComplete”，因为已指定“AlwaysCreate”。
       已完成执行任务“Touch”的操作。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“_CopyFilesMarkedCopyLocal”的操作。
       已跳过目标“AssignTargetPaths”。以前的生成已成功。
       已跳过目标“AssignProjectConfiguration”。以前的生成已成功。
       已跳过目标“_SplitProjectReferencesByFileExistence”。以前的生成已成功。
       已跳过目标“_GetProjectReferenceTargetFrameworkProperties”。以前的生成已成功。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”(目标“GetCopyToOutputDirectoryItems”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets”中的目标“GetCopyToOutputDirectoryXamlAppDefs”(目标“GetCopyToOutputDirectoryItems”依赖于它):
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“GetCopyToOutputDirectoryXamlAppDefs”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetCopyToOutputDirectoryItems”(目标“_CopySourceItemsToOutputDirectory”依赖于它):
       任务“CallTarget”
       已跳过目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”。以前的生成已成功。
       已跳过目标“_AddOutputPathToGlobalPropertiesToRemove”。以前的生成已成功。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences”(目标“GetCopyToOutputDirectoryItems”依赖于它):
       由于 false 条件，已跳过任务“MSBuild”；('@(_MSBuildProjectReferenceExistent)' != '' and '$(_GetChildProjectCopyToOutputDirectoryItems)' == 'true' and '%(_MSBuildProjectReferenceExistent.Private)' != 'false' and '$(UseCommonOutputDirectory)' != 'true')计算为('' != '' and 'true' == 'true' and '' != 'false' and 'false' != 'true')。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences”的操作。
       已完成执行任务“CallTarget”的操作。
       任务“CallTarget”
       已跳过目标“AssignTargetPaths”。以前的生成已成功。
       已跳过目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”。以前的生成已成功。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GetCopyToOutputDirectoryItemsFromThisProject”(目标“GetCopyToOutputDirectoryItems”依赖于它):
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“_GetCopyToOutputDirectoryItemsFromThisProject”的操作。
       已完成执行任务“CallTarget”的操作。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“GetCopyToOutputDirectoryItems”的操作。
       由于条件的计算结果为 false，已跳过目标“_CopyOutOfDateSourceItemsToOutputDirectory”；( '@(_SourceItemsToCopyToOutputDirectory)' != '' )的计算结果为( '' != '' )。
       由于条件的计算结果为 false，已跳过目标“_CopyOutOfDateSourceItemsToOutputDirectoryAlways”；( '@(_SourceItemsToCopyToOutputDirectoryAlways)' != '' )的计算结果为( '' != '' )。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CopySourceItemsToOutputDirectory”(目标“CopyFilesToOutputDirectory”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“_CopySourceItemsToOutputDirectory”的操作。
       由于条件的计算结果为 false，已跳过目标“_CopyAppConfigFile”；( '@(AppConfigWithTargetPath)' != '' )的计算结果为( '' != '' )。
       由于条件的计算结果为 false，已跳过目标“_CopyManifestFiles”；( '$(_DeploymentCopyApplicationManifest)'=='true' or '$(GenerateClickOnceManifests)'=='true' )的计算结果为( ''=='true' or ''=='true' )。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CheckForCompileOutputs”(目标“CopyFilesToOutputDirectory”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“_CheckForCompileOutputs”的操作。
       由于条件的计算结果为 false，已跳过目标“_SGenCheckForOutputs”；('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))的计算结果为('Off' == 'On' or (''!='' and 'Off' == 'Auto'))。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CopyFilesToOutputDirectory”(目标“PrepareForRun”依赖于它):
       任务“Copy”
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\StoryScript.dll”复制到“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\StoryScript.dll”。
       已完成执行任务“Copy”的操作。
       由于 false 条件，已跳过任务“CopyRefAssembly”；('$(ProduceReferenceAssembly)' == 'true' and '$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true')计算为('false' == 'true' and 'true' == 'true' and '' != 'true')。
       任务“Message”
         StoryScript -> D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\StoryScript.dll
       已完成执行任务“Message”的操作。
       由于 false 条件，已跳过任务“Copy”；('@(AddModules)' != '')计算为('' != '')。
       由于 false 条件，已跳过任务“Copy”；('$(_SGenDllCreated)'=='true')计算为('false'=='true')。
       任务“Copy”
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\StoryScript.pdb”复制到“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\StoryScript.pdb”。
       已完成执行任务“Copy”的操作。
       由于 false 条件，已跳过任务“Copy”；('$(_DocumentationFileProduced)'=='true' and '$(CopyDocumentationFileToOutputDirectory)'=='true')计算为('false'=='true' and 'true'=='true')。
       由于 false 条件，已跳过任务“Copy”；('@(IntermediateSatelliteAssembliesWithTargetPath)' != '')计算为('' != '')。
       由于 false 条件，已跳过任务“Copy”；('@(ReferenceComWrappersToCopyLocal)' != '' or '@(ResolvedIsolatedComModules)' != '' or '@(_DeploymentLooseManifestFile)' != '' or '@(NativeReferenceFile)' != '' )计算为('' != '' or '' != '' or '' != '' or '' != '' )。
       由于 false 条件，已跳过任务“Copy”；('$(SkipCopyWinMDArtifact)' != 'true' and '@(WinMDExpArtifacts)' != '')计算为('' != 'true' and '' != '')。
       由于 false 条件，已跳过任务“Message”；('$(SkipCopyWinMDArtifact)' != 'true' and '$(_WindowsMetadataOutputPath)' != '')计算为('' != 'true' and '' != '')。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“CopyFilesToOutputDirectory”的操作。
       由于条件的计算结果为 false，已跳过目标“RunCodeAnalysis”；('$(RunCodeAnalysisOnThisProject)'=='true')的计算结果为(''=='true')。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareForRun”(目标“CoreBuild”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“PrepareForRun”的操作。
       由于条件的计算结果为 false，已跳过目标“UnmanagedRegistration”；('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library')的计算结果为(''=='true' and 'Library'=='library')。
       已跳过目标“_CheckForCompileOutputs”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“_SGenCheckForOutputs”；('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))的计算结果为('Off' == 'On' or (''!='' and 'Off' == 'Auto'))。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CleanGetCurrentAndPriorFileWrites”(目标“IncrementalClean”依赖于它):
       任务“ReadLinesFromFile”
       已完成执行任务“ReadLinesFromFile”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ConvertToAbsolutePath”任务。
       任务“ConvertToAbsolutePath”
       已完成执行任务“ConvertToAbsolutePath”的操作。
       任务“FindUnderPath”
         比较路径为“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“bin\Debug\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“obj\Debug\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“RemoveDuplicates”
       已完成执行任务“RemoveDuplicates”的操作。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“_CleanGetCurrentAndPriorFileWrites”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“IncrementalClean”(目标“CoreBuild”依赖于它):
       任务“FindUnderPath”
         比较路径为“bin\Debug\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“obj\Debug\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“Delete”
       已完成执行任务“Delete”的操作。
       任务“RemoveDuplicates”
       已完成执行任务“RemoveDuplicates”的操作。
       任务“WriteLinesToFile”
       已完成执行任务“WriteLinesToFile”的操作。
   2:4>已完成在项目“StoryScript.csproj”中生成目标“IncrementalClean”的操作。
       由于条件的计算结果为 false，已跳过目标“PostBuildEvent”；('$(PostBuildEvent)' != '' and ('$(RunPostBuildEvent)' != 'OnOutputUpdated' or '$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)'))的计算结果为('' != '' and ('' != 'OnOutputUpdated' or '' != ''))。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CoreBuild”(目标“Build”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“CoreBuild”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterBuild”(目标“Build”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“AfterBuild”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Build”(目标“Rebuild”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“Build”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterRebuild”(目标“Rebuild”依赖于它):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“AfterRebuild”的操作。
   2:4>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Rebuild”(入口点):
   2:4>已完成在项目“StoryScript.csproj”中生成目标“Rebuild”的操作。
   2:4>已完成生成项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(Rebuild 个目标)的操作。
   4:2>项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”(4:2)正在节点 1 上生成“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(2:5) (默认目标)。
   2:5>已跳过目标“Build”。以前的生成已成功。
   2:5>已完成生成项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(默认目标)的操作。
   4:2>已完成执行任务“MSBuild”的操作。
       任务“MSBuild”
         全局属性:
           Configuration=Debug
           Platform=AnyCPU
         移除项目“..\..\Infrastructure\Common\Common.csproj”的属性:
           TargetFramework
           RuntimeIdentifier
           SelfContained
         移除项目“..\..\Infrastructure\StoryScript\StoryScript.csproj”的属性:
           TargetFramework
           RuntimeIdentifier
           SelfContained
   4:2>项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”(4:2)正在节点 1 上生成“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(2:6) (GetNativeManifest 个目标)。
   2:6>项目文件包含 ToolsVersion="12.0"。此工具集未知或缺失(在此情况下，您可以通过安装合适的 MSBuild 版本来解决此问题)，或者生成可能已被强制到特定的 ToolsVersion (出于策略原因)。将项目视为具有 ToolsVersion="Current"。有关详细信息，请参阅 http://go.microsoft.com/fwlink/?LinkId=293424。
   2:6>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetNativeManifest”(入口点):
   2:6>已完成在项目“StoryScript.csproj”中生成目标“GetNativeManifest”的操作。
   2:6>已完成生成项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(GetNativeManifest 个目标)的操作。
   4:2>项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”(4:2)正在节点 2 上生成“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(3:6) (GetNativeManifest 个目标)。
   3:6>项目文件包含 ToolsVersion="12.0"。此工具集未知或缺失(在此情况下，您可以通过安装合适的 MSBuild 版本来解决此问题)，或者生成可能已被强制到特定的 ToolsVersion (出于策略原因)。将项目视为具有 ToolsVersion="Current"。有关详细信息，请参阅 http://go.microsoft.com/fwlink/?LinkId=293424。
   3:6>来自项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetNativeManifest”(入口点):
   3:6>已完成在项目“Common.csproj”中生成目标“GetNativeManifest”的操作。
   3:6>已完成生成项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(GetNativeManifest 个目标)的操作。
   4:2>已完成执行任务“MSBuild”的操作。
       由于 false 条件，已跳过任务“Warning”；('@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceNonexistent)' != '')计算为('..\..\Infrastructure\Common\Common.csproj;..\..\Infrastructure\StoryScript\StoryScript.csproj' != '' and '' != '')。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“ResolveProjectReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“FindInvalidProjectReferences”；('$(FindInvalidProjectReferences)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“ResolveNativeReferences”；('@(NativeReference)'!='')的计算结果为(''!='')。
       已跳过目标“ResolveProjectReferences”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“FindInvalidProjectReferences”；('$(FindInvalidProjectReferences)' == 'true')的计算结果为('' == 'true')。
       已跳过目标“GetFrameworkPaths”。以前的生成已成功。
       已跳过目标“GetReferenceAssemblyPaths”。以前的生成已成功。
       已跳过目标“PrepareForBuild”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“GetInstalledSDKLocations”；('@(SDKReference)' != '')的计算结果为('' != '')。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveSDKReferences”(目标“ResolveAssemblyReferences”依赖于它):
       由于 false 条件，已跳过任务“ResolveSDKReference”；('@(SDKReference)'!='')计算为(''!='')。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“ResolveSDKReferences”的操作。
       已跳过目标“ResolveSDKReferences”。以前的生成已成功。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ExpandSDKReferences”(目标“ResolveAssemblyReferences”依赖于它):
       由于 false 条件，已跳过任务“GetSDKReferenceFiles”；('@(ResolvedSDKReference)'!='')计算为(''!='')。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“ExpandSDKReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveNuGetPackageAssets”；('$(ResolveNuGetPackages)' == 'true' and exists('$(ProjectLockFile)'))的计算结果为('true' == 'true' and exists('obj\project.assets.json'))。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\Microsoft.NET.Build.Extensions.NETFramework.targets”中的目标“ImplicitlyExpandNETStandardFacades”(目标“ResolveAssemblyReferences”依赖于它):
       由于 false 条件，已跳过任务“GetDependsOnNETStandard”；('$(_RunGetDependsOnNETStandard)' == 'true')计算为('' == 'true')。
       由于 false 条件，已跳过任务“NETBuildExtensionsError”；('$(DependsOnNETStandard)' == 'true' AND '$(NETStandardInbox)' != 'true' AND '$(_UsingOldSDK)' == 'true')计算为('' == 'true' AND 'true' != 'true' AND '' == 'true')。
       由于 false 条件，已跳过任务“AddFacadesToReferences”；('@(_NETStandardLibraryNETFrameworkLib)' != '')计算为('' != '')。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“ImplicitlyExpandNETStandardFacades”的操作。
       已跳过目标“GetFrameworkPaths”。以前的生成已成功。
       已跳过目标“GetReferenceAssemblyPaths”。以前的生成已成功。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\Microsoft.NET.Build.Extensions.ConflictResolution.targets”中的目标“_HandlePackageFileConflicts”(目标“ResolveAssemblyReferences”依赖于它):
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\\tools\net472\Microsoft.NET.Build.Extensions.Tasks.dll”中的“ResolvePackageFileConflicts”任务。
       任务“ResolvePackageFileConflicts”
       已完成执行任务“ResolvePackageFileConflicts”的操作。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“_HandlePackageFileConflicts”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveAssemblyReferences”(目标“ResolveReferences”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ResolveAssemblyReference”任务。
       任务“ResolveAssemblyReference”
         TargetFrameworkMoniker:
             .NETFramework,Version=v4.8
         TargetFrameworkMonikerDisplayName:
             .NET Framework 4.8
         TargetedRuntimeVersion:
             v4.0.30319
         Assemblies:
             Dsl
                 HintPath =“..\..\ExternLibrary\Dsl.dll”
             LitJson
                 HintPath =“..\..\ExternLibrary\LitJson.dll”
             System
             UnityEngine
                 HintPath =“..\..\ExternLibrary\UnityEngine.dll”
             UnityEngine.UI
                 HintPath =“..\..\ExternLibrary\UnityEngine.UI.dll”
             System.Core
         AssemblyFiles:
             D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\Common.dll
             D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\StoryScript.dll
             C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\mscorlib.dll
         CandidateAssemblyFiles:
         TargetFrameworkDirectories:
             C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\,C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\
         InstalledAssemblyTables:
         IgnoreInstalledAssemblyTable:
             False
         SearchPaths:
             {CandidateAssemblyFiles}
             {HintPathFromItem}
             {TargetFrameworkDirectory}
             {AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8}
             {Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx}
             {AssemblyFolders}
             {GAC}
             {RawFileName}
             bin\Debug\
         AllowedAssemblyExtensions:
             .winmd
             .dll
             .exe
         AllowedRelatedFileExtensions:
             .pdb
             .xml
             .pri
             .dll.config
             .exe.config
         AppConfigFile:
             
         AutoUnify:
             True
         CopyLocalDependenciesWhenParentReferenceInGac:
             True
         FindDependencies:
             True
         TargetProcessorArchitecture:
             msil
         StateFile:
             obj\Debug\GameKernel.csproj.AssemblyReference.cache
         InstalledAssemblySubsetTables:
         IgnoreInstalledAssemblySubsetTable:
             False
         TargetFrameworkSubsets:
         FullTargetFrameworkSubsetNames:
             Full
         ProfileName:
             
         FullFrameworkFolders:
             C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\
         LatestTargetFrameworkDirectories:
         ProfileTablesLocation:
         主引用“Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\Common.dll”。
             在搜索路径位置“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\Common.dll”找到引用。
             找到相关文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\Common.pdb”。
         主引用“StoryScript, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\StoryScript.dll”。
             在搜索路径位置“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\StoryScript.dll”找到引用。
             找到相关文件“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\StoryScript.pdb”。
         统一主引用“mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             使用此版本而不是“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll”中的原始版本“2.0.0.0”，因为存在此框架文件的更新版本。
             使用此版本而不是“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll”中的原始版本“2.0.0.0”，因为存在此框架文件的更新版本。
             解析的文件路径为“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\mscorlib.dll”。
             在搜索路径位置“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\mscorlib.dll”找到引用。
             此引用不是“CopyLocal”，因为它是系统必备文件。
         主引用“Dsl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
             找到相关文件“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.pdb”。
         主引用“LitJson, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
             此引用的 ImageRuntimeVersion 是“v2.0.50727”。
         统一主引用“System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             使用此版本而不是“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll”中的原始版本“2.0.0.0”，因为存在此框架文件的更新版本。
             使用此版本而不是“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll”中的原始版本“2.0.0.0”，因为存在此框架文件的更新版本。
             解析的文件路径为“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.dll”。
             在搜索路径位置“{TargetFrameworkDirectory}”找到引用。
                 用于 SearchPath“{TargetFrameworkDirectory}”。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.winmd”，但它不存在。
             此引用不是“CopyLocal”，因为它是系统必备文件。
         主引用“UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
             此引用的 ImageRuntimeVersion 是“v2.0.50727”。
         主引用“UnityEngine.UI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.UI.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
         统一主引用“System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             使用此版本而不是“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll”中的原始版本“3.5.0.0”，因为存在此框架文件的更新版本。
             解析的文件路径为“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.Core.dll”。
             在搜索路径位置“{TargetFrameworkDirectory}”找到引用。
                 用于 SearchPath“{TargetFrameworkDirectory}”。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.Core.winmd”，但它不存在。
             此引用不是“CopyLocal”，因为它是系统必备文件。
         依赖项“netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”。
             未能解析此引用。未能找到程序集“netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“D:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\netstandard.winmd”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\netstandard.dll”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\netstandard.exe”，但它不存在。
                 用于 SearchPath“{TargetFrameworkDirectory}”。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\netstandard.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\netstandard.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\netstandard.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\netstandard.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\netstandard.dll”，
         			但它的名称“netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”
         			与预期名称“netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”不匹配。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\netstandard.exe”，但它不存在。
                 用于 SearchPath“{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8}”。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\netstandard.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\netstandard.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\netstandard.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\netstandard.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\netstandard.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\netstandard.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\netstandard.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\netstandard.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\netstandard.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\netstandard.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\netstandard.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\netstandard.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\netstandard.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\netstandard.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\netstandard.exe”，但它不存在。
                 用于 SearchPath“{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx}”。
                 已考虑 AssemblyFoldersEx 位置。
                 用于 SearchPath“{AssemblyFolders}”。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\netstandard.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\netstandard.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\netstandard.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\netstandard.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\netstandard.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\netstandard.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\netstandard.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\netstandard.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\netstandard.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\netstandard.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\netstandard.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\netstandard.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\netstandard.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\netstandard.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\netstandard.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\netstandard.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\netstandard.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\netstandard.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\netstandard.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\netstandard.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\netstandard.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\netstandard.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\netstandard.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\netstandard.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\netstandard.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\netstandard.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\netstandard.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\netstandard.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\netstandard.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\netstandard.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\netstandard.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\netstandard.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\netstandard.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\netstandard.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\netstandard.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\netstandard.exe”，但它不存在。
                 用于 SearchPath“{GAC}”。
                 已考虑使用“netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”，但未在 GAC 中找到它。
                 用于 SearchPath“bin\Debug\”。
                 已考虑使用“bin\Debug\netstandard.winmd”，但它不存在。
                 已考虑使用“bin\Debug\netstandard.dll”，但它不存在。
                 已考虑使用“bin\Debug\netstandard.exe”，但它不存在。
             “UnityEngine.UI”所必需的。
         依赖项“UnityEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEditor.dll”。
             在搜索路径位置“D:\GitHub\GameDemo\GameLibrary\ExternLibrary”找到引用。
                 用于 SearchPath“D:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEditor.winmd”，但它不存在。
             “UnityEngine.UI”所必需的。
         依赖项“System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.Xml.dll”。
             在搜索路径位置“{TargetFrameworkDirectory}”找到引用。
                 用于 SearchPath“D:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\System.Xml.winmd”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\System.Xml.dll”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\System.Xml.exe”，但它不存在。
                 用于 SearchPath“{TargetFrameworkDirectory}”。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.Xml.winmd”，但它不存在。
             “UnityEngine.UI”所必需的。
             此引用不是“CopyLocal”，因为它是系统必备文件。
         依赖项“Unity.Cecil, Version=0.10.0.0, Culture=neutral, PublicKeyToken=fc15b93552389f74”。
             未能解析此引用。未能找到程序集“Unity.Cecil, Version=0.10.0.0, Culture=neutral, PublicKeyToken=fc15b93552389f74”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“D:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Unity.Cecil.exe”，但它不存在。
                 用于 SearchPath“{TargetFrameworkDirectory}”。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Unity.Cecil.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\Unity.Cecil.exe”，但它不存在。
                 用于 SearchPath“{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8}”。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\Unity.Cecil.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\Unity.Cecil.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\Unity.Cecil.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\Unity.Cecil.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\Unity.Cecil.exe”，但它不存在。
                 用于 SearchPath“{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx}”。
                 已考虑 AssemblyFoldersEx 位置。
                 用于 SearchPath“{AssemblyFolders}”。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\Unity.Cecil.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\Unity.Cecil.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\Unity.Cecil.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\Unity.Cecil.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\Unity.Cecil.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\Unity.Cecil.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\Unity.Cecil.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\Unity.Cecil.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\Unity.Cecil.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\Unity.Cecil.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\Unity.Cecil.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\Unity.Cecil.exe”，但它不存在。
                 用于 SearchPath“{GAC}”。
                 已考虑使用“Unity.Cecil, Version=0.10.0.0, Culture=neutral, PublicKeyToken=fc15b93552389f74”，但未在 GAC 中找到它。
                 用于 SearchPath“bin\Debug\”。
                 已考虑使用“bin\Debug\Unity.Cecil.winmd”，但它不存在。
                 已考虑使用“bin\Debug\Unity.Cecil.dll”，但它不存在。
                 已考虑使用“bin\Debug\Unity.Cecil.exe”，但它不存在。
             “UnityEngine.UI”所必需的。
         依赖项“System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.Xml.Linq.dll”。
             在搜索路径位置“{TargetFrameworkDirectory}”找到引用。
                 用于 SearchPath“D:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\System.Xml.Linq.winmd”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\System.Xml.Linq.dll”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\System.Xml.Linq.exe”，但它不存在。
                 用于 SearchPath“{TargetFrameworkDirectory}”。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.Xml.Linq.winmd”，但它不存在。
             “UnityEngine.UI”所必需的。
             此引用不是“CopyLocal”，因为它是系统必备文件。
         依赖项“Bee.BeeDriver, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“Bee.BeeDriver, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“D:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Bee.BeeDriver.exe”，但它不存在。
                 用于 SearchPath“{TargetFrameworkDirectory}”。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Bee.BeeDriver.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\Bee.BeeDriver.exe”，但它不存在。
                 用于 SearchPath“{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8}”。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\Bee.BeeDriver.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\Bee.BeeDriver.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\Bee.BeeDriver.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\Bee.BeeDriver.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\Bee.BeeDriver.exe”，但它不存在。
                 用于 SearchPath“{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx}”。
                 已考虑 AssemblyFoldersEx 位置。
                 用于 SearchPath“{AssemblyFolders}”。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\Bee.BeeDriver.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\Bee.BeeDriver.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\Bee.BeeDriver.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\Bee.BeeDriver.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\Bee.BeeDriver.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\Bee.BeeDriver.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\Bee.BeeDriver.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\Bee.BeeDriver.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\Bee.BeeDriver.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\Bee.BeeDriver.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\Bee.BeeDriver.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\Bee.BeeDriver.exe”，但它不存在。
                 用于 SearchPath“{GAC}”。
                 已考虑使用“Bee.BeeDriver, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”，但未在 GAC 中找到它。
                 用于 SearchPath“bin\Debug\”。
                 已考虑使用“bin\Debug\Bee.BeeDriver.winmd”，但它不存在。
                 已考虑使用“bin\Debug\Bee.BeeDriver.dll”，但它不存在。
                 已考虑使用“bin\Debug\Bee.BeeDriver.exe”，但它不存在。
             “UnityEngine.UI”所必需的。
         依赖项“PlayerBuildProgramLibrary.Data, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“PlayerBuildProgramLibrary.Data, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“D:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 用于 SearchPath“{TargetFrameworkDirectory}”。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 用于 SearchPath“{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8}”。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 用于 SearchPath“{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx}”。
                 已考虑 AssemblyFoldersEx 位置。
                 用于 SearchPath“{AssemblyFolders}”。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
                 用于 SearchPath“{GAC}”。
                 已考虑使用“PlayerBuildProgramLibrary.Data, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”，但未在 GAC 中找到它。
                 用于 SearchPath“bin\Debug\”。
                 已考虑使用“bin\Debug\PlayerBuildProgramLibrary.Data.winmd”，但它不存在。
                 已考虑使用“bin\Debug\PlayerBuildProgramLibrary.Data.dll”，但它不存在。
                 已考虑使用“bin\Debug\PlayerBuildProgramLibrary.Data.exe”，但它不存在。
             “UnityEngine.UI”所必需的。
         依赖项“ExCSS.Unity, Version=2.0.6.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“ExCSS.Unity, Version=2.0.6.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“D:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\ExCSS.Unity.exe”，但它不存在。
                 用于 SearchPath“{TargetFrameworkDirectory}”。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\ExCSS.Unity.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\ExCSS.Unity.exe”，但它不存在。
                 用于 SearchPath“{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8}”。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\ExCSS.Unity.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\ExCSS.Unity.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\ExCSS.Unity.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\ExCSS.Unity.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\ExCSS.Unity.exe”，但它不存在。
                 用于 SearchPath“{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx}”。
                 已考虑 AssemblyFoldersEx 位置。
                 用于 SearchPath“{AssemblyFolders}”。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\ExCSS.Unity.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\ExCSS.Unity.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\ExCSS.Unity.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\ExCSS.Unity.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\ExCSS.Unity.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\ExCSS.Unity.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\ExCSS.Unity.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\ExCSS.Unity.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\ExCSS.Unity.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\ExCSS.Unity.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\ExCSS.Unity.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\ExCSS.Unity.exe”，但它不存在。
                 用于 SearchPath“{GAC}”。
                 已考虑使用“ExCSS.Unity, Version=2.0.6.0, Culture=neutral, PublicKeyToken=null”，但未在 GAC 中找到它。
                 用于 SearchPath“bin\Debug\”。
                 已考虑使用“bin\Debug\ExCSS.Unity.winmd”，但它不存在。
                 已考虑使用“bin\Debug\ExCSS.Unity.dll”，但它不存在。
                 已考虑使用“bin\Debug\ExCSS.Unity.exe”，但它不存在。
             “UnityEngine.UI”所必需的。
         依赖项“Unity.CompilationPipeline.Common, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“Unity.CompilationPipeline.Common, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“D:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 用于 SearchPath“{TargetFrameworkDirectory}”。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 用于 SearchPath“{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8}”。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 用于 SearchPath“{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx}”。
                 已考虑 AssemblyFoldersEx 位置。
                 用于 SearchPath“{AssemblyFolders}”。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\Unity.CompilationPipeline.Common.exe”，但它不存在。
                 用于 SearchPath“{GAC}”。
                 已考虑使用“Unity.CompilationPipeline.Common, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”，但未在 GAC 中找到它。
                 用于 SearchPath“bin\Debug\”。
                 已考虑使用“bin\Debug\Unity.CompilationPipeline.Common.winmd”，但它不存在。
                 已考虑使用“bin\Debug\Unity.CompilationPipeline.Common.dll”，但它不存在。
                 已考虑使用“bin\Debug\Unity.CompilationPipeline.Common.exe”，但它不存在。
             “UnityEngine.UI”所必需的。
         依赖项“ScriptCompilationBuildProgram.Data, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“ScriptCompilationBuildProgram.Data, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“D:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 用于 SearchPath“{TargetFrameworkDirectory}”。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 用于 SearchPath“{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8}”。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 用于 SearchPath“{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx}”。
                 已考虑 AssemblyFoldersEx 位置。
                 用于 SearchPath“{AssemblyFolders}”。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
                 用于 SearchPath“{GAC}”。
                 已考虑使用“ScriptCompilationBuildProgram.Data, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”，但未在 GAC 中找到它。
                 用于 SearchPath“bin\Debug\”。
                 已考虑使用“bin\Debug\ScriptCompilationBuildProgram.Data.winmd”，但它不存在。
                 已考虑使用“bin\Debug\ScriptCompilationBuildProgram.Data.dll”，但它不存在。
                 已考虑使用“bin\Debug\ScriptCompilationBuildProgram.Data.exe”，但它不存在。
             “UnityEngine.UI”所必需的。
         依赖项“BeeBuildProgramCommon.Data, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“BeeBuildProgramCommon.Data, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“D:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 用于 SearchPath“{TargetFrameworkDirectory}”。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 用于 SearchPath“{AssemblyFoldersFromConfig:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\AssemblyFolders.config,v4.8}”。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\SqlDb\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\PublicAssemblies\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.5\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v4.0\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\ReferenceAssemblies\v2.0\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 用于 SearchPath“{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx}”。
                 已考虑 AssemblyFoldersEx 位置。
                 用于 SearchPath“{AssemblyFolders}”。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2903.0\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2904.0\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2905.0\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2906.0\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2907.0\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2908.0\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2909.0\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2910.0\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“C:\windows\Microsoft.NET\DirectX for Managed Code\1.0.2911.0\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5\BeeBuildProgramCommon.Data.exe”，但它不存在。
                 用于 SearchPath“{GAC}”。
                 已考虑使用“BeeBuildProgramCommon.Data, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”，但未在 GAC 中找到它。
                 用于 SearchPath“bin\Debug\”。
                 已考虑使用“bin\Debug\BeeBuildProgramCommon.Data.winmd”，但它不存在。
                 已考虑使用“bin\Debug\BeeBuildProgramCommon.Data.dll”，但它不存在。
                 已考虑使用“bin\Debug\BeeBuildProgramCommon.Data.exe”，但它不存在。
             “UnityEngine.UI”所必需的。
         依赖项“System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.Runtime.Serialization.dll”。
             在搜索路径位置“{TargetFrameworkDirectory}”找到引用。
                 用于 SearchPath“D:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\System.Runtime.Serialization.winmd”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\System.Runtime.Serialization.dll”，但它不存在。
                 已考虑使用“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\System.Runtime.Serialization.exe”，但它不存在。
                 用于 SearchPath“{TargetFrameworkDirectory}”。
                 已考虑使用“C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.Runtime.Serialization.winmd”，但它不存在。
             “UnityEngine.UI”所必需的。
             此引用不是“CopyLocal”，因为它是系统必备文件。
         AssemblyFoldersEx 位置:“{Registry:Software\Microsoft\.NETFramework,v4.8,AssemblyFoldersEx}”
                 C:\Program Files (x86)\Microsoft.NET\Primary Interop Assemblies\
                 D:\GtkSharp\2.12\lib\Mono.Posix
                 D:\GtkSharp\2.12\lib\Mono.Cairo
                 D:\GtkSharp\2.12\lib\gtk-sharp-2.0
                 D:\AwesomiumSDK\1.6.6\wrappers\Awesomium.NET\Assemblies\
                 C:\Program Files (x86)\Common Files\Microsoft Shared\MSEnv\PublicAssemblies
                 C:\Program Files (x86)\Microsoft Chart Controls\Assemblies
       已完成执行任务“ResolveAssemblyReference”的操作。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“ResolveAssemblyReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateBindingRedirects”；('$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true')的计算结果为('true' == 'true' and '' == 'true')。
       已跳过目标“ResolveAssemblyReferences”。以前的生成已成功。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\Microsoft.NET.Build.Extensions.NETFramework.targets”中的目标“_RemoveZipFileSuggestedRedirect”(目标“GenerateBindingRedirects”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“_RemoveZipFileSuggestedRedirect”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateBindingRedirectsUpdateAppConfig”；('$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true' and Exists('$(_GenerateBindingRedirectsIntermediateAppConfig)'))的计算结果为('true' == 'true' and '' == 'true' and Exists('obj\Debug\GameKernel.dll.config'))。
       由于条件的计算结果为 false，已跳过目标“ResolveComReferences”；('@(COMReference)'!='' or '@(COMFileReference)'!='')的计算结果为(''!='' or ''!='')。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterResolveReferences”(目标“ResolveReferences”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“AfterResolveReferences”的操作。
       已跳过目标“GetReferenceAssemblyPaths”。以前的生成已成功。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.NETFramework.CurrentVersion.targets”中的目标“ImplicitlyExpandDesignTimeFacades”(目标“ResolveReferences”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“ImplicitlyExpandDesignTimeFacades”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveTestReferences”；('@(Shadow)'!='')的计算结果为(''!='')。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveReferences”(目标“CoreBuild”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“ResolveReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveNuGetPackageAssets”；('$(ResolveNuGetPackages)' == 'true' and exists('$(ProjectLockFile)'))的计算结果为('true' == 'true' and exists('obj\project.assets.json'))。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets”中的目标“ValidationExtension”(目标“PrepareResources”依赖于它):
       由于 false 条件，已跳过任务“WorkflowBuildMessageTask”；('$(SkipWorkflowValidation)'!='' and '$(SkipWorkflowValidation)'!='true' and '$(SkipWorkflowValidation)'!='false')计算为(''!='' and ''!='true' and ''!='false')。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“ValidationExtension”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets”中的目标“ExpressionBuildExtension”(目标“PrepareResources”依赖于它):
       由于 false 条件，已跳过任务“WorkflowBuildMessageTask”；('$(DisableWorkflowCompiledExpressions)'!='' and '$(DisableWorkflowCompiledExpressions)'!='true' and '$(DisableWorkflowCompiledExpressions)'!='false')计算为(''!='' and ''!='true' and ''!='false')。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“ExpressionBuildExtension”的操作。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompilePass1”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileReadGeneratedFileList”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileAddFilesGenerated”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompilePass2”；('$(XamlRequiresCompilationPass2)' == 'true' )的计算结果为('false' == 'true' )。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileReadPass2Flag”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileAddExtensionFilesGenerated”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“AddDeferredValidationErrorsFileToFileWrites”；(Exists('$(DeferredValidationErrorsFileName)'))的计算结果为(Exists('obj\Debug\\AC2C1ABA-CCF6-44D4-8127-588FD4D0A860-DeferredValidationErrors.xml'))。
       由于条件的计算结果为 false，已跳过目标“ReportValidationBuildExtensionErrors”；('$(SkipWorkflowValidation)' != 'true' and ('@(XamlPage)' != '' or '@(XamlAppDef)' != ''))的计算结果为('' != 'true' and ('' != '' or '' != ''))。
       由于条件的计算结果为 false，已跳过目标“MarkupCompilePass1”；('@(Page)' != '' or '@(ApplicationDefinition)' != '' )的计算结果为('' != '' or '' != '' )。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets”中的目标“AfterMarkupCompilePass1”(目标“PrepareResources”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“AfterMarkupCompilePass1”的操作。
       由于条件的计算结果为 false，已跳过目标“MarkupCompilePass2ForMainAssembly”；('$(_RequireMCPass2ForMainAssembly)' == 'true' )的计算结果为('false' == 'true' )。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets”中的目标“FileClassification”(目标“PrepareResources”依赖于它):
       由于 false 条件，已跳过任务“FileClassifier”；('@(GeneratedBaml)' != '' or '@(Resource)' != '' or '@(Font)' != '')计算为('' != '' or '' != '' or '' != '')。
       由于 false 条件，已跳过任务“Message”；('$(MSBuildTargetsVerbose)'=='true')计算为(''=='true')。
       由于 false 条件，已跳过任务“Message”；('$(MSBuildTargetsVerbose)'=='true')计算为(''=='true')。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“FileClassification”的操作。
       由于条件的计算结果为 false，已跳过目标“MainResourcesGeneration”；('@(MainEmbeddedFiles)' != '')的计算结果为('' != '')。
       由于条件的计算结果为 false，已跳过目标“AssignWinFXEmbeddedResource”；('@(WinFXEmbeddedResource)' != '')的计算结果为('' != '')。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“CopyAdditionalFiles”(目标“AssignTargetPaths”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“CopyAdditionalFiles”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AssignTargetPaths”(目标“PrepareResourceNames”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“AssignTargetPath”任务。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       由于 false 条件，已跳过任务“AssignTargetPath”；('@(_DeploymentBaseManifestWithTargetPath)'=='' and '%(None.Extension)'=='.manifest')计算为(''=='' and ''=='.manifest')。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“AssignTargetPaths”的操作。
       已跳过目标“AssignTargetPaths”。以前的生成已成功。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“SplitResourcesByCulture”(目标“PrepareResourceNames”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ResxWithNoCulture)'!='')计算为(''!='')。
       由于 false 条件，已跳过任务“Warning”；('@(ResxWithCulture)'!='')计算为(''!='')。
       由于 false 条件，已跳过任务“Warning”；('@(NonResxWithCulture)'!='')计算为(''!='')。
       由于 false 条件，已跳过任务“Warning”；('@(NonResxWithNoCulture)'!='')计算为(''!='')。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“AssignCulture”任务。
       任务“AssignCulture”
       已完成执行任务“AssignCulture”的操作。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“SplitResourcesByCulture”的操作。
       由于条件的计算结果为 false，已跳过目标“CreateManifestResourceNames”；('@(EmbeddedResource)' != '')的计算结果为('' != '')。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CreateCustomManifestResourceNames”(目标“PrepareResourceNames”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“CreateCustomManifestResourceNames”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareResourceNames”(目标“PrepareResources”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“PrepareResourceNames”的操作。
       已跳过目标“ResolveAssemblyReferences”。以前的生成已成功。
       已跳过目标“SplitResourcesByCulture”。以前的生成已成功。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeResGen”(目标“ResGen”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“BeforeResGen”的操作。
       已跳过目标“ResolveReferences”。以前的生成已成功。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“FindReferenceAssembliesForReferences”(目标“CoreResGen”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“FindReferenceAssembliesForReferences”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CoreResGen”(目标“ResGen”依赖于它):
       由于 false 条件，已跳过任务“GenerateResource”；('%(EmbeddedResource.Type)' == 'Resx' and '%(EmbeddedResource.GenerateResource)' != 'false' and '$(GenerateResourceMSBuildRuntime)' != 'CLR2')计算为('' == 'Resx' and '' != 'false' and 'CurrentRuntime' != 'CLR2')。
       由于 false 条件，已跳过任务“GenerateResource”；('%(EmbeddedResource.Type)' == 'Resx' and '%(EmbeddedResource.GenerateResource)' != 'false' and '$(GenerateResourceMSBuildRuntime)' == 'CLR2')计算为('' == 'Resx' and '' != 'false' and 'CurrentRuntime' == 'CLR2')。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“CoreResGen”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterResGen”(目标“ResGen”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“AfterResGen”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResGen”(目标“PrepareResources”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“ResGen”的操作。
       由于条件的计算结果为 false，已跳过目标“CompileLicxFiles”；('@(_LicxFile)'!='')的计算结果为(''!='')。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareResources”(目标“CoreBuild”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“PrepareResources”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveKeySource”；($(SignManifests) == 'true' or $(SignAssembly) == 'true')的计算结果为( == 'true' or  == 'true')。
       已跳过目标“ResolveReferences”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“ResolveKeySource”；($(SignManifests) == 'true' or $(SignAssembly) == 'true')的计算结果为( == 'true' or  == 'true')。
       由于条件的计算结果为 false，已跳过目标“ResolveComReferences”；('@(COMReference)'!='' or '@(COMFileReference)'!='')的计算结果为(''!='' or ''!='')。
       由于条件的计算结果为 false，已跳过目标“ResolveNativeReferences”；('@(NativeReference)'!='')的计算结果为(''!='')。
       由于条件的计算结果为 false，已跳过目标“_SetExternalWin32ManifestProperties”；('$(GenerateClickOnceManifests)'=='true' or '@(NativeReference)'!='' or '@(ResolvedIsolatedComModules)'!='')的计算结果为(''=='true' or ''!='' or ''!='')。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_SetEmbeddedWin32ManifestProperties”(目标“SetWin32ManifestProperties”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“GetFrameworkPath”任务。
       任务“GetFrameworkPath”
       已完成执行任务“GetFrameworkPath”的操作。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“_SetEmbeddedWin32ManifestProperties”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“SetWin32ManifestProperties”(目标“Compile”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“SetWin32ManifestProperties”的操作。
       已跳过目标“FindReferenceAssembliesForReferences”。以前的生成已成功。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GenerateCompileInputs”(目标“Compile”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ManifestResourceWithNoCulture)'!='' and '%(ManifestResourceWithNoCulture.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
       由于 false 条件，已跳过任务“Warning”；('@(ManifestNonResxWithNoCultureOnDisk)'!='' and '%(ManifestNonResxWithNoCultureOnDisk.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“_GenerateCompileInputs”的操作。
       已跳过目标“PrepareForBuild”。以前的生成已成功。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“GenerateMSBuildEditorConfigFileShouldRun”(目标“GenerateMSBuildEditorConfigFile”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“GenerateMSBuildEditorConfigFileShouldRun”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateMSBuildEditorConfigFileCore”；('$(_GeneratedEditorConfigShouldRun)' == 'true')的计算结果为('' == 'true')。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“GenerateMSBuildEditorConfigFile”(目标“BeforeCompile”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“GenerateMSBuildEditorConfigFile”的操作。
       已跳过目标“PrepareForBuild”。以前的生成已成功。
       已跳过目标“GetReferenceAssemblyPaths”。以前的生成已成功。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.CSharp.CurrentVersion.targets”中的目标“_SetTargetFrameworkMonikerAttribute”(目标“GenerateTargetFrameworkMonikerAttribute”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“_SetTargetFrameworkMonikerAttribute”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GenerateTargetFrameworkMonikerAttribute”(目标“BeforeCompile”依赖于它):
       正在跳过目标“GenerateTargetFrameworkMonikerAttribute”，因为所有输出文件相对于输入文件而言都是最新的。
       输入文件:C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.targets
       输出文件:obj\Debug\.NETFramework,Version=v4.8.AssemblyAttributes.cs
   4:2>已完成在项目“GameKernel.csproj”中生成目标“GenerateTargetFrameworkMonikerAttribute”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateAdditionalSources”；('@(AssemblyAttributes)' != '' and '$(GenerateAdditionalSources)' == 'true')的计算结果为('' != '' and '' == 'true')。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeCompile”(目标“Compile”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“BeforeCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“_TimeStampBeforeCompile”；('$(RunPostBuildEvent)'=='OnOutputUpdated' or ('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library'))的计算结果为(''=='OnOutputUpdated' or (''=='true' and 'Library'=='library'))。
       已跳过目标“ResolveAssemblyReferences”。以前的生成已成功。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GenerateCompileDependencyCache”(目标“Compile”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Hash”任务。
       任务“Hash”
       已完成执行任务“Hash”的操作。
       任务“WriteLinesToFile”
       已完成执行任务“WriteLinesToFile”的操作。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“_GenerateCompileDependencyCache”的操作。
       由于条件的计算结果为 false，已跳过目标“_ComputeNonExistentFileProperty”；(('$(BuildingInsideVisualStudio)' == 'true') and ('$(BuildingOutOfProcess)' != 'true') and (('$(BuildingProject)' == 'false') or ('$(UseHostCompilerIfAvailable)' == 'true')))的计算结果为(('' == 'true') and ('' != 'true') and (('true' == 'false') or ('true' == 'true')))。
       由于条件的计算结果为 false，已跳过目标“ResolveCodeAnalysisRuleSet”；('$(CodeAnalysisRuleSet)' != '')的计算结果为('' != '')。
       由于条件的计算结果为 false，已跳过目标“ShimReferencePathsWhenCommonTargetsDoesNotUnderstandReferenceAssemblies”；('@(ReferencePathWithRefAssemblies)' == '')的计算结果为('D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\Common.dll;D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll;D:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll;...' == '')。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“_BeforeVBCSCoreCompile”(目标“CoreCompile”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“_BeforeVBCSCoreCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“ShimReferencePathsWhenCommonTargetsDoesNotUnderstandReferenceAssemblies”；('@(ReferencePathWithRefAssemblies)' == '')的计算结果为('D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\Common.dll;D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll;D:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll;...' == '')。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“_ComputeSkipAnalyzers”(目标“CoreCompile”依赖于它):
       由于 false 条件，已跳过任务“ShowMessageForImplicitlySkipAnalyzers”；('$(_ImplicitlySkipAnalyzers)' == 'true')计算为('' == 'true')。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“_ComputeSkipAnalyzers”的操作。
       由于条件的计算结果为 false，已跳过目标“_SetPathMapFromSourceRoots”；('$(DeterministicSourcePaths)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“CreateCompilerGeneratedFilesOutputPath”；('$(EmitCompilerGeneratedFiles)' == 'true' and !('$(DesignTimeBuild)' == 'true' OR '$(BuildingProject)' != 'true'))的计算结果为('false' == 'true' and !('' == 'true' OR 'true' != 'true'))。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.ServiceModel.targets”中的目标“PreXsdCodeGen”(目标“CoreCompile”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“CallTarget”任务。
       任务“CallTarget”
       已跳过目标“CleanXsdCodeGen”。以前的生成已成功。
       已完成执行任务“CallTarget”的操作。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“PreXsdCodeGen”的操作。
       由于条件的计算结果为 false，已跳过目标“XsdCodeGen”；( '$(XsdCodeGenPreCondition)' == 'True' )的计算结果为( 'False' == 'True' )。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets”中的目标“CoreCompile”(目标“Compile”依赖于它):
       正在完全生成目标“CoreCompile”。
       输出文件“obj\Debug\GameKernel.dll”不存在。
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Build.Tasks.CodeAnalysis.dll”中的“Csc”任务。
       任务“Csc”
         C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\csc.exe /noconfig /unsafe+ /nowarn:1701,1702 /fullpaths /nostdlib+ /errorreport:prompt /warn:4 /define:TRACE;DEBUG;ROBOT /highentropyva+ /reference:D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\Common.dll /reference:D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll /reference:D:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\mscorlib.dll" /reference:D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\StoryScript.dll /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.Core.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\System.dll" /reference:D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll /reference:D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.UI.dll /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.8\Facades\netstandard.dll" /debug+ /debug:full /filealign:512 /optimize- /out:obj\Debug\GameKernel.dll /subsystemversion:6.00 /target:library /utf8output /langversion:7.3 Ai\AiCommand.cs Ai\AiLogicUtility.cs Ai\AiRegister.cs Scene\ObjectKdTree.cs Scene\SceneSystem.cs GameObjects\ObjectInfo\Entity_NpcType.cs Scene\SceneSystem_Ai.cs Scene\SceneSystem_Entity.cs GameController.cs GameObjects\AiInfo\AiInfo.cs GameObjects\AiInfo\NpcAiData.cs GameObjects\EntityInfoDictionary.cs GameObjects\EntityManager.cs GameObjects\EntityKdTree.cs GameObjects\MovementInfo\MovementInfo.cs GameObjects\ObjectInfo\CharacterDefines.cs GameObjects\ObjectInfo\CharacterProperty.cs GameObjects\ObjectInfo\Entity_Base.cs GameObjects\ObjectInfo\Entity_Npc.cs GameObjects\SceneSharedData\BlackBoard.cs GameObjectViews\EntityViewModelManager.cs GameObjectViews\EntityViewModel_Base.cs GameObjectViews\EntityViewModel_Npc.cs GmCommands\ClientGmStorySystem.cs GmCommands\GmCommands.cs Properties\AssemblyInfo.cs Resource\AbstractScriptBehavior.cs Resource\ResourceSystem.cs Ai\AiCommand\AiChase.cs Ai\AiCommand\AiGohome.cs Ai\AiCommand\AiKeepAway.cs Ai\AiCommand\AiRandMove.cs Ai\AiValue\AiGetTarget.cs Ai\AiValue\AiNeedChase.cs Ai\AiValue\AiNeedKeepAway.cs Ai\AiValue\AiQuey.cs Ai\AiValue\AiSelectTarget.cs Story\Commands\GameLogicCommands.cs Story\Commands\GeneralCommands.cs Story\ClientStorySystem.cs Story\UiStoryEventHandler.cs Story\UiStoryInitializer.cs Story\Values\GameLogicValues.cs Story\Values\GeneralValues.cs UtilityForClient\Logger.cs UtilityForClient\Utility.cs Story\Commands\NpcCommands.cs Story\Commands\ObjectCommands.cs Story\Values\ObjectValues.cs Story\Values\NpcValues.cs "obj\Debug\.NETFramework,Version=v4.8.AssemblyAttributes.cs"
         Microsoft(R) Visual C# 编译器 版本 4.4.0-6.22565.8 (53091686)
         版权所有(C) Microsoft Corporation。保留所有权利。
         CompilerServer: server - server processed compilation - e1c73b2e-0732-474c-b5c8-97e659949ffb
       已完成执行任务“Csc”的操作。
       由于 false 条件，已跳过任务“CallTarget”；('$(TargetsTriggeredByCompilation)' != '')计算为('' != '')。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“CoreCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“_TouchLastBuildWithSkipAnalyzers”；('$(_SkipAnalyzers)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_TimeStampAfterCompile”；('$(RunPostBuildEvent)'=='OnOutputUpdated' or ('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library'))的计算结果为(''=='OnOutputUpdated' or (''=='true' and 'Library'=='library'))。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterCompile”(目标“Compile”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“AfterCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“PrepareResourcesForSatelliteAssemblies”；('$(UICulture)' != '')的计算结果为('' != '')。
       由于条件的计算结果为 false，已跳过目标“MergeLocalizationDirectives”；('@(GeneratedLocalizationFiles)' !='')的计算结果为('' !='')。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets”中的目标“AfterCompileWinFX”(目标“_AfterCompileWinFXInternal”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“AfterCompileWinFX”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets”中的目标“_AfterCompileWinFXInternal”(目标“Compile”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“_AfterCompileWinFXInternal”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Compile”(目标“CoreBuild”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“Compile”的操作。
       由于条件的计算结果为 false，已跳过目标“DeferredValidation”；('$(SkipWorkflowValidation)' != 'true' and ('@(XamlPage)' != '' or '@(XamlAppDef)' != ''))的计算结果为('' != 'true' and ('' != '' or '' != ''))。
       由于条件的计算结果为 false，已跳过目标“ExportWindowsMDFile”；('$(ExportWinMDFile)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“UnmanagedUnregistration”；((('$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)' or '$(RegisterForComInterop)' != 'true' or '$(OutputType)' != 'library') or
                           ('$(_AssemblyTimestampBeforeCompile)' == '')) and
                          Exists('@(_UnmanagedRegistrationCache)'))的计算结果为((('' != '' or '' != 'true' or 'Library' != 'library') or
                           ('' == '')) and
                          Exists('obj\GameKernel.csproj.UnmanagedRegistration.cache'))。
       由于条件的计算结果为 false，已跳过目标“GenerateSerializationAssemblies”；('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))的计算结果为('Off' == 'On' or (''!='' and 'Off' == 'Auto'))。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GenerateSatelliteAssemblyInputs”(目标“CreateSatelliteAssemblies”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ManifestResourceWithCulture)'!='' and '%(ManifestResourceWithCulture.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
       由于 false 条件，已跳过任务“Warning”；('@(ManifestNonResxWithCultureOnDisk)'!='' and '%(ManifestNonResxWithCultureOnDisk.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“_GenerateSatelliteAssemblyInputs”的操作。
       由于条件的计算结果为 false，已跳过目标“ComputeIntermediateSatelliteAssemblies”；(@(EmbeddedResource->'%(WithCulture)') != '')的计算结果为( != '')。
       由于条件的计算结果为 false，已跳过目标“GenerateSatelliteAssemblies”；('@(_SatelliteAssemblyResourceInputs)' != '' and '$(GenerateSatelliteAssembliesForCore)' != 'true')的计算结果为('' != '' and '' != 'true')。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CreateSatelliteAssemblies”(目标“CoreBuild”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“CreateSatelliteAssemblies”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateManifests”；('$(GenerateClickOnceManifests)'=='true' or '@(NativeReference)'!='' or '@(ResolvedIsolatedComModules)'!='' or '$(GenerateAppxManifest)' == 'true')的计算结果为(''=='true' or ''!='' or ''!='' or '' == 'true')。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetPathWithTargetPlatformMoniker”(目标“GetTargetPath”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“GetTargetPathWithTargetPlatformMoniker”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetPath”(目标“CoreBuild”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“GetTargetPath”的操作。
       由于条件的计算结果为 false，已跳过目标“ComputeIntermediateSatelliteAssemblies”；(@(EmbeddedResource->'%(WithCulture)') != '')的计算结果为( != '')。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CopyFilesMarkedCopyLocal”(目标“CopyFilesToOutputDirectory”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Copy”任务。
       任务“Copy”
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\StoryScript.dll”复制到“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\StoryScript.dll”。
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll”复制到“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\LitJson.dll”。
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll”复制到“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\UnityEngine.dll”。
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\Common.dll”复制到“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\Common.dll”。
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll”复制到“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\Dsl.dll”。
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.UI.dll”复制到“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\UnityEngine.UI.dll”。
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEditor.dll”复制到“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\UnityEditor.dll”。
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\Common.pdb”复制到“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\Common.pdb”。
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\StoryScript.pdb”复制到“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\StoryScript.pdb”。
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.pdb”复制到“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\Dsl.pdb”。
       已完成执行任务“Copy”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Touch”任务。
       任务“Touch”
         正在创建“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\obj\Debug\GameKernel.csproj.CopyComplete”，因为已指定“AlwaysCreate”。
       已完成执行任务“Touch”的操作。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“_CopyFilesMarkedCopyLocal”的操作。
       已跳过目标“AssignTargetPaths”。以前的生成已成功。
       已跳过目标“AssignProjectConfiguration”。以前的生成已成功。
       已跳过目标“_SplitProjectReferencesByFileExistence”。以前的生成已成功。
       已跳过目标“_GetProjectReferenceTargetFrameworkProperties”。以前的生成已成功。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”(目标“GetCopyToOutputDirectoryItems”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets”中的目标“GetCopyToOutputDirectoryXamlAppDefs”(目标“GetCopyToOutputDirectoryItems”依赖于它):
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“GetCopyToOutputDirectoryXamlAppDefs”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetCopyToOutputDirectoryItems”(目标“_CopySourceItemsToOutputDirectory”依赖于它):
       任务“CallTarget”
       已跳过目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”。以前的生成已成功。
       已跳过目标“_AddOutputPathToGlobalPropertiesToRemove”。以前的生成已成功。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences”(目标“GetCopyToOutputDirectoryItems”依赖于它):
       任务“MSBuild”
         全局属性:
           Configuration=Debug
           Platform=AnyCPU
         移除项目“..\..\Infrastructure\Common\Common.csproj”的属性:
           TargetFramework
           RuntimeIdentifier
           SelfContained
         移除项目“..\..\Infrastructure\StoryScript\StoryScript.csproj”的属性:
           TargetFramework
           RuntimeIdentifier
           SelfContained
   4:2>项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”(4:2)正在节点 1 上生成“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(2:7) (GetCopyToOutputDirectoryItems 个目标)。
   2:7>已跳过目标“GetCopyToOutputDirectoryItems”。以前的生成已成功。
   2:7>已完成生成项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(GetCopyToOutputDirectoryItems 个目标)的操作。
   4:2>项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”(4:2)正在节点 2 上生成“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(3:7) (GetCopyToOutputDirectoryItems 个目标)。
   3:7>项目文件包含 ToolsVersion="12.0"。此工具集未知或缺失(在此情况下，您可以通过安装合适的 MSBuild 版本来解决此问题)，或者生成可能已被强制到特定的 ToolsVersion (出于策略原因)。将项目视为具有 ToolsVersion="Current"。有关详细信息，请参阅 http://go.microsoft.com/fwlink/?LinkId=293424。
       已跳过目标“GetCopyToOutputDirectoryItems”。以前的生成已成功。
   3:7>已完成生成项目“D:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(GetCopyToOutputDirectoryItems 个目标)的操作。
   4:2>已完成执行任务“MSBuild”的操作。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences”的操作。
       已完成执行任务“CallTarget”的操作。
       任务“CallTarget”
       已跳过目标“AssignTargetPaths”。以前的生成已成功。
       已跳过目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”。以前的生成已成功。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GetCopyToOutputDirectoryItemsFromThisProject”(目标“GetCopyToOutputDirectoryItems”依赖于它):
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“_GetCopyToOutputDirectoryItemsFromThisProject”的操作。
       已完成执行任务“CallTarget”的操作。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“GetCopyToOutputDirectoryItems”的操作。
       由于条件的计算结果为 false，已跳过目标“_CopyOutOfDateSourceItemsToOutputDirectory”；( '@(_SourceItemsToCopyToOutputDirectory)' != '' )的计算结果为( '' != '' )。
       由于条件的计算结果为 false，已跳过目标“_CopyOutOfDateSourceItemsToOutputDirectoryAlways”；( '@(_SourceItemsToCopyToOutputDirectoryAlways)' != '' )的计算结果为( '' != '' )。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CopySourceItemsToOutputDirectory”(目标“CopyFilesToOutputDirectory”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“_CopySourceItemsToOutputDirectory”的操作。
       由于条件的计算结果为 false，已跳过目标“_CopyAppConfigFile”；( '@(AppConfigWithTargetPath)' != '' )的计算结果为( '' != '' )。
       由于条件的计算结果为 false，已跳过目标“_CopyManifestFiles”；( '$(_DeploymentCopyApplicationManifest)'=='true' or '$(GenerateClickOnceManifests)'=='true' )的计算结果为( ''=='true' or ''=='true' )。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CheckForCompileOutputs”(目标“CopyFilesToOutputDirectory”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“_CheckForCompileOutputs”的操作。
       由于条件的计算结果为 false，已跳过目标“_SGenCheckForOutputs”；('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))的计算结果为('Off' == 'On' or (''!='' and 'Off' == 'Auto'))。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CopyFilesToOutputDirectory”(目标“PrepareForRun”依赖于它):
       任务“Copy”
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\obj\Debug\GameKernel.dll”复制到“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\GameKernel.dll”。
       已完成执行任务“Copy”的操作。
       由于 false 条件，已跳过任务“CopyRefAssembly”；('$(ProduceReferenceAssembly)' == 'true' and '$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true')计算为('false' == 'true' and 'true' == 'true' and '' != 'true')。
       任务“Message”
         GameKernel -> D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\GameKernel.dll
       已完成执行任务“Message”的操作。
       由于 false 条件，已跳过任务“Copy”；('@(AddModules)' != '')计算为('' != '')。
       由于 false 条件，已跳过任务“Copy”；('$(_SGenDllCreated)'=='true')计算为('false'=='true')。
       任务“Copy”
         正在将文件从“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\obj\Debug\GameKernel.pdb”复制到“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\bin\Debug\GameKernel.pdb”。
       已完成执行任务“Copy”的操作。
       由于 false 条件，已跳过任务“Copy”；('$(_DocumentationFileProduced)'=='true' and '$(CopyDocumentationFileToOutputDirectory)'=='true')计算为('false'=='true' and 'true'=='true')。
       由于 false 条件，已跳过任务“Copy”；('@(IntermediateSatelliteAssembliesWithTargetPath)' != '')计算为('' != '')。
       由于 false 条件，已跳过任务“Copy”；('@(ReferenceComWrappersToCopyLocal)' != '' or '@(ResolvedIsolatedComModules)' != '' or '@(_DeploymentLooseManifestFile)' != '' or '@(NativeReferenceFile)' != '' )计算为('' != '' or '' != '' or '' != '' or '' != '' )。
       由于 false 条件，已跳过任务“Copy”；('$(SkipCopyWinMDArtifact)' != 'true' and '@(WinMDExpArtifacts)' != '')计算为('' != 'true' and '' != '')。
       由于 false 条件，已跳过任务“Message”；('$(SkipCopyWinMDArtifact)' != 'true' and '$(_WindowsMetadataOutputPath)' != '')计算为('' != 'true' and '' != '')。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“CopyFilesToOutputDirectory”的操作。
       由于条件的计算结果为 false，已跳过目标“RunCodeAnalysis”；('$(RunCodeAnalysisOnThisProject)'=='true')的计算结果为(''=='true')。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareForRun”(目标“CoreBuild”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“PrepareForRun”的操作。
       由于条件的计算结果为 false，已跳过目标“UnmanagedRegistration”；('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library')的计算结果为(''=='true' and 'Library'=='library')。
       已跳过目标“_CheckForCompileOutputs”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“_SGenCheckForOutputs”；('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))的计算结果为('Off' == 'On' or (''!='' and 'Off' == 'Auto'))。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CleanGetCurrentAndPriorFileWrites”(目标“IncrementalClean”依赖于它):
       任务“ReadLinesFromFile”
       已完成执行任务“ReadLinesFromFile”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ConvertToAbsolutePath”任务。
       任务“ConvertToAbsolutePath”
       已完成执行任务“ConvertToAbsolutePath”的操作。
       任务“FindUnderPath”
         比较路径为“D:\GitHub\GameDemo\GameLibrary\App\GameKernel”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“bin\Debug\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“obj\Debug\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“RemoveDuplicates”
       已完成执行任务“RemoveDuplicates”的操作。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“_CleanGetCurrentAndPriorFileWrites”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“IncrementalClean”(目标“CoreBuild”依赖于它):
       任务“FindUnderPath”
         比较路径为“bin\Debug\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“obj\Debug\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“Delete”
       已完成执行任务“Delete”的操作。
       任务“RemoveDuplicates”
       已完成执行任务“RemoveDuplicates”的操作。
       任务“WriteLinesToFile”
       已完成执行任务“WriteLinesToFile”的操作。
   4:2>已完成在项目“GameKernel.csproj”中生成目标“IncrementalClean”的操作。
       由于条件的计算结果为 false，已跳过目标“PostBuildEvent”；('$(PostBuildEvent)' != '' and ('$(RunPostBuildEvent)' != 'OnOutputUpdated' or '$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)'))的计算结果为('' != '' and ('' != 'OnOutputUpdated' or '' != ''))。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CoreBuild”(目标“Build”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“CoreBuild”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterBuild”(目标“Build”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“AfterBuild”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Build”(目标“Rebuild”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“Build”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterRebuild”(目标“Rebuild”依赖于它):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“AfterRebuild”的操作。
   4:2>来自项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Rebuild”(入口点):
   4:2>已完成在项目“GameKernel.csproj”中生成目标“Rebuild”的操作。
   4:2>已完成生成项目“D:\GitHub\GameDemo\GameLibrary\App\GameKernel\GameKernel.csproj”(Rebuild 个目标)的操作。
     1>已完成执行任务“MSBuild”的操作。
     1>已完成在项目“GameLibrary.sln”中生成目标“Rebuild”的操作。
     1>已完成生成项目“D:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”(clean;rebuild 个目标)的操作。

已成功生成。
    0 个警告
    0 个错误

已用时间 00:00:03.46
