生成启动时间为 2024/7/9 2:03:34。
日志记录详细程度设置为: Detailed。     0>进程 = "C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\msbuild.exe"
       MSBuild 可执行文件路径 = "C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\msbuild.exe"
       命令行参数 = ""C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\msbuild.exe" /m /nologo /noconsolelogger /p:Configuration=Debug /flp:LogFile=F:\GitHub\GameDemo\.\Tools\Batch/../../BuildLog/GameLibrary.sln.log;Encoding=UTF-8 /t:clean;rebuild F:\GitHub\GameDemo\.\Tools\Batch/../../GameLibrary/GameLibrary.sln /p:Platform="Any CPU""
       当前目录 = "F:\GitHub\GameDemo"
       MSBuild 版本 = "17.9.8+b34f75857"
       将从自动响应文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\MSBuild.rsp”中读取某些命令行开关。若要禁用此文件，请使用“-noAutoResponse”开关。
       
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\SolutionFile\ImportAfter\*
       程序集加载期间 Evaluation: Microsoft.IO.Redist, Version=6.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.IO.Redist.dll, MVID: d528d43e-4d35-4c28-8aa6-a5ce49a5eba7, AppDomain: [Default])
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets (97,5) 处重新分配属性: $(_GenerateRestoreGraphProjectEntryInputProperties)=“
             ExcludeRestorePackageImports=true;
             _RestoreSolutionFileUsed=true;
             SolutionDir=F:\GitHub\GameDemo\GameLibrary\;
             SolutionName=GameLibrary;
             SolutionFileName=GameLibrary.sln;
             SolutionPath=F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln;
             SolutionExt=.sln;
           ”(先前值:“ExcludeRestorePackageImports=true”)
       项目中不存在 BeforeTargets 特性中的“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets (616,11)”位置列出的目标“_CheckForInvalidConfigurationAndPlatform”，将忽略该目标。
     1>项目“F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”在节点 1 上(clean;rebuild 个目标)。
     1>来自项目“F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”的文件“F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln.metaproj”中的目标“ValidateSolutionConfiguration”(入口点):
     1>由于 false 条件，已跳过任务“Error”；(('$(CurrentSolutionConfigurationContents)' == '') and ('$(SkipInvalidConfigurations)' != 'true'))计算为(('<SolutionConfiguration>
  <ProjectConfiguration Project="{1C8280CD-EB93-4849-940E-A99EDDF811D6}" AbsolutePath="F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
  <ProjectConfiguration Project="{F1D962E1-3B17-4597-B542-BCB657E75829}" AbsolutePath="F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
  <ProjectConfiguration Project="{F5FC4012-CE76-4AD8-B04A-25B1A0BF7EEC}" AbsolutePath="F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
</SolutionConfiguration>' == '') and ('' != 'true'))。
       由于 false 条件，已跳过任务“Warning”；(('$(CurrentSolutionConfigurationContents)' == '') and ('$(SkipInvalidConfigurations)' == 'true'))计算为(('<SolutionConfiguration>
         <ProjectConfiguration Project="{1C8280CD-EB93-4849-940E-A99EDDF811D6}" AbsolutePath="F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
         <ProjectConfiguration Project="{F1D962E1-3B17-4597-B542-BCB657E75829}" AbsolutePath="F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
         <ProjectConfiguration Project="{F5FC4012-CE76-4AD8-B04A-25B1A0BF7EEC}" AbsolutePath="F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
       </SolutionConfiguration>' == '') and ('' == 'true'))。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Message”任务。
       任务“Message”
         正在生成解决方案配置“Debug|Any CPU”。
       已完成执行任务“Message”的操作。
     1>已完成在项目“GameLibrary.sln”中生成目标“ValidateSolutionConfiguration”的操作。
     1>来自项目“F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”的文件“F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln.metaproj”中的目标“ValidateToolsVersions”(入口点):
       由于 false 条件，已跳过任务“Error”；('$(MSBuildToolsVersion)' == '2.0' and ('$(ProjectToolsVersion)' != '2.0' and '$(ProjectToolsVersion)' != ''))计算为('Current' == '2.0' and ('' != '2.0' and '' != ''))。
     1>已完成在项目“GameLibrary.sln”中生成目标“ValidateToolsVersions”的操作。
     1>来自项目“F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”的文件“F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln.metaproj”中的目标“ValidateProjects”(入口点):
     1>已完成在项目“GameLibrary.sln”中生成目标“ValidateProjects”的操作。
     1>来自项目“F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”的文件“F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln.metaproj”中的目标“Clean”(入口点):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“MSBuild”任务。
       任务“MSBuild”
         全局属性:
           BuildingSolutionFile=true
           CurrentSolutionConfigurationContents=<SolutionConfiguration>
           <ProjectConfiguration Project="{1C8280CD-EB93-4849-940E-A99EDDF811D6}" AbsolutePath="F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
           <ProjectConfiguration Project="{F1D962E1-3B17-4597-B542-BCB657E75829}" AbsolutePath="F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
           <ProjectConfiguration Project="{F5FC4012-CE76-4AD8-B04A-25B1A0BF7EEC}" AbsolutePath="F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
         </SolutionConfiguration>
           SolutionDir=F:\GitHub\GameDemo\GameLibrary\
           SolutionExt=.sln
           SolutionFileName=GameLibrary.sln
           SolutionName=GameLibrary
           SolutionPath=F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln
         项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的其他属性:
           Configuration=Debug
           Platform=AnyCPU
         项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的其他属性:
           Configuration=Debug
           Platform=AnyCPU
         项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的其他属性:
           Configuration=Debug
           Platform=AnyCPU
     0>程序集加载期间 Evaluation: mscorlib.resources, Version=4.0.0.0, Culture=zh-Hans, PublicKeyToken=b77a5c561934e089 (位置: C:\WINDOWS\Microsoft.Net\assembly\GAC_MSIL\mscorlib.resources\v4.0_4.0.0.0_zh-Hans_b77a5c561934e089\mscorlib.resources.dll, MVID: aa06a8fb-c6f5-481f-9fc7-63c72753cda3, AppDomain: [Default])
       程序集加载期间 Evaluation: Microsoft.Build.NuGetSdkResolver, Version=6.9.2.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\Microsoft.Build.NuGetSdkResolver.dll, MVID: cabd8e35-fba8-4a13-81e8-bf8b36890c19, AppDomain: [Default])
       程序集加载期间 Evaluation: Microsoft.DotNet.MSBuildSdkResolver, Version=8.0.100.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\SdkResolvers\Microsoft.DotNet.MSBuildSdkResolver\Microsoft.DotNet.MSBuildSdkResolver.dll, MVID: 72936ace-4b22-4b40-b35e-e77b7befab7a, AppDomain: [Default])
       程序集加载期间 Evaluation: Microsoft.Deployment.DotNet.Releases, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\SdkResolvers\Microsoft.DotNet.MSBuildSdkResolver\Microsoft.Deployment.DotNet.Releases.dll, MVID: eb340e0e-b895-41fa-8fc4-c04faee03b3b, AppDomain: [Default])
       程序集加载期间 Evaluation: netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 (位置: C:\WINDOWS\Microsoft.Net\assembly\GAC_MSIL\netstandard\v4.0_2.0.0.0__cc7b13ffcd2ddd51\netstandard.dll, MVID: bd1bf73a-346e-495a-9a4a-81de79e90fff, AppDomain: [Default])
       正在解析 SDK“Microsoft.NET.Sdk”...
       程序集加载期间 Evaluation: Newtonsoft.Json, Version=13.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\SdkResolvers\Microsoft.DotNet.MSBuildSdkResolver\Newtonsoft.Json.dll, MVID: dd21e087-47d9-4bce-bed8-b56112226337, AppDomain: [Default])
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Microsoft.Common.props
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Microsoft.Common.props (60,5) 处重新分配属性: $(MSBuildProjectExtensionsPath)=“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\”(先前值:“obj\”)
       值为“C:\Users\dreamanlan”的属性“USERPROFILE”从环境中展开。
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportBefore\*
       “Configuration”属性是全局属性，不能修改。
       “Platform”属性是全局属性，不能修改。
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       “Configuration”属性是全局属性，不能修改。
       “Platform”属性是全局属性，不能修改。
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.props (91,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};{HintPathFromItem}”(先前值:“{CandidateAssemblyFiles}”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.props (92,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};{HintPathFromItem};{TargetFrameworkDirectory}”(先前值:“{CandidateAssemblyFiles};{HintPathFromItem}”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.props (93,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};{HintPathFromItem};{TargetFrameworkDirectory};{RawFileName}”(先前值:“{CandidateAssemblyFiles};{HintPathFromItem};{TargetFrameworkDirectory}”)
       正在解析 SDK“Microsoft.NET.SDK.WorkloadAutoImportPropsLocator”...
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.PackProjectTool.props (15,5) 处重新分配属性: $(TargetsForTfmSpecificContentInPackage)=“;PackTool;_PackProjectToolValidation”(先前值:“;PackTool”)
       在 F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj (5,5) 处重新分配属性: $(RootNamespace)=“GameLibrary”(先前值:“GameCore”)
       在 F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj (16,5) 处重新分配属性: $(DefineConstants)=“TRACE;DEBUG;ROBOT”(先前值:“TRACE”)
       在 F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj (17,5) 处重新分配属性: $(AllowUnsafeBlocks)=“true”(先前值:“false”)
       “Configuration”属性是全局属性，不能修改。
       “Platform”属性是全局属性，不能修改。
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.ImportPublishProfile.targets (28,5) 处重新分配属性: $(PublishProfileImported)=“false”(先前值:“true”)
       程序集加载期间 Evaluation: NuGet.Frameworks, Version=6.9.2.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Frameworks.dll, MVID: 8ab6ad21-fd86-457b-a520-06e4a811f161, AppDomain: [Default])
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets (69,5) 处重新分配属性: $(TargetPlatformVersion)=“”(先前值:“0.0”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DefaultOutputPaths.targets (122,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**”(先前值:“;bin\Debug\/**”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DefaultOutputPaths.targets (137,5) 处重新分配属性: $(OutputPath)=“bin\Debug\netstandard2.1\”(先前值:“bin\Debug\”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DefaultOutputPaths.targets (142,5) 处重新分配属性: $(IntermediateOutputPath)=“obj\Debug\netstandard2.1\”(先前值:“obj\Debug\”)
       正在解析 SDK“Microsoft.NET.SDK.WorkloadManifestTargetsLocator”...
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.BeforeCommon.targets (192,5) 处重新分配属性: $(_FrameworkVersionForImplicitDefine)=“2_1”(先前值:“2.1”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets (197,5) 处重新分配属性: $(CommandLineArgsForDesignTimeEvaluation)=“-langversion:8.0 -define:TRACE;DEBUG;ROBOT”(先前值:“-langversion:8.0”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (13,5) 处重新分配属性: $(DefineCommonItemSchemas)=“false”(先前值:“true”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (14,5) 处重新分配属性: $(DefineCommonCapabilities)=“false”(先前值:“true”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (15,5) 处重新分配属性: $(DefineCommonReferenceSchemas)=“false”(先前值:“true”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (448,5) 处重新分配属性: $(CollectUpToDateCheckInputDesignTimeDependsOn)=“CompileDesignTime;ResolveCodeAnalysisRuleSet”(先前值:“CompileDesignTime”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (89,5) 处重新分配属性: $(TargetPlatformIdentifier)=“Windows”(先前值:“”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (90,5) 处重新分配属性: $(TargetPlatformVersion)=“7.0”(先前值:“”)
       “Platform”属性是全局属性，不能修改。
       “Configuration”属性是全局属性，不能修改。
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (175,5) 处重新分配属性: $(_DebugSymbolsProduced)=“true”(先前值:“false”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (185,5) 处重新分配属性: $(_DocumentationFileProduced)=“false”(先前值:“true”)
       “SolutionName”属性是全局属性，不能修改。
       “SolutionFileName”属性是全局属性，不能修改。
       “SolutionPath”属性是全局属性，不能修改。
       “SolutionDir”属性是全局属性，不能修改。
       “SolutionExt”属性是全局属性，不能修改。
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (393,5) 处重新分配属性: $(MSBuildCopyMarkerName)=“GameCore.csproj.Up2Date”(先前值:“GameCore.csproj”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (536,5) 处重新分配属性: $(ProcessorArchitecture)=“msil”(先前值:“”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (575,5) 处重新分配属性: $(DelaySign)=“”(先前值:“false”)
       值为“C:\Users\dreamanlan\AppData\Local”的属性“LOCALAPPDATA”从环境中展开。
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (3865,5) 处重新分配属性: $(_SGenGenerateSerializationAssembliesConfig)=“Auto”(先前值:“”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (3866,5) 处重新分配属性: $(_SGenGenerateSerializationAssembliesConfig)=“Off”(先前值:“Auto”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (5032,5) 处重新分配属性: $(_TargetsThatPrepareProjectReferences)=“
             AssignProjectConfiguration;
             _SplitProjectReferencesByFileExistence
           ”(先前值:“_SplitProjectReferencesByFileExistence”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.CodeAnalysis.targets (125,5) 处重新分配属性: $(_CodeAnalysisTreatWarningsAsErrors)=“false”(先前值:“”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.CodeAnalysis.targets (167,9) 处重新分配属性: $(PrepareForRunDependsOn)=“
             CopyFilesToOutputDirectory
           ;RunCodeAnalysis”(先前值:“
             CopyFilesToOutputDirectory
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets (35,5) 处重新分配属性: $(PrepareResourcesDependsOn)=“
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
            
           ”(先前值:“
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets (16,5) 处重新分配属性: $(PrepareResourcesDependsOn)=“
             ValidationExtension;
             ExpressionBuildExtension;
             
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
            
           
           ”(先前值:“
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
            
           ”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\TeamTest\Microsoft.TeamTest.targets (4,5) 处重新分配属性: $(ResolveReferencesDependsOn)=“
             
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             GenerateBindingRedirectsUpdateAppConfig;
             ResolveComReferences;
             AfterResolveReferences
           ;
             ResolveTestReferences
           ”(先前值:“
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             GenerateBindingRedirectsUpdateAppConfig;
             ResolveComReferences;
             AfterResolveReferences
           ”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Microsoft.Common.targets\ImportAfter\*
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\WebTools.Aspire\Microsoft.WebTools.Aspire.targets
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\WebTools.Aspire\Microsoft.WebTools.Aspire.targets (25,5) 处重新分配属性: $(JsonSchemaCombinedFilePath)=“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\CombinedComponentSchema.json”(先前值:“obj\Debug\netstandard2.1\\CombinedComponentSchema.json”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\WebTools.Aspire\Microsoft.WebTools.Aspire.targets (27,5) 处重新分配属性: $(AppSettingsJsonSchemaCombinedFilePath)=“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\AppSettingsSchema.json”(先前值:“obj\Debug\netstandard2.1\\AppSettingsSchema.json”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets (29,5) 处重新分配属性: $(ProjectAssetsCacheFile)=“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\GameCore.assets.cache”(先前值:“obj\Debug\netstandard2.1\GameCore.assets.cache”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets (80,5) 处重新分配属性: $(ResolveAssemblyReferencesDependsOn)=“
             
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ;
             ResolvePackageDependenciesForBuild;
             _HandlePackageFileConflicts;
           ”(先前值:“
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets (86,5) 处重新分配属性: $(PrepareResourcesDependsOn)=“
             ResolvePackageDependenciesForBuild;
             _HandlePackageFileConflicts;
             
             ValidationExtension;
             ExpressionBuildExtension;
             
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
            
           
           
           ”(先前值:“
             ValidationExtension;
             ExpressionBuildExtension;
             
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
            
           
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (27,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**”(先前值:“;bin\Debug\/**;obj\Debug\/**”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (29,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**”(先前值:“;bin\Debug\/**;obj\Debug\/**;bin\/**”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (32,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user”(先前值:“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (33,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj”(先前值:“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (34,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj;**/*.sln”(先前值:“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (35,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj;**/*.sln;**/*.vssscc”(先前值:“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj;**/*.sln”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (36,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj;**/*.sln;**/*.vssscc;**/.DS_Store”(先前值:“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj;**/*.sln;**/*.vssscc”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets (14,5) 处重新分配属性: $(ResolveAssemblyReferencesDependsOn)=“
             
             
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ;
             ResolvePackageDependenciesForBuild;
             _HandlePackageFileConflicts;
           ;
             ResolveTargetingPackAssets;
           ”(先前值:“
             
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ;
             ResolvePackageDependenciesForBuild;
             _HandlePackageFileConflicts;
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (44,5) 处重新分配属性: $(_GenerateRuntimeConfigurationPropertyInputsCache)=“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\GameCore.genruntimeconfig.cache”(先前值:“obj\Debug\netstandard2.1\GameCore.genruntimeconfig.cache”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (46,5) 处重新分配属性: $(_GeneratePublishDependencyFilePropertyInputsCache)=“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\GameCore.genpublishdeps.cache”(先前值:“obj\Debug\netstandard2.1\GameCore.genpublishdeps.cache”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (48,5) 处重新分配属性: $(_GenerateSingleFileBundlePropertyInputsCache)=“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\GameCore.genbundle.cache”(先前值:“obj\Debug\netstandard2.1\GameCore.genbundle.cache”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (97,5) 处重新分配属性: $(_DefaultUserProfileRuntimeStorePath)=“C:\Users\dreamanlan”(先前值:“”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (98,5) 处重新分配属性: $(_DefaultUserProfileRuntimeStorePath)=“C:\Users\dreamanlan\.dotnet\store”(先前值:“C:\Users\dreamanlan”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (197,5) 处重新分配属性: $(CoreBuildDependsOn)=“
             _CheckForBuildWithNoBuild;
             
             BuildOnlySettings;
             PrepareForBuild;
             PreBuildEvent;
             ResolveReferences;
             PrepareResources;
             ResolveKeySource;
             Compile;
             ExportWindowsMDFile;
             UnmanagedUnregistration;
             GenerateSerializationAssemblies;
             CreateSatelliteAssemblies;
             GenerateManifests;
             GetTargetPath;
             PrepareForRun;
             UnmanagedRegistration;
             IncrementalClean;
             PostBuildEvent
           ;
             GenerateBuildDependencyFile;
             GenerateBuildRuntimeConfigurationFiles
           ”(先前值:“
             BuildOnlySettings;
             PrepareForBuild;
             PreBuildEvent;
             ResolveReferences;
             PrepareResources;
             ResolveKeySource;
             Compile;
             ExportWindowsMDFile;
             UnmanagedUnregistration;
             GenerateSerializationAssemblies;
             CreateSatelliteAssemblies;
             GenerateManifests;
             GetTargetPath;
             PrepareForRun;
             UnmanagedRegistration;
             IncrementalClean;
             PostBuildEvent
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (206,5) 处重新分配属性: $(CoreCleanDependsOn)=“
             _SdkBeforeClean;
             
           ”(先前值:“”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (213,5) 处重新分配属性: $(RebuildDependsOn)=“
             _SdkBeforeRebuild;
             
             BeforeRebuild;
             Clean;
             Build;
             AfterRebuild;
           
           ”(先前值:“
             BeforeRebuild;
             Clean;
             Build;
             AfterRebuild;
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (679,5) 处重新分配属性: $(CompileDependsOn)=“
             
             ResolveReferences;
             ResolveKeySource;
             SetWin32ManifestProperties;
             FindReferenceAssembliesForReferences;
             _GenerateCompileInputs;
             BeforeCompile;
             _TimeStampBeforeCompile;
             _GenerateCompileDependencyCache;
             CoreCompile;
             _TimeStampAfterCompile;
             AfterCompile;
           ;
             _CreateAppHost;
             _CreateComHost;
             _GetIjwHostPaths;
           ”(先前值:“
             ResolveReferences;
             ResolveKeySource;
             SetWin32ManifestProperties;
             FindReferenceAssembliesForReferences;
             _GenerateCompileInputs;
             BeforeCompile;
             _TimeStampBeforeCompile;
             _GenerateCompileDependencyCache;
             CoreCompile;
             _TimeStampAfterCompile;
             AfterCompile;
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (1065,5) 处重新分配属性: $(CreateSatelliteAssembliesDependsOn)=“
             
             _GenerateSatelliteAssemblyInputs;
             ComputeIntermediateSatelliteAssemblies;
             GenerateSatelliteAssemblies
           ;
             CoreGenerateSatelliteAssemblies
           ”(先前值:“
             _GenerateSatelliteAssemblyInputs;
             ComputeIntermediateSatelliteAssemblies;
             GenerateSatelliteAssemblies
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\Microsoft.SourceLink.GitLab.targets (12,5) 处重新分配属性: $(SourceLinkUrlInitializerTargets)=“;_InitializeGitHubSourceLinkUrl;_InitializeGitLabSourceLinkUrl”(先前值:“;_InitializeGitHubSourceLinkUrl”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\Microsoft.SourceLink.GitLab.targets (13,5) 处重新分配属性: $(SourceControlManagerUrlTranslationTargets)=“;TranslateGitHubUrlsInSourceControlInformation;TranslateGitLabUrlsInSourceControlInformation”(先前值:“;TranslateGitHubUrlsInSourceControlInformation”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\Microsoft.SourceLink.AzureRepos.Git.targets (12,5) 处重新分配属性: $(SourceLinkUrlInitializerTargets)=“;_InitializeGitHubSourceLinkUrl;_InitializeGitLabSourceLinkUrl;_InitializeAzureReposGitSourceLinkUrl”(先前值:“;_InitializeGitHubSourceLinkUrl;_InitializeGitLabSourceLinkUrl”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\Microsoft.SourceLink.AzureRepos.Git.targets (13,5) 处重新分配属性: $(SourceControlManagerUrlTranslationTargets)=“;TranslateGitHubUrlsInSourceControlInformation;TranslateGitLabUrlsInSourceControlInformation;TranslateAzureReposGitUrlsInSourceControlInformation”(先前值:“;TranslateGitHubUrlsInSourceControlInformation;TranslateGitLabUrlsInSourceControlInformation”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\Microsoft.SourceLink.Bitbucket.Git.targets (12,5) 处重新分配属性: $(SourceLinkUrlInitializerTargets)=“;_InitializeGitHubSourceLinkUrl;_InitializeGitLabSourceLinkUrl;_InitializeAzureReposGitSourceLinkUrl;_InitializeBitbucketGitSourceLinkUrl”(先前值:“;_InitializeGitHubSourceLinkUrl;_InitializeGitLabSourceLinkUrl;_InitializeAzureReposGitSourceLinkUrl”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\Microsoft.SourceLink.Bitbucket.Git.targets (13,5) 处重新分配属性: $(SourceControlManagerUrlTranslationTargets)=“;TranslateGitHubUrlsInSourceControlInformation;TranslateGitLabUrlsInSourceControlInformation;TranslateAzureReposGitUrlsInSourceControlInformation;TranslateBitbucketGitUrlsInSourceControlInformation”(先前值:“;TranslateGitHubUrlsInSourceControlInformation;TranslateGitLabUrlsInSourceControlInformation;TranslateAzureReposGitUrlsInSourceControlInformation”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DesignerSupport.targets (21,5) 处重新分配属性: $(DesignerRuntimeImplementationProjectOutputGroupDependsOn)=“
             
             ;
             
             ;
             BuildOnlySettings;
             PrepareForBuild;
             AssignTargetPaths;
             ResolveReferences
           
           ;
             _GenerateDesignerDepsFile;
             _GenerateDesignerRuntimeConfigFile;
             GetCopyToOutputDirectoryItems;
             _GatherDesignerShadowCopyFiles;
           ”(先前值:“
             ;
             
             ;
             BuildOnlySettings;
             PrepareForBuild;
             AssignTargetPaths;
             ResolveReferences
           
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.PackTool.targets (68,5) 处重新分配属性: $(_GenerateToolsSettingsFileCacheFile)=“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\GameCore.toolssettingsinput.cache”(先前值:“obj\Debug\netstandard2.1\GameCore.toolssettingsinput.cache”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.PackTool.targets (137,5) 处重新分配属性: $(_ShimInputCacheFile)=“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\GameCore.shiminput.cache”(先前值:“obj\Debug\netstandard2.1\GameCore.shiminput.cache”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.PackTool.targets (139,5) 处重新分配属性: $(_ShimCreatedSentinelFile)=“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\GameCore.shimcreated.sentinel”(先前值:“obj\Debug\netstandard2.1\GameCore.shimcreated.sentinel”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.CSharp.targets (31,5) 处重新分配属性: $(DefineConstants)=“TRACE;DEBUG;ROBOT;DEBUG”(先前值:“TRACE;DEBUG;ROBOT”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.CSharp.targets (34,5) 处重新分配属性: $(DefineConstants)=“TRACE;DEBUG;ROBOT;DEBUG;NETSTANDARD;NETSTANDARD2_1;”(先前值:“TRACE;DEBUG;ROBOT;DEBUG”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Windows.targets (44,5) 处重新分配属性: $(SupportedOSPlatformVersion)=“7.0”(先前值:“”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Windows.targets (45,5) 处重新分配属性: $(TargetPlatformMinVersion)=“7.0”(先前值:“”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\NuGet.Build.Tasks.Pack\build\NuGet.Build.Tasks.Pack.targets (34,5) 处重新分配属性: $(PackageDescription)=“Package Description”(先前值:“”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\NuGet.Build.Tasks.Pack\build\NuGet.Build.Tasks.Pack.targets (59,5) 处重新分配属性: $(GenerateNuspecDependsOn)=“Build;_LoadPackInputItems; _GetTargetFrameworksOutput; _WalkEachTargetPerFramework; _GetPackageFiles; ”(先前值:“_LoadPackInputItems; _GetTargetFrameworksOutput; _WalkEachTargetPerFramework; _GetPackageFiles; ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Containers\build\Microsoft.NET.Build.Containers.targets (5,5) 处重新分配属性: $(_IsSDKContainerAllowedVersion)=“true”(先前值:“false”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Microsoft.Common.props
       程序集加载期间 Evaluation: System.Collections.Immutable, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\System.Collections.Immutable.dll, MVID: 8448ed54-b238-40d8-a464-bff29b2d85b9, AppDomain: [Default])
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Microsoft.Common.props (60,5) 处重新分配属性: $(MSBuildProjectExtensionsPath)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\”(先前值:“obj\”)
       程序集加载期间 Evaluation: Microsoft.IO.Redist, Version=6.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.IO.Redist.dll, MVID: d528d43e-4d35-4c28-8aa6-a5ce49a5eba7, AppDomain: [Default])
       值为“C:\Users\dreamanlan”的属性“USERPROFILE”从环境中展开。
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportBefore\*
       “Configuration”属性是全局属性，不能修改。
       “Platform”属性是全局属性，不能修改。
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       “Configuration”属性是全局属性，不能修改。
       “Platform”属性是全局属性，不能修改。
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.props (91,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};{HintPathFromItem}”(先前值:“{CandidateAssemblyFiles}”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.props (92,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};{HintPathFromItem};{TargetFrameworkDirectory}”(先前值:“{CandidateAssemblyFiles};{HintPathFromItem}”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.props (93,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};{HintPathFromItem};{TargetFrameworkDirectory};{RawFileName}”(先前值:“{CandidateAssemblyFiles};{HintPathFromItem};{TargetFrameworkDirectory}”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Microsoft.Common.props
       程序集加载期间 Evaluation: System.Collections.Immutable, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\System.Collections.Immutable.dll, MVID: 8448ed54-b238-40d8-a464-bff29b2d85b9, AppDomain: [Default])
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Microsoft.Common.props (60,5) 处重新分配属性: $(MSBuildProjectExtensionsPath)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\”(先前值:“obj\”)
       程序集加载期间 Evaluation: Microsoft.IO.Redist, Version=6.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.IO.Redist.dll, MVID: d528d43e-4d35-4c28-8aa6-a5ce49a5eba7, AppDomain: [Default])
       值为“C:\Users\dreamanlan”的属性“USERPROFILE”从环境中展开。
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportBefore\*
       “Configuration”属性是全局属性，不能修改。
       “Platform”属性是全局属性，不能修改。
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       “Configuration”属性是全局属性，不能修改。
       “Platform”属性是全局属性，不能修改。
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.props (91,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};{HintPathFromItem}”(先前值:“{CandidateAssemblyFiles}”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.props (92,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};{HintPathFromItem};{TargetFrameworkDirectory}”(先前值:“{CandidateAssemblyFiles};{HintPathFromItem}”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.props (93,5) 处重新分配属性: $(AssemblySearchPaths)=“{CandidateAssemblyFiles};{HintPathFromItem};{TargetFrameworkDirectory};{RawFileName}”(先前值:“{CandidateAssemblyFiles};{HintPathFromItem};{TargetFrameworkDirectory}”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.PackProjectTool.props (15,5) 处重新分配属性: $(TargetsForTfmSpecificContentInPackage)=“;PackTool;_PackProjectToolValidation”(先前值:“;PackTool”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.PackProjectTool.props (15,5) 处重新分配属性: $(TargetsForTfmSpecificContentInPackage)=“;PackTool;_PackProjectToolValidation”(先前值:“;PackTool”)
       “Platform”属性是全局属性，不能修改。
       在 F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj (5,5) 处重新分配属性: $(RootNamespace)=“CsLibrary”(先前值:“Common”)
       在 F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj (17,5) 处重新分配属性: $(AllowUnsafeBlocks)=“True”(先前值:“false”)
       在 F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj (16,5) 处重新分配属性: $(DefineConstants)=“TRACE;DEBUG;ENABLE_ERROR_LOG;ENABLE_LOG”(先前值:“TRACE”)
       “Configuration”属性是全局属性，不能修改。
       “Configuration”属性是全局属性，不能修改。
       “Platform”属性是全局属性，不能修改。
       “Platform”属性是全局属性，不能修改。
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.ImportPublishProfile.targets (28,5) 处重新分配属性: $(PublishProfileImported)=“false”(先前值:“true”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.ImportPublishProfile.targets (28,5) 处重新分配属性: $(PublishProfileImported)=“false”(先前值:“true”)
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveFrameworkReferences”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“ResolveFrameworkReferences”。
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.WorkflowBuildExtensions.targets”中的目标“GenerateCompiledExpressionsTempFile”重写项目“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets”中的目标“GenerateCompiledExpressionsTempFile”。
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets”中的目标“CollectPackageReferences”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“CollectPackageReferences”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“ResolvePackageDependenciesDesignTime”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“ResolvePackageDependenciesDesignTime”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“CollectSDKReferencesDesignTime”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“CollectSDKReferencesDesignTime”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“CollectResolvedSDKReferencesDesignTime”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“CollectResolvedSDKReferencesDesignTime”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets”中的目标“ResolveFrameworkReferences”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveFrameworkReferences”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“Run”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Run”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“GenerateSupportedTargetFrameworkAlias”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GenerateSupportedTargetFrameworkAlias”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DisableStandardFrameworkResolution.targets”中的目标“GetReferenceAssemblyPaths”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetReferenceAssemblyPaths”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DisableStandardFrameworkResolution.targets”中的目标“GetFrameworkPaths”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetFrameworkPaths”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DesignerSupport.targets”中的目标“DesignerRuntimeImplementationProjectOutputGroup”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“DesignerRuntimeImplementationProjectOutputGroup”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Publish.targets”中的目标“Publish”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Publish”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Publish.targets”中的目标“ResolveReadyToRunCompilers”重写项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.CrossGen.targets”中的目标“ResolveReadyToRunCompilers”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Publish.targets”中的目标“GetCopyToPublishDirectoryItems”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetCopyToPublishDirectoryItems”。
       项目中不存在 AfterTargets 特性中的“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.CSharp.DesignTime.targets (74,45)”位置列出的目标“_PrepareRazorSourceGenerators”，将忽略该目标。
       项目中不存在 AfterTargets 特性中的“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.CodeAnalysis.targets (450,11)”位置列出的目标“ClCompile”，将忽略该目标。
     1>项目“F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”(1)正在节点 1 上生成“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”(2) (Clean 个目标)。
     2>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetFramework”；('$(_UnsupportedTargetFrameworkError)' == 'true')的计算结果为('' == 'true')。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets”中的目标“_CollectTargetFrameworkForTelemetry”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“AllowEmptyTelemetry”任务。
       任务“AllowEmptyTelemetry”
       已完成执行任务“AllowEmptyTelemetry”的操作。
     2>已完成在项目“GameCore.csproj”中生成目标“_CollectTargetFrameworkForTelemetry”的操作。
       由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetPlatformIdentifier”；('$(TargetPlatformIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) And ('$(DesignTimeBuild)' != 'true' Or '@(MissingWorkloadPack)' == ''))的计算结果为('Windows' != '' and '.NETStandard' == '.NETCoreApp' and False And ('' != 'true' Or '' == ''))。
       由于条件的计算结果为 false，已跳过目标“_CheckForMissingWorkload”；('@(MissingWorkloadPack)' != '' And '$(DesignTimeBuild)' != 'true')的计算结果为('' != '' And '' != 'true')。
       由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedNETCoreVersion”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' And '$(NETCoreAppMaximumVersion)' != '')的计算结果为('.NETStandard' == '.NETCoreApp' And '8.0' != '')。
       由于条件的计算结果为 false，已跳过目标“_CheckForEolTargetFrameworks”；('@(_EolNetCoreTargetFrameworkVersions->AnyHaveMetadataValue('Identity', '$(_TargetFrameworkVersionWithoutV)'))' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(CheckEolTargetFramework)' == 'true')的计算结果为('true' and '.NETStandard' == '.NETCoreApp' and '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_CheckForEolWorkloads”；('@(EolWorkload)' != '' and '$(CheckEolWorkloads)' == 'true')的计算结果为('' != '' and 'true' == 'true')。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets”中的目标“_CheckForUnsupportedCppNETCoreVersion”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
       由于 false 条件，已跳过任务“NETSdkError”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(_TargetFrameworkVersionWithoutV)' < '3.1' and ('$(Language)' == 'C++' and '$(_EnablePackageReferencesInVCProjects)' != 'true'))计算为('.NETStandard' == '.NETCoreApp' and '2.1' < '3.1' and ('C#' == 'C++' and '' != 'true'))。
     2>已完成在项目“GameCore.csproj”中生成目标“_CheckForUnsupportedCppNETCoreVersion”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets”中的目标“_CheckForUnsupportedNETStandardVersion”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
       由于 false 条件，已跳过任务“NETSdkError”；('$(_TargetFrameworkVersionWithoutV)' > '$(NETStandardMaximumVersion)')计算为('2.1' > '2.1')。
     2>已完成在项目“GameCore.csproj”中生成目标“_CheckForUnsupportedNETStandardVersion”的操作。
       由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetFrameworkAndFeatureCombination”；('$(TargetFrameworkIdentifier)' == '.NETFramework')的计算结果为('.NETStandard' == '.NETFramework')。
       由于条件的计算结果为 false，已跳过目标“_CheckForSupportedOSPlatformVersionHigherThanTargetPlatformVersion”；('$(TargetPlatformVersion)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)))的计算结果为('7.0' != '' and '.NETStandard' == '.NETCoreApp' and False)。
       由于条件的计算结果为 false，已跳过目标“_CheckForInvalidTargetPlatformVersion”；('$(TargetPlatformVersion)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) and ('$(Language)' != 'C++' or '$(_EnablePackageReferencesInVCProjects)' == 'true'))的计算结果为('7.0' != '' and '.NETStandard' == '.NETCoreApp' and False and ('C#' != 'C++' or '' == 'true'))。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DefaultOutputPaths.targets”中的目标“_CheckForUnsupportedArtifactsPath”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
       由于 false 条件，已跳过任务“NetSdkError”；('$(UseArtifactsOutput)' == 'true' and '$(_ArtifactsPathSetEarly)' != 'true')计算为('' == 'true' and '' != 'true')。
       由于 false 条件，已跳过任务“NetSdkError”；('$(_ArtifactsPathLocationType)' == 'ProjectFolder')计算为('' == 'ProjectFolder')。
     2>已完成在项目“GameCore.csproj”中生成目标“_CheckForUnsupportedArtifactsPath”的操作。
       由于条件的计算结果为 false，已跳过目标“_CheckForMissingWorkload”；('@(MissingWorkloadPack)' != '' And '$(DesignTimeBuild)' != 'true')的计算结果为('' != '' And '' != 'true')。
       由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedAppHostUsage”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(HasRuntimeOutput)' == 'true')的计算结果为('.NETStandard' == '.NETCoreApp' and '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedHostingUsage”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp')的计算结果为('.NETStandard' == '.NETCoreApp')。
       由于条件的计算结果为 false，已跳过目标“_CheckAndUnsetUnsupportedPrefer32Bit”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(_TargetFrameworkVersionWithoutV)' >= '7.0')的计算结果为('.NETStandard' == '.NETCoreApp' and '2.1' >= '7.0')。
       由于条件的计算结果为 false，已跳过目标“_CheckForMismatchingPlatform”；('$(RuntimeIdentifier)' != '' and '$(PlatformTarget)' != '')的计算结果为('' != '' and '' != '')。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.RuntimeIdentifierInference.targets”中的目标“_CheckForLanguageAndFeatureCombinationSupport”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
       由于 false 条件，已跳过任务“NETSdkError”；(('$(Language)' == 'C++' and '$(_EnablePackageReferencesInVCProjects)' != 'true') and $(OutputType) != 'library' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp')计算为(('C#' == 'C++' and '' != 'true') and Library != 'library' and '.NETStandard' == '.NETCoreApp')。
       由于 false 条件，已跳过任务“NETSdkError”；(('$(Language)' == 'C++' and '$(_EnablePackageReferencesInVCProjects)' != 'true') and $(EnableComHosting) == 'true')计算为(('C#' == 'C++' and '' != 'true') and  == 'true')。
       由于 false 条件，已跳过任务“NETSdkError”；(('$(Language)' == 'C++' and '$(_EnablePackageReferencesInVCProjects)' != 'true') and $(SelfContained) == 'true')计算为(('C#' == 'C++' and '' != 'true') and  == 'true')。
     2>已完成在项目“GameCore.csproj”中生成目标“_CheckForLanguageAndFeatureCombinationSupport”的操作。
       由于条件的计算结果为 false，已跳过目标“_CheckForNETCoreSdkIsPreview”；( '$(_NETCoreSdkIsPreview)' == 'true' AND '$(SuppressNETCoreSdkPreviewMessage)' != 'true' )的计算结果为( 'false' == 'true' AND '' != 'true' )。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets”中的目标“_GetProjectJsonPath”(目标“_GetRestoreProjectStyle”依赖于它):
       由于 false 条件，已跳过任务“GetRestoreProjectJsonPathTask”；( '$(RestoreProjectStyle)' == 'ProjectJson' OR '$(RestoreProjectStyle)' == '' )计算为( 'PackageReference' == 'ProjectJson' OR 'PackageReference' == '' )。
     2>已完成在项目“GameCore.csproj”中生成目标“_GetProjectJsonPath”的操作。
       由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetPlatformIdentifier”；('$(TargetPlatformIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) And ('$(DesignTimeBuild)' != 'true' Or '@(MissingWorkloadPack)' == ''))的计算结果为('Windows' != '' and '.NETStandard' == '.NETCoreApp' and False And ('' != 'true' Or '' == ''))。
       由于条件的计算结果为 false，已跳过目标“_CheckForMissingWorkload”；('@(MissingWorkloadPack)' != '' And '$(DesignTimeBuild)' != 'true')的计算结果为('' != '' And '' != 'true')。
       由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedNETCoreVersion”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' And '$(NETCoreAppMaximumVersion)' != '')的计算结果为('.NETStandard' == '.NETCoreApp' And '8.0' != '')。
       由于条件的计算结果为 false，已跳过目标“_CheckForEolTargetFrameworks”；('@(_EolNetCoreTargetFrameworkVersions->AnyHaveMetadataValue('Identity', '$(_TargetFrameworkVersionWithoutV)'))' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(CheckEolTargetFramework)' == 'true')的计算结果为('true' and '.NETStandard' == '.NETCoreApp' and '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_CheckForEolWorkloads”；('@(EolWorkload)' != '' and '$(CheckEolWorkloads)' == 'true')的计算结果为('' != '' and 'true' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetFrameworkAndFeatureCombination”；('$(TargetFrameworkIdentifier)' == '.NETFramework')的计算结果为('.NETStandard' == '.NETFramework')。
       由于条件的计算结果为 false，已跳过目标“ApplyImplicitVersions”；('@(PackageReference)' != '')的计算结果为('' != '')。
       由于条件的计算结果为 false，已跳过目标“IncludeTargetingPackReference”；('$(TargetFrameworkMoniker)' != '' and '$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(AutomaticallyUseReferenceAssemblyPackages)' == 'true')的计算结果为('.NETStandard,Version=v2.1' != '' and '.NETStandard' == '.NETFramework' and 'true' == 'true')。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.Shared.targets”中的目标“CheckForImplicitPackageReferenceOverrides”(目标“CollectPackageReferences”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“CheckForImplicitPackageReferenceOverrides”任务。
       任务“CheckForImplicitPackageReferenceOverrides”
     0>程序集加载期间 Evaluation: NuGet.Frameworks, Version=6.9.2.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Frameworks.dll, MVID: 8ab6ad21-fd86-457b-a520-06e4a811f161, AppDomain: [Default])
       程序集加载期间 Evaluation: NuGet.Frameworks, Version=6.9.2.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Frameworks.dll, MVID: 8ab6ad21-fd86-457b-a520-06e4a811f161, AppDomain: [Default])
     2>已完成执行任务“CheckForImplicitPackageReferenceOverrides”的操作。
     2>已完成在项目“GameCore.csproj”中生成目标“CheckForImplicitPackageReferenceOverrides”的操作。
       由于条件的计算结果为 false，已跳过目标“AddWindowsSdkKnownFrameworkReferences”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' And '$(TargetPlatformIdentifier)' == 'Windows')的计算结果为('.NETStandard' == '.NETCoreApp' And 'Windows' == 'Windows')。
       由于条件的计算结果为 false，已跳过目标“_NormalizeTargetPlatformVersion”；('$(TargetPlatformVersion)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) and ('$(Language)' != 'C++' or '$(_EnablePackageReferencesInVCProjects)' == 'true'))的计算结果为('7.0' != '' and '.NETStandard' == '.NETCoreApp' and False and ('C#' != 'C++' or '' == 'true'))。
       由于条件的计算结果为 false，已跳过目标“ApplyImplicitVersions”；('@(PackageReference)' != '')的计算结果为('' != '')。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Publish.targets”中的目标“_ComputeToolPackInputsToProcessFrameworkReferences”(目标“ProcessFrameworkReferences”依赖于它):
     2>已完成在项目“GameCore.csproj”中生成目标“_ComputeToolPackInputsToProcessFrameworkReferences”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets”中的目标“ProcessFrameworkReferences”(目标“CollectPackageReferences”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“CheckForDuplicateFrameworkReferences”任务。
       任务“CheckForDuplicateFrameworkReferences”
       已完成执行任务“CheckForDuplicateFrameworkReferences”的操作。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ProcessFrameworkReferences”任务。
       任务“ProcessFrameworkReferences”
     0>在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets (69,5) 处重新分配属性: $(TargetPlatformVersion)=“”(先前值:“0.0”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets (69,5) 处重新分配属性: $(TargetPlatformVersion)=“”(先前值:“0.0”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DefaultOutputPaths.targets (122,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**”(先前值:“;bin\Debug\/**”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DefaultOutputPaths.targets (137,5) 处重新分配属性: $(OutputPath)=“bin\Debug\netstandard2.1\”(先前值:“bin\Debug\”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DefaultOutputPaths.targets (142,5) 处重新分配属性: $(IntermediateOutputPath)=“obj\Debug\netstandard2.1\”(先前值:“obj\Debug\”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DefaultOutputPaths.targets (122,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**”(先前值:“;bin\Debug\/**”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DefaultOutputPaths.targets (137,5) 处重新分配属性: $(OutputPath)=“bin\Debug\netstandard2.1\”(先前值:“bin\Debug\”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DefaultOutputPaths.targets (142,5) 处重新分配属性: $(IntermediateOutputPath)=“obj\Debug\netstandard2.1\”(先前值:“obj\Debug\”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.BeforeCommon.targets (192,5) 处重新分配属性: $(_FrameworkVersionForImplicitDefine)=“2_1”(先前值:“2.1”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.BeforeCommon.targets (192,5) 处重新分配属性: $(_FrameworkVersionForImplicitDefine)=“2_1”(先前值:“2.1”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets (197,5) 处重新分配属性: $(CommandLineArgsForDesignTimeEvaluation)=“-langversion:8.0 -define:TRACE;DEBUG;ENABLE_ERROR_LOG;ENABLE_LOG”(先前值:“-langversion:8.0”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets (197,5) 处重新分配属性: $(CommandLineArgsForDesignTimeEvaluation)=“-langversion:8.0 -define:TRACE”(先前值:“-langversion:8.0”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (13,5) 处重新分配属性: $(DefineCommonItemSchemas)=“false”(先前值:“true”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (13,5) 处重新分配属性: $(DefineCommonItemSchemas)=“false”(先前值:“true”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (14,5) 处重新分配属性: $(DefineCommonCapabilities)=“false”(先前值:“true”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (14,5) 处重新分配属性: $(DefineCommonCapabilities)=“false”(先前值:“true”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (15,5) 处重新分配属性: $(DefineCommonReferenceSchemas)=“false”(先前值:“true”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (15,5) 处重新分配属性: $(DefineCommonReferenceSchemas)=“false”(先前值:“true”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (448,5) 处重新分配属性: $(CollectUpToDateCheckInputDesignTimeDependsOn)=“CompileDesignTime;ResolveCodeAnalysisRuleSet”(先前值:“CompileDesignTime”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets (448,5) 处重新分配属性: $(CollectUpToDateCheckInputDesignTimeDependsOn)=“CompileDesignTime;ResolveCodeAnalysisRuleSet”(先前值:“CompileDesignTime”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (89,5) 处重新分配属性: $(TargetPlatformIdentifier)=“Windows”(先前值:“”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (90,5) 处重新分配属性: $(TargetPlatformVersion)=“7.0”(先前值:“”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (89,5) 处重新分配属性: $(TargetPlatformIdentifier)=“Windows”(先前值:“”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (90,5) 处重新分配属性: $(TargetPlatformVersion)=“7.0”(先前值:“”)
       程序集加载期间 Evaluation: Microsoft.Build.Utilities.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Build.Utilities.Core.dll, MVID: 54018845-4ba7-4001-93ac-3047e23b6bba, AppDomain: [Default])
       程序集加载期间 Evaluation: Microsoft.Build.Utilities.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Build.Utilities.Core.dll, MVID: 54018845-4ba7-4001-93ac-3047e23b6bba, AppDomain: [Default])
       “Platform”属性是全局属性，不能修改。
       “Platform”属性是全局属性，不能修改。
       “Configuration”属性是全局属性，不能修改。
       “Configuration”属性是全局属性，不能修改。
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (175,5) 处重新分配属性: $(_DebugSymbolsProduced)=“true”(先前值:“false”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (185,5) 处重新分配属性: $(_DocumentationFileProduced)=“false”(先前值:“true”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (175,5) 处重新分配属性: $(_DebugSymbolsProduced)=“true”(先前值:“false”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (185,5) 处重新分配属性: $(_DocumentationFileProduced)=“false”(先前值:“true”)
       “SolutionName”属性是全局属性，不能修改。
       “SolutionFileName”属性是全局属性，不能修改。
       “SolutionName”属性是全局属性，不能修改。
       “SolutionPath”属性是全局属性，不能修改。
       “SolutionFileName”属性是全局属性，不能修改。
       “SolutionDir”属性是全局属性，不能修改。
       “SolutionPath”属性是全局属性，不能修改。
       “SolutionExt”属性是全局属性，不能修改。
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (393,5) 处重新分配属性: $(MSBuildCopyMarkerName)=“Common.csproj.Up2Date”(先前值:“Common.csproj”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (536,5) 处重新分配属性: $(ProcessorArchitecture)=“msil”(先前值:“”)
       “SolutionDir”属性是全局属性，不能修改。
       “SolutionExt”属性是全局属性，不能修改。
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (575,5) 处重新分配属性: $(DelaySign)=“”(先前值:“false”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (392,5) 处重新分配属性: $(MSBuildCopyMarkerName)=“StoryScr.5BC802E4”(先前值:“StoryScript.csproj”)
       值为“C:\Users\dreamanlan\AppData\Local”的属性“LOCALAPPDATA”从环境中展开。
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (393,5) 处重新分配属性: $(MSBuildCopyMarkerName)=“StoryScr.5BC802E4.Up2Date”(先前值:“StoryScr.5BC802E4”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (3865,5) 处重新分配属性: $(_SGenGenerateSerializationAssembliesConfig)=“Auto”(先前值:“”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (536,5) 处重新分配属性: $(ProcessorArchitecture)=“msil”(先前值:“”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (3866,5) 处重新分配属性: $(_SGenGenerateSerializationAssembliesConfig)=“Off”(先前值:“Auto”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (5032,5) 处重新分配属性: $(_TargetsThatPrepareProjectReferences)=“
             AssignProjectConfiguration;
             _SplitProjectReferencesByFileExistence
           ”(先前值:“_SplitProjectReferencesByFileExistence”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (575,5) 处重新分配属性: $(DelaySign)=“”(先前值:“false”)
       值为“C:\Users\dreamanlan\AppData\Local”的属性“LOCALAPPDATA”从环境中展开。
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (3865,5) 处重新分配属性: $(_SGenGenerateSerializationAssembliesConfig)=“Auto”(先前值:“”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (3866,5) 处重新分配属性: $(_SGenGenerateSerializationAssembliesConfig)=“Off”(先前值:“Auto”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets (5032,5) 处重新分配属性: $(_TargetsThatPrepareProjectReferences)=“
             AssignProjectConfiguration;
             _SplitProjectReferencesByFileExistence
           ”(先前值:“_SplitProjectReferencesByFileExistence”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.CodeAnalysis.targets (125,5) 处重新分配属性: $(_CodeAnalysisTreatWarningsAsErrors)=“false”(先前值:“”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.CodeAnalysis.targets (167,9) 处重新分配属性: $(PrepareForRunDependsOn)=“
             CopyFilesToOutputDirectory
           ;RunCodeAnalysis”(先前值:“
             CopyFilesToOutputDirectory
           ”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.CodeAnalysis.targets (125,5) 处重新分配属性: $(_CodeAnalysisTreatWarningsAsErrors)=“false”(先前值:“”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.CodeAnalysis.targets (167,9) 处重新分配属性: $(PrepareForRunDependsOn)=“
             CopyFilesToOutputDirectory
           ;RunCodeAnalysis”(先前值:“
             CopyFilesToOutputDirectory
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets (35,5) 处重新分配属性: $(PrepareResourcesDependsOn)=“
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
            
           ”(先前值:“
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets (35,5) 处重新分配属性: $(PrepareResourcesDependsOn)=“
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
            
           ”(先前值:“
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets (16,5) 处重新分配属性: $(PrepareResourcesDependsOn)=“
             ValidationExtension;
             ExpressionBuildExtension;
             
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
            
           
           ”(先前值:“
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
            
           ”)
       在 C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets (16,5) 处重新分配属性: $(PrepareResourcesDependsOn)=“
             ValidationExtension;
             ExpressionBuildExtension;
             
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
            
           
           ”(先前值:“
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
            
           ”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\TeamTest\Microsoft.TeamTest.targets (4,5) 处重新分配属性: $(ResolveReferencesDependsOn)=“
             
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             GenerateBindingRedirectsUpdateAppConfig;
             ResolveComReferences;
             AfterResolveReferences
           ;
             ResolveTestReferences
           ”(先前值:“
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             GenerateBindingRedirectsUpdateAppConfig;
             ResolveComReferences;
             AfterResolveReferences
           ”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\TeamTest\Microsoft.TeamTest.targets (4,5) 处重新分配属性: $(ResolveReferencesDependsOn)=“
             
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             GenerateBindingRedirectsUpdateAppConfig;
             ResolveComReferences;
             AfterResolveReferences
           ;
             ResolveTestReferences
           ”(先前值:“
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             GenerateBindingRedirectsUpdateAppConfig;
             ResolveComReferences;
             AfterResolveReferences
           ”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Microsoft.Common.targets\ImportAfter\*
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\$(MSBuildToolsVersion)\Microsoft.Common.targets\ImportAfter\*
     2>已完成执行任务“ProcessFrameworkReferences”的操作。
     0>将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
     2>ProcessFrameworkReferences:
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ResolveAppHosts”任务。
     0>将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
     2>任务“ResolveAppHosts”
     0>尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\WebTools.Aspire\Microsoft.WebTools.Aspire.targets
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       尝试使用扩展路径 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild 导入 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\WebTools.Aspire\Microsoft.WebTools.Aspire.targets
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\WebTools.Aspire\Microsoft.WebTools.Aspire.targets (25,5) 处重新分配属性: $(JsonSchemaCombinedFilePath)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\CombinedComponentSchema.json”(先前值:“obj\Debug\netstandard2.1\\CombinedComponentSchema.json”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\WebTools.Aspire\Microsoft.WebTools.Aspire.targets (27,5) 处重新分配属性: $(AppSettingsJsonSchemaCombinedFilePath)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\AppSettingsSchema.json”(先前值:“obj\Debug\netstandard2.1\\AppSettingsSchema.json”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\WebTools.Aspire\Microsoft.WebTools.Aspire.targets (25,5) 处重新分配属性: $(JsonSchemaCombinedFilePath)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\CombinedComponentSchema.json”(先前值:“obj\Debug\netstandard2.1\\CombinedComponentSchema.json”)
       在 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\WebTools.Aspire\Microsoft.WebTools.Aspire.targets (27,5) 处重新分配属性: $(AppSettingsJsonSchemaCombinedFilePath)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\AppSettingsSchema.json”(先前值:“obj\Debug\netstandard2.1\\AppSettingsSchema.json”)
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
       将用于 $(MSBuildExtensionsPath) 的搜索路径为 C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild
     2>已完成执行任务“ResolveAppHosts”的操作。
     2>已完成在项目“GameCore.csproj”中生成目标“ProcessFrameworkReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“IncludeTargetingPackReference”；('$(TargetFrameworkMoniker)' != '' and '$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(AutomaticallyUseReferenceAssemblyPackages)' == 'true')的计算结果为('.NETStandard,Version=v2.1' != '' and '.NETStandard' == '.NETFramework' and 'true' == 'true')。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“_AddMicrosoftNetCompilerToolsetFrameworkPackage”(目标“CollectPackageReferences”依赖于它):
       由于 false 条件，已跳过任务“NETSdkWarning”；('@(PackageReference->AnyHaveMetadataValue('Identity', 'Microsoft.Net.Compilers.Toolset.Framework'))' == 'true')计算为('false' == 'true')。
     2>已完成在项目“GameCore.csproj”中生成目标“_AddMicrosoftNetCompilerToolsetFrameworkPackage”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.ObsoleteReferences.targets”中的目标“_CheckForObsoleteDotNetCliToolReferences”(目标“CollectPackageReferences”依赖于它):
       由于 false 条件，已跳过任务“NETSdkWarning”；( '%(_ReferenceToObsoleteDotNetCliTool.Identity)' != '' )计算为( '' != '' )。
     2>已完成在项目“GameCore.csproj”中生成目标“_CheckForObsoleteDotNetCliToolReferences”的操作。
     0>在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets (29,5) 处重新分配属性: $(ProjectAssetsCacheFile)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\Common.assets.cache”(先前值:“obj\Debug\netstandard2.1\Common.assets.cache”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets (80,5) 处重新分配属性: $(ResolveAssemblyReferencesDependsOn)=“
             
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ;
             ResolvePackageDependenciesForBuild;
             _HandlePackageFileConflicts;
           ”(先前值:“
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets (86,5) 处重新分配属性: $(PrepareResourcesDependsOn)=“
             ResolvePackageDependenciesForBuild;
             _HandlePackageFileConflicts;
             
             ValidationExtension;
             ExpressionBuildExtension;
             
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
            
           
           
           ”(先前值:“
             ValidationExtension;
             ExpressionBuildExtension;
             
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
            
           
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets (29,5) 处重新分配属性: $(ProjectAssetsCacheFile)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\StoryScript.assets.cache”(先前值:“obj\Debug\netstandard2.1\StoryScript.assets.cache”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets (80,5) 处重新分配属性: $(ResolveAssemblyReferencesDependsOn)=“
             
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ;
             ResolvePackageDependenciesForBuild;
             _HandlePackageFileConflicts;
           ”(先前值:“
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets (86,5) 处重新分配属性: $(PrepareResourcesDependsOn)=“
             ResolvePackageDependenciesForBuild;
             _HandlePackageFileConflicts;
             
             ValidationExtension;
             ExpressionBuildExtension;
             
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
            
           
           
           ”(先前值:“
             ValidationExtension;
             ExpressionBuildExtension;
             
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
            
           
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (27,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**”(先前值:“;bin\Debug\/**;obj\Debug\/**”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (29,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**”(先前值:“;bin\Debug\/**;obj\Debug\/**;bin\/**”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (32,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user”(先前值:“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (33,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj”(先前值:“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (34,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj;**/*.sln”(先前值:“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (27,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**”(先前值:“;bin\Debug\/**;obj\Debug\/**”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (35,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj;**/*.sln;**/*.vssscc”(先前值:“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj;**/*.sln”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (29,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**”(先前值:“;bin\Debug\/**;obj\Debug\/**;bin\/**”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (36,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj;**/*.sln;**/*.vssscc;**/.DS_Store”(先前值:“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj;**/*.sln;**/*.vssscc”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (32,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user”(先前值:“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (33,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj”(先前值:“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (34,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj;**/*.sln”(先前值:“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (35,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj;**/*.sln;**/*.vssscc”(先前值:“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj;**/*.sln”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.targets (36,5) 处重新分配属性: $(DefaultItemExcludes)=“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj;**/*.sln;**/*.vssscc;**/.DS_Store”(先前值:“;bin\Debug\/**;obj\Debug\/**;bin\/**;obj\/**;**/*.user;**/*.*proj;**/*.sln;**/*.vssscc”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets (14,5) 处重新分配属性: $(ResolveAssemblyReferencesDependsOn)=“
             
             
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ;
             ResolvePackageDependenciesForBuild;
             _HandlePackageFileConflicts;
           ;
             ResolveTargetingPackAssets;
           ”(先前值:“
             
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ;
             ResolvePackageDependenciesForBuild;
             _HandlePackageFileConflicts;
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (44,5) 处重新分配属性: $(_GenerateRuntimeConfigurationPropertyInputsCache)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\Common.genruntimeconfig.cache”(先前值:“obj\Debug\netstandard2.1\Common.genruntimeconfig.cache”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (46,5) 处重新分配属性: $(_GeneratePublishDependencyFilePropertyInputsCache)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\Common.genpublishdeps.cache”(先前值:“obj\Debug\netstandard2.1\Common.genpublishdeps.cache”)
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets”中的目标“CollectPackageReferences”(目标“_GetRestoreProjectStyle”依赖于它):
     2>程序集加载期间 TaskRun: NuGet.Build.Tasks, Version=6.9.2.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Build.Tasks.dll, MVID: 387e3575-06a2-46ce-ba2b-3ecfc703013a, AppDomain: [Default])
     0>在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (48,5) 处重新分配属性: $(_GenerateSingleFileBundlePropertyInputsCache)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\Common.genbundle.cache”(先前值:“obj\Debug\netstandard2.1\Common.genbundle.cache”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets (14,5) 处重新分配属性: $(ResolveAssemblyReferencesDependsOn)=“
             
             
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ;
             ResolvePackageDependenciesForBuild;
             _HandlePackageFileConflicts;
           ;
             ResolveTargetingPackAssets;
           ”(先前值:“
             
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ;
             ResolvePackageDependenciesForBuild;
             _HandlePackageFileConflicts;
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (44,5) 处重新分配属性: $(_GenerateRuntimeConfigurationPropertyInputsCache)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\StoryScript.genruntimeconfig.cache”(先前值:“obj\Debug\netstandard2.1\StoryScript.genruntimeconfig.cache”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (46,5) 处重新分配属性: $(_GeneratePublishDependencyFilePropertyInputsCache)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\StoryScript.genpublishdeps.cache”(先前值:“obj\Debug\netstandard2.1\StoryScript.genpublishdeps.cache”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (48,5) 处重新分配属性: $(_GenerateSingleFileBundlePropertyInputsCache)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\StoryScript.genbundle.cache”(先前值:“obj\Debug\netstandard2.1\StoryScript.genbundle.cache”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (97,5) 处重新分配属性: $(_DefaultUserProfileRuntimeStorePath)=“C:\Users\dreamanlan”(先前值:“”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (98,5) 处重新分配属性: $(_DefaultUserProfileRuntimeStorePath)=“C:\Users\dreamanlan\.dotnet\store”(先前值:“C:\Users\dreamanlan”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (197,5) 处重新分配属性: $(CoreBuildDependsOn)=“
             _CheckForBuildWithNoBuild;
             
             BuildOnlySettings;
             PrepareForBuild;
             PreBuildEvent;
             ResolveReferences;
             PrepareResources;
             ResolveKeySource;
             Compile;
             ExportWindowsMDFile;
             UnmanagedUnregistration;
             GenerateSerializationAssemblies;
             CreateSatelliteAssemblies;
             GenerateManifests;
             GetTargetPath;
             PrepareForRun;
             UnmanagedRegistration;
             IncrementalClean;
             PostBuildEvent
           ;
             GenerateBuildDependencyFile;
             GenerateBuildRuntimeConfigurationFiles
           ”(先前值:“
             BuildOnlySettings;
             PrepareForBuild;
             PreBuildEvent;
             ResolveReferences;
             PrepareResources;
             ResolveKeySource;
             Compile;
             ExportWindowsMDFile;
             UnmanagedUnregistration;
             GenerateSerializationAssemblies;
             CreateSatelliteAssemblies;
             GenerateManifests;
             GetTargetPath;
             PrepareForRun;
             UnmanagedRegistration;
             IncrementalClean;
             PostBuildEvent
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (206,5) 处重新分配属性: $(CoreCleanDependsOn)=“
             _SdkBeforeClean;
             
           ”(先前值:“”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (213,5) 处重新分配属性: $(RebuildDependsOn)=“
             _SdkBeforeRebuild;
             
             BeforeRebuild;
             Clean;
             Build;
             AfterRebuild;
           
           ”(先前值:“
             BeforeRebuild;
             Clean;
             Build;
             AfterRebuild;
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (97,5) 处重新分配属性: $(_DefaultUserProfileRuntimeStorePath)=“C:\Users\dreamanlan”(先前值:“”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (679,5) 处重新分配属性: $(CompileDependsOn)=“
             
             ResolveReferences;
             ResolveKeySource;
             SetWin32ManifestProperties;
             FindReferenceAssembliesForReferences;
             _GenerateCompileInputs;
             BeforeCompile;
             _TimeStampBeforeCompile;
             _GenerateCompileDependencyCache;
             CoreCompile;
             _TimeStampAfterCompile;
             AfterCompile;
           ;
             _CreateAppHost;
             _CreateComHost;
             _GetIjwHostPaths;
           ”(先前值:“
             ResolveReferences;
             ResolveKeySource;
             SetWin32ManifestProperties;
             FindReferenceAssembliesForReferences;
             _GenerateCompileInputs;
             BeforeCompile;
             _TimeStampBeforeCompile;
             _GenerateCompileDependencyCache;
             CoreCompile;
             _TimeStampAfterCompile;
             AfterCompile;
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (98,5) 处重新分配属性: $(_DefaultUserProfileRuntimeStorePath)=“C:\Users\dreamanlan\.dotnet\store”(先前值:“C:\Users\dreamanlan”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (1065,5) 处重新分配属性: $(CreateSatelliteAssembliesDependsOn)=“
             
             _GenerateSatelliteAssemblyInputs;
             ComputeIntermediateSatelliteAssemblies;
             GenerateSatelliteAssemblies
           ;
             CoreGenerateSatelliteAssemblies
           ”(先前值:“
             _GenerateSatelliteAssemblyInputs;
             ComputeIntermediateSatelliteAssemblies;
             GenerateSatelliteAssemblies
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (197,5) 处重新分配属性: $(CoreBuildDependsOn)=“
             _CheckForBuildWithNoBuild;
             
             BuildOnlySettings;
             PrepareForBuild;
             PreBuildEvent;
             ResolveReferences;
             PrepareResources;
             ResolveKeySource;
             Compile;
             ExportWindowsMDFile;
             UnmanagedUnregistration;
             GenerateSerializationAssemblies;
             CreateSatelliteAssemblies;
             GenerateManifests;
             GetTargetPath;
             PrepareForRun;
             UnmanagedRegistration;
             IncrementalClean;
             PostBuildEvent
           ;
             GenerateBuildDependencyFile;
             GenerateBuildRuntimeConfigurationFiles
           ”(先前值:“
             BuildOnlySettings;
             PrepareForBuild;
             PreBuildEvent;
             ResolveReferences;
             PrepareResources;
             ResolveKeySource;
             Compile;
             ExportWindowsMDFile;
             UnmanagedUnregistration;
             GenerateSerializationAssemblies;
             CreateSatelliteAssemblies;
             GenerateManifests;
             GetTargetPath;
             PrepareForRun;
             UnmanagedRegistration;
             IncrementalClean;
             PostBuildEvent
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (206,5) 处重新分配属性: $(CoreCleanDependsOn)=“
             _SdkBeforeClean;
             
           ”(先前值:“”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (213,5) 处重新分配属性: $(RebuildDependsOn)=“
             _SdkBeforeRebuild;
             
             BeforeRebuild;
             Clean;
             Build;
             AfterRebuild;
           
           ”(先前值:“
             BeforeRebuild;
             Clean;
             Build;
             AfterRebuild;
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (679,5) 处重新分配属性: $(CompileDependsOn)=“
             
             ResolveReferences;
             ResolveKeySource;
             SetWin32ManifestProperties;
             FindReferenceAssembliesForReferences;
             _GenerateCompileInputs;
             BeforeCompile;
             _TimeStampBeforeCompile;
             _GenerateCompileDependencyCache;
             CoreCompile;
             _TimeStampAfterCompile;
             AfterCompile;
           ;
             _CreateAppHost;
             _CreateComHost;
             _GetIjwHostPaths;
           ”(先前值:“
             ResolveReferences;
             ResolveKeySource;
             SetWin32ManifestProperties;
             FindReferenceAssembliesForReferences;
             _GenerateCompileInputs;
             BeforeCompile;
             _TimeStampBeforeCompile;
             _GenerateCompileDependencyCache;
             CoreCompile;
             _TimeStampAfterCompile;
             AfterCompile;
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets (1065,5) 处重新分配属性: $(CreateSatelliteAssembliesDependsOn)=“
             
             _GenerateSatelliteAssemblyInputs;
             ComputeIntermediateSatelliteAssemblies;
             GenerateSatelliteAssemblies
           ;
             CoreGenerateSatelliteAssemblies
           ”(先前值:“
             _GenerateSatelliteAssemblyInputs;
             ComputeIntermediateSatelliteAssemblies;
             GenerateSatelliteAssemblies
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\Microsoft.SourceLink.GitLab.targets (12,5) 处重新分配属性: $(SourceLinkUrlInitializerTargets)=“;_InitializeGitHubSourceLinkUrl;_InitializeGitLabSourceLinkUrl”(先前值:“;_InitializeGitHubSourceLinkUrl”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\Microsoft.SourceLink.GitLab.targets (13,5) 处重新分配属性: $(SourceControlManagerUrlTranslationTargets)=“;TranslateGitHubUrlsInSourceControlInformation;TranslateGitLabUrlsInSourceControlInformation”(先前值:“;TranslateGitHubUrlsInSourceControlInformation”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\Microsoft.SourceLink.GitLab.targets (12,5) 处重新分配属性: $(SourceLinkUrlInitializerTargets)=“;_InitializeGitHubSourceLinkUrl;_InitializeGitLabSourceLinkUrl”(先前值:“;_InitializeGitHubSourceLinkUrl”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\Microsoft.SourceLink.GitLab.targets (13,5) 处重新分配属性: $(SourceControlManagerUrlTranslationTargets)=“;TranslateGitHubUrlsInSourceControlInformation;TranslateGitLabUrlsInSourceControlInformation”(先前值:“;TranslateGitHubUrlsInSourceControlInformation”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\Microsoft.SourceLink.AzureRepos.Git.targets (12,5) 处重新分配属性: $(SourceLinkUrlInitializerTargets)=“;_InitializeGitHubSourceLinkUrl;_InitializeGitLabSourceLinkUrl;_InitializeAzureReposGitSourceLinkUrl”(先前值:“;_InitializeGitHubSourceLinkUrl;_InitializeGitLabSourceLinkUrl”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\Microsoft.SourceLink.AzureRepos.Git.targets (13,5) 处重新分配属性: $(SourceControlManagerUrlTranslationTargets)=“;TranslateGitHubUrlsInSourceControlInformation;TranslateGitLabUrlsInSourceControlInformation;TranslateAzureReposGitUrlsInSourceControlInformation”(先前值:“;TranslateGitHubUrlsInSourceControlInformation;TranslateGitLabUrlsInSourceControlInformation”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\Microsoft.SourceLink.AzureRepos.Git.targets (12,5) 处重新分配属性: $(SourceLinkUrlInitializerTargets)=“;_InitializeGitHubSourceLinkUrl;_InitializeGitLabSourceLinkUrl;_InitializeAzureReposGitSourceLinkUrl”(先前值:“;_InitializeGitHubSourceLinkUrl;_InitializeGitLabSourceLinkUrl”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\Microsoft.SourceLink.AzureRepos.Git.targets (13,5) 处重新分配属性: $(SourceControlManagerUrlTranslationTargets)=“;TranslateGitHubUrlsInSourceControlInformation;TranslateGitLabUrlsInSourceControlInformation;TranslateAzureReposGitUrlsInSourceControlInformation”(先前值:“;TranslateGitHubUrlsInSourceControlInformation;TranslateGitLabUrlsInSourceControlInformation”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\Microsoft.SourceLink.Bitbucket.Git.targets (12,5) 处重新分配属性: $(SourceLinkUrlInitializerTargets)=“;_InitializeGitHubSourceLinkUrl;_InitializeGitLabSourceLinkUrl;_InitializeAzureReposGitSourceLinkUrl;_InitializeBitbucketGitSourceLinkUrl”(先前值:“;_InitializeGitHubSourceLinkUrl;_InitializeGitLabSourceLinkUrl;_InitializeAzureReposGitSourceLinkUrl”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\Microsoft.SourceLink.Bitbucket.Git.targets (13,5) 处重新分配属性: $(SourceControlManagerUrlTranslationTargets)=“;TranslateGitHubUrlsInSourceControlInformation;TranslateGitLabUrlsInSourceControlInformation;TranslateAzureReposGitUrlsInSourceControlInformation;TranslateBitbucketGitUrlsInSourceControlInformation”(先前值:“;TranslateGitHubUrlsInSourceControlInformation;TranslateGitLabUrlsInSourceControlInformation;TranslateAzureReposGitUrlsInSourceControlInformation”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\Microsoft.SourceLink.Bitbucket.Git.targets (12,5) 处重新分配属性: $(SourceLinkUrlInitializerTargets)=“;_InitializeGitHubSourceLinkUrl;_InitializeGitLabSourceLinkUrl;_InitializeAzureReposGitSourceLinkUrl;_InitializeBitbucketGitSourceLinkUrl”(先前值:“;_InitializeGitHubSourceLinkUrl;_InitializeGitLabSourceLinkUrl;_InitializeAzureReposGitSourceLinkUrl”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\Microsoft.SourceLink.Bitbucket.Git.targets (13,5) 处重新分配属性: $(SourceControlManagerUrlTranslationTargets)=“;TranslateGitHubUrlsInSourceControlInformation;TranslateGitLabUrlsInSourceControlInformation;TranslateAzureReposGitUrlsInSourceControlInformation;TranslateBitbucketGitUrlsInSourceControlInformation”(先前值:“;TranslateGitHubUrlsInSourceControlInformation;TranslateGitLabUrlsInSourceControlInformation;TranslateAzureReposGitUrlsInSourceControlInformation”)
     2>CollectPackageReferences:
       程序集加载期间 TaskRun: NuGet.Common, Version=6.9.2.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Common.dll, MVID: dbe2e2a4-17f6-48a4-8e27-29ee3db6f1a1, AppDomain: [Default])
     0>在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DesignerSupport.targets (21,5) 处重新分配属性: $(DesignerRuntimeImplementationProjectOutputGroupDependsOn)=“
      
      ;
      
      ;
      BuildOnlySettings;
      PrepareForBuild;
      AssignTargetPaths;
      ResolveReferences
    
    ;
      _GenerateDesignerDepsFile;
      _GenerateDesignerRuntimeConfigFile;
      GetCopyToOutputDirectoryItems;
      _GatherDesignerShadowCopyFiles;
    ”(先前值:“
      ;
      
      ;
      BuildOnlySettings;
      PrepareForBuild;
      AssignTargetPaths;
      ResolveReferences
    
    ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DesignerSupport.targets (21,5) 处重新分配属性: $(DesignerRuntimeImplementationProjectOutputGroupDependsOn)=“
             
             ;
             
             ;
             BuildOnlySettings;
             PrepareForBuild;
             AssignTargetPaths;
             ResolveReferences
           
           ;
             _GenerateDesignerDepsFile;
             _GenerateDesignerRuntimeConfigFile;
             GetCopyToOutputDirectoryItems;
             _GatherDesignerShadowCopyFiles;
           ”(先前值:“
             ;
             
             ;
             BuildOnlySettings;
             PrepareForBuild;
             AssignTargetPaths;
             ResolveReferences
           
           ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.PackTool.targets (68,5) 处重新分配属性: $(_GenerateToolsSettingsFileCacheFile)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\StoryScript.toolssettingsinput.cache”(先前值:“obj\Debug\netstandard2.1\StoryScript.toolssettingsinput.cache”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.PackTool.targets (68,5) 处重新分配属性: $(_GenerateToolsSettingsFileCacheFile)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\Common.toolssettingsinput.cache”(先前值:“obj\Debug\netstandard2.1\Common.toolssettingsinput.cache”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.PackTool.targets (137,5) 处重新分配属性: $(_ShimInputCacheFile)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\StoryScript.shiminput.cache”(先前值:“obj\Debug\netstandard2.1\StoryScript.shiminput.cache”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.PackTool.targets (137,5) 处重新分配属性: $(_ShimInputCacheFile)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\Common.shiminput.cache”(先前值:“obj\Debug\netstandard2.1\Common.shiminput.cache”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.PackTool.targets (139,5) 处重新分配属性: $(_ShimCreatedSentinelFile)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\StoryScript.shimcreated.sentinel”(先前值:“obj\Debug\netstandard2.1\StoryScript.shimcreated.sentinel”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.PackTool.targets (139,5) 处重新分配属性: $(_ShimCreatedSentinelFile)=“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\Common.shimcreated.sentinel”(先前值:“obj\Debug\netstandard2.1\Common.shimcreated.sentinel”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.CSharp.targets (31,5) 处重新分配属性: $(DefineConstants)=“TRACE;DEBUG”(先前值:“TRACE”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.CSharp.targets (31,5) 处重新分配属性: $(DefineConstants)=“TRACE;DEBUG;ENABLE_ERROR_LOG;ENABLE_LOG;DEBUG”(先前值:“TRACE;DEBUG;ENABLE_ERROR_LOG;ENABLE_LOG”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.CSharp.targets (34,5) 处重新分配属性: $(DefineConstants)=“TRACE;DEBUG;NETSTANDARD;NETSTANDARD2_1;”(先前值:“TRACE;DEBUG”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.CSharp.targets (34,5) 处重新分配属性: $(DefineConstants)=“TRACE;DEBUG;ENABLE_ERROR_LOG;ENABLE_LOG;DEBUG;NETSTANDARD;NETSTANDARD2_1;”(先前值:“TRACE;DEBUG;ENABLE_ERROR_LOG;ENABLE_LOG;DEBUG”)
     2>CollectPackageReferences:
       程序集加载期间 TaskRun: NuGet.Commands, Version=6.9.2.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Commands.dll, MVID: 18d12257-a587-4a80-aca0-7fb2ce5ac8cb, AppDomain: [Default])
     0>在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Windows.targets (44,5) 处重新分配属性: $(SupportedOSPlatformVersion)=“7.0”(先前值:“”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Windows.targets (44,5) 处重新分配属性: $(SupportedOSPlatformVersion)=“7.0”(先前值:“”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Windows.targets (45,5) 处重新分配属性: $(TargetPlatformMinVersion)=“7.0”(先前值:“”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Windows.targets (45,5) 处重新分配属性: $(TargetPlatformMinVersion)=“7.0”(先前值:“”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\NuGet.Build.Tasks.Pack\build\NuGet.Build.Tasks.Pack.targets (34,5) 处重新分配属性: $(PackageDescription)=“Package Description”(先前值:“”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\NuGet.Build.Tasks.Pack\build\NuGet.Build.Tasks.Pack.targets (34,5) 处重新分配属性: $(PackageDescription)=“Package Description”(先前值:“”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\NuGet.Build.Tasks.Pack\build\NuGet.Build.Tasks.Pack.targets (59,5) 处重新分配属性: $(GenerateNuspecDependsOn)=“Build;_LoadPackInputItems; _GetTargetFrameworksOutput; _WalkEachTargetPerFramework; _GetPackageFiles; ”(先前值:“_LoadPackInputItems; _GetTargetFrameworksOutput; _WalkEachTargetPerFramework; _GetPackageFiles; ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Sdks\NuGet.Build.Tasks.Pack\build\NuGet.Build.Tasks.Pack.targets (59,5) 处重新分配属性: $(GenerateNuspecDependsOn)=“Build;_LoadPackInputItems; _GetTargetFrameworksOutput; _WalkEachTargetPerFramework; _GetPackageFiles; ”(先前值:“_LoadPackInputItems; _GetTargetFrameworksOutput; _WalkEachTargetPerFramework; _GetPackageFiles; ”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Containers\build\Microsoft.NET.Build.Containers.targets (5,5) 处重新分配属性: $(_IsSDKContainerAllowedVersion)=“true”(先前值:“false”)
       在 C:\Program Files\dotnet\sdk\8.0.204\Containers\build\Microsoft.NET.Build.Containers.targets (5,5) 处重新分配属性: $(_IsSDKContainerAllowedVersion)=“true”(先前值:“false”)
     2>CollectPackageReferences:
       程序集加载期间 TaskRun: Microsoft.Build.Utilities.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a (位置: C:\WINDOWS\Microsoft.Net\assembly\GAC_MSIL\Microsoft.Build.Utilities.v4.0\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.Build.Utilities.v4.0.dll, MVID: 5d93d82f-cf9b-491a-95aa-3bdfc7dd6af8, AppDomain: [Default])
       程序集加载期间 TaskRun: NuGet.ProjectModel, Version=6.9.2.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.ProjectModel.dll, MVID: 16bf4f41-0e52-4426-8c76-7081c6cb31e9, AppDomain: [Default])
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Build.Tasks.dll”中的“CheckForDuplicateNuGetItemsTask”任务。
       任务“CheckForDuplicateNuGetItemsTask”
       已完成执行任务“CheckForDuplicateNuGetItemsTask”的操作。
     2>已完成在项目“GameCore.csproj”中生成目标“CollectPackageReferences”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets”中的目标“_GetRestoreProjectStyle”(目标“EnableIntermediateOutputPathMismatchWarning”依赖于它):
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Build.Tasks.dll”中的“GetRestoreProjectStyleTask”任务。
       任务“GetRestoreProjectStyleTask”
       已完成执行任务“GetRestoreProjectStyleTask”的操作。
     2>已完成在项目“GameCore.csproj”中生成目标“_GetRestoreProjectStyle”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets”中的目标“EnableIntermediateOutputPathMismatchWarning”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
     2>已完成在项目“GameCore.csproj”中生成目标“EnableIntermediateOutputPathMismatchWarning”的操作。
       由于条件的计算结果为 false，已跳过目标“ApplyImplicitVersions”；('@(PackageReference)' != '')的计算结果为('' != '')。
       已跳过目标“CheckForImplicitPackageReferenceOverrides”。以前的生成已成功。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.Shared.targets”中的目标“CheckForDuplicateItems”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“CheckForDuplicateItems”任务。
       任务“CheckForDuplicateItems”
       已完成执行任务“CheckForDuplicateItems”的操作。
       任务“CheckForDuplicateItems”
       已完成执行任务“CheckForDuplicateItems”的操作。
       任务“CheckForDuplicateItems”
       已完成执行任务“CheckForDuplicateItems”的操作。
     2>已完成在项目“GameCore.csproj”中生成目标“CheckForDuplicateItems”的操作。
       由于条件的计算结果为 false，已跳过目标“WarnForExplicitVersions”；('@(SdkBuildWarning)' != '')的计算结果为('' != '')。
       由于条件的计算结果为 false，已跳过目标“_CheckForFailedSDKResolution”；('$(SdkResolverHonoredGlobalJson)' == 'false')的计算结果为('' == 'false')。
       由于条件的计算结果为 false，已跳过目标“_WarnWhenUsingNET8AndVSPriorTo178”；($([MSBuild]::VersionLessThan($(MSBuildVersion), '17.8.0')) and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(_TargetFrameworkVersionWithoutV), '8.0')))的计算结果为(False and '.NETStandard' == '.NETCoreApp' and False)。
       由于条件的计算结果为 false，已跳过目标“_CheckForInvalidWindowsDesktopTargetingConfiguration”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(_TargetFrameworkVersionWithoutV), '5.0')) and ('$(UseWindowsForms)' == 'true' or '$(UseWPF)' == 'true'))的计算结果为('.NETStandard' == '.NETCoreApp' and False and ('' == 'true' or '' == 'true'))。
       由于条件的计算结果为 false，已跳过目标“_CheckForUnnecessaryWindowsDesktopSDK”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(_TargetFrameworkVersionWithoutV), '5.0')) and '$(_MicrosoftWindowsDesktopSdkImported)' == 'true' and '$(TargetFrameworks)' == '')的计算结果为('.NETStandard' == '.NETCoreApp' and False and '' == 'true' and '' == '')。
       已跳过目标“ProcessFrameworkReferences”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“IncludeTargetingPackReference”；('$(TargetFrameworkMoniker)' != '' and '$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(AutomaticallyUseReferenceAssemblyPackages)' == 'true')的计算结果为('.NETStandard,Version=v2.1' != '' and '.NETStandard' == '.NETFramework' and 'true' == 'true')。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CheckForInvalidConfigurationAndPlatform”(目标“BeforeClean”依赖于它):
       由于 false 条件，已跳过任务“Error”；( '$(_InvalidConfigurationError)' == 'true' )计算为( '' == 'true' )。
       由于 false 条件，已跳过任务“Warning”；( '$(_InvalidConfigurationWarning)' == 'true' )计算为( '' == 'true' )。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Message”任务。
       任务“Message”
         Configuration=Debug
       已完成执行任务“Message”的操作。
       任务“Message”
         Platform=AnyCPU
       已完成执行任务“Message”的操作。
       由于 false 条件，已跳过任务“Error”；('$(OutDir)' != '' and !HasTrailingSlash('$(OutDir)'))计算为('bin\Debug\netstandard2.1\' != '' and !HasTrailingSlash('bin\Debug\netstandard2.1\'))。
       由于 false 条件，已跳过任务“Error”；('$(IntermediateOutputPath)' != '' and !HasTrailingSlash('$(IntermediateOutputPath)'))计算为('obj\Debug\netstandard2.1\' != '' and !HasTrailingSlash('obj\Debug\netstandard2.1\'))。
       由于 false 条件，已跳过任务“Error”；('$(BaseIntermediateOutputPath)' != '' and !HasTrailingSlash('$(BaseIntermediateOutputPath)'))计算为('obj\' != '' and !HasTrailingSlash('obj\'))。
       由于 false 条件，已跳过任务“Error”；( '$(_InitialMSBuildProjectExtensionsPath)' != '' And '$(MSBuildProjectExtensionsPath)' != '$(_InitialMSBuildProjectExtensionsPath)' )计算为( 'F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\' != '' And 'F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\' != 'F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\' )。
       由于 false 条件，已跳过任务“Warning”；( '$(EnableBaseIntermediateOutputPathMismatchWarning)' == 'true' And '$(_InitialBaseIntermediateOutputPath)' != '$(BaseIntermediateOutputPath)' And '$(BaseIntermediateOutputPath)' != '$(MSBuildProjectExtensionsPath)' )计算为( 'true' == 'true' And 'obj\' != 'obj\' And 'obj\' != 'F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\' )。
     2>已完成在项目“GameCore.csproj”中生成目标“_CheckForInvalidConfigurationAndPlatform”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“ValidateCommandLineProperties”(目标“BeforeClean”依赖于它):
     2>已完成在项目“GameCore.csproj”中生成目标“ValidateCommandLineProperties”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeClean”(目标“Clean”依赖于它):
     2>已完成在项目“GameCore.csproj”中生成目标“BeforeClean”的操作。
       由于条件的计算结果为 false，已跳过目标“UnmanagedUnregistration”；((('$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)' or '$(RegisterForComInterop)' != 'true' or '$(OutputType)' != 'library') or
                           ('$(_AssemblyTimestampBeforeCompile)' == '')) and
                          Exists('@(_UnmanagedRegistrationCache)'))的计算结果为((('' != '' or '' != 'true' or 'Library' != 'library') or
                           ('' == '')) and
                          Exists('obj\GameCore.csproj.UnmanagedRegistration.cache'))。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“_SdkBeforeClean”(目标“CoreClean”依赖于它):
     2>已完成在项目“GameCore.csproj”中生成目标“_SdkBeforeClean”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CoreClean”(目标“Clean”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Delete”任务。
       任务“Delete”
     0>正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveFrameworkReferences”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“ResolveFrameworkReferences”。
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveFrameworkReferences”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“ResolveFrameworkReferences”。
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.WorkflowBuildExtensions.targets”中的目标“GenerateCompiledExpressionsTempFile”重写项目“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets”中的目标“GenerateCompiledExpressionsTempFile”。
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets”中的目标“CollectPackageReferences”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“CollectPackageReferences”。
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.WorkflowBuildExtensions.targets”中的目标“GenerateCompiledExpressionsTempFile”重写项目“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets”中的目标“GenerateCompiledExpressionsTempFile”。
       正在使用项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets”中的目标“CollectPackageReferences”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“CollectPackageReferences”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“ResolvePackageDependenciesDesignTime”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“ResolvePackageDependenciesDesignTime”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“CollectSDKReferencesDesignTime”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“CollectSDKReferencesDesignTime”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“CollectResolvedSDKReferencesDesignTime”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“CollectResolvedSDKReferencesDesignTime”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets”中的目标“ResolveFrameworkReferences”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveFrameworkReferences”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“ResolvePackageDependenciesDesignTime”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“ResolvePackageDependenciesDesignTime”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“CollectSDKReferencesDesignTime”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“CollectSDKReferencesDesignTime”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“CollectResolvedSDKReferencesDesignTime”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets”中的目标“CollectResolvedSDKReferencesDesignTime”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“Run”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Run”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“GenerateSupportedTargetFrameworkAlias”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GenerateSupportedTargetFrameworkAlias”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets”中的目标“ResolveFrameworkReferences”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveFrameworkReferences”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DisableStandardFrameworkResolution.targets”中的目标“GetReferenceAssemblyPaths”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetReferenceAssemblyPaths”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DisableStandardFrameworkResolution.targets”中的目标“GetFrameworkPaths”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetFrameworkPaths”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DesignerSupport.targets”中的目标“DesignerRuntimeImplementationProjectOutputGroup”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“DesignerRuntimeImplementationProjectOutputGroup”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“Run”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Run”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“GenerateSupportedTargetFrameworkAlias”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GenerateSupportedTargetFrameworkAlias”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Publish.targets”中的目标“Publish”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Publish”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DisableStandardFrameworkResolution.targets”中的目标“GetReferenceAssemblyPaths”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetReferenceAssemblyPaths”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Publish.targets”中的目标“ResolveReadyToRunCompilers”重写项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.CrossGen.targets”中的目标“ResolveReadyToRunCompilers”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DisableStandardFrameworkResolution.targets”中的目标“GetFrameworkPaths”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetFrameworkPaths”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DesignerSupport.targets”中的目标“DesignerRuntimeImplementationProjectOutputGroup”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“DesignerRuntimeImplementationProjectOutputGroup”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Publish.targets”中的目标“GetCopyToPublishDirectoryItems”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetCopyToPublishDirectoryItems”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Publish.targets”中的目标“Publish”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Publish”。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Publish.targets”中的目标“ResolveReadyToRunCompilers”重写项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.CrossGen.targets”中的目标“ResolveReadyToRunCompilers”。
       项目中不存在 AfterTargets 特性中的“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.CSharp.DesignTime.targets (74,45)”位置列出的目标“_PrepareRazorSourceGenerators”，将忽略该目标。
       项目中不存在 AfterTargets 特性中的“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.CodeAnalysis.targets (450,11)”位置列出的目标“ClCompile”，将忽略该目标。
       正在使用项目“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Publish.targets”中的目标“GetCopyToPublishDirectoryItems”重写项目“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetCopyToPublishDirectoryItems”。
       项目中不存在 AfterTargets 特性中的“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\Managed\Microsoft.CSharp.DesignTime.targets (74,45)”位置列出的目标“_PrepareRazorSourceGenerators”，将忽略该目标。
       项目中不存在 AfterTargets 特性中的“C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VisualStudio\v17.0\CodeAnalysis\Microsoft.CodeAnalysis.targets (450,11)”位置列出的目标“ClCompile”，将忽略该目标。
     1>项目“F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”(1)正在节点 2 上生成“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(3) (Clean 个目标)。
     3>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetFramework”；('$(_UnsupportedTargetFrameworkError)' == 'true')的计算结果为('' == 'true')。
     1>项目“F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”(1)正在节点 3 上生成“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(4) (Clean 个目标)。
     4>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetFramework”；('$(_UnsupportedTargetFrameworkError)' == 'true')的计算结果为('' == 'true')。
     2>CoreClean:
         文件“obj\Debug\netstandard2.1\\TempCA\GameCore.pdb”不存在。正在跳过。
         文件“obj\Debug\netstandard2.1\\TempCA\GameCore.dll”不存在。正在跳过。
       已完成执行任务“Delete”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ReadLinesFromFile”任务。
       任务“ReadLinesFromFile”
       已完成执行任务“ReadLinesFromFile”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“FindUnderPath”任务。
       任务“FindUnderPath”
         比较路径为“bin\Debug\netstandard2.1\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“obj\Debug\netstandard2.1\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“Delete”
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\GameCore.deps.json”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\GameCore.dll”。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets”中的目标“_CollectTargetFrameworkForTelemetry”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
     3>正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“AllowEmptyTelemetry”任务。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets”中的目标“_CollectTargetFrameworkForTelemetry”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
     4>正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“AllowEmptyTelemetry”任务。
     3>任务“AllowEmptyTelemetry”
     4>任务“AllowEmptyTelemetry”
     2>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\GameCore.pdb”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\Common.dll”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\Dsl.dll”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\LitJson.dll”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\StoryScript.dll”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\UnityEngine.AIModule.dll”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\UnityEngine.AndroidJNIModule.dll”。
     4>已完成执行任务“AllowEmptyTelemetry”的操作。
     3>已完成执行任务“AllowEmptyTelemetry”的操作。
     4>已完成在项目“StoryScript.csproj”中生成目标“_CollectTargetFrameworkForTelemetry”的操作。
     3>已完成在项目“Common.csproj”中生成目标“_CollectTargetFrameworkForTelemetry”的操作。
     2>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\UnityEngine.AnimationModule.dll”。
     4>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetPlatformIdentifier”；('$(TargetPlatformIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) And ('$(DesignTimeBuild)' != 'true' Or '@(MissingWorkloadPack)' == ''))的计算结果为('Windows' != '' and '.NETStandard' == '.NETCoreApp' and False And ('' != 'true' Or '' == ''))。
     3>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetPlatformIdentifier”；('$(TargetPlatformIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) And ('$(DesignTimeBuild)' != 'true' Or '@(MissingWorkloadPack)' == ''))的计算结果为('Windows' != '' and '.NETStandard' == '.NETCoreApp' and False And ('' != 'true' Or '' == ''))。
     4>由于条件的计算结果为 false，已跳过目标“_CheckForMissingWorkload”；('@(MissingWorkloadPack)' != '' And '$(DesignTimeBuild)' != 'true')的计算结果为('' != '' And '' != 'true')。
     3>由于条件的计算结果为 false，已跳过目标“_CheckForMissingWorkload”；('@(MissingWorkloadPack)' != '' And '$(DesignTimeBuild)' != 'true')的计算结果为('' != '' And '' != 'true')。
       由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedNETCoreVersion”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' And '$(NETCoreAppMaximumVersion)' != '')的计算结果为('.NETStandard' == '.NETCoreApp' And '8.0' != '')。
     4>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedNETCoreVersion”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' And '$(NETCoreAppMaximumVersion)' != '')的计算结果为('.NETStandard' == '.NETCoreApp' And '8.0' != '')。
       由于条件的计算结果为 false，已跳过目标“_CheckForEolTargetFrameworks”；('@(_EolNetCoreTargetFrameworkVersions->AnyHaveMetadataValue('Identity', '$(_TargetFrameworkVersionWithoutV)'))' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(CheckEolTargetFramework)' == 'true')的计算结果为('true' and '.NETStandard' == '.NETCoreApp' and '' == 'true')。
     3>由于条件的计算结果为 false，已跳过目标“_CheckForEolTargetFrameworks”；('@(_EolNetCoreTargetFrameworkVersions->AnyHaveMetadataValue('Identity', '$(_TargetFrameworkVersionWithoutV)'))' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(CheckEolTargetFramework)' == 'true')的计算结果为('true' and '.NETStandard' == '.NETCoreApp' and '' == 'true')。
     2>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\UnityEngine.AudioModule.dll”。
     4>由于条件的计算结果为 false，已跳过目标“_CheckForEolWorkloads”；('@(EolWorkload)' != '' and '$(CheckEolWorkloads)' == 'true')的计算结果为('' != '' and 'true' == 'true')。
     3>由于条件的计算结果为 false，已跳过目标“_CheckForEolWorkloads”；('@(EolWorkload)' != '' and '$(CheckEolWorkloads)' == 'true')的计算结果为('' != '' and 'true' == 'true')。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets”中的目标“_CheckForUnsupportedCppNETCoreVersion”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
       由于 false 条件，已跳过任务“NETSdkError”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(_TargetFrameworkVersionWithoutV)' < '3.1' and ('$(Language)' == 'C++' and '$(_EnablePackageReferencesInVCProjects)' != 'true'))计算为('.NETStandard' == '.NETCoreApp' and '2.1' < '3.1' and ('C#' == 'C++' and '' != 'true'))。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets”中的目标“_CheckForUnsupportedCppNETCoreVersion”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
     4>由于 false 条件，已跳过任务“NETSdkError”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(_TargetFrameworkVersionWithoutV)' < '3.1' and ('$(Language)' == 'C++' and '$(_EnablePackageReferencesInVCProjects)' != 'true'))计算为('.NETStandard' == '.NETCoreApp' and '2.1' < '3.1' and ('C#' == 'C++' and '' != 'true'))。
     3>已完成在项目“Common.csproj”中生成目标“_CheckForUnsupportedCppNETCoreVersion”的操作。
     4>已完成在项目“StoryScript.csproj”中生成目标“_CheckForUnsupportedCppNETCoreVersion”的操作。
     2>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\UnityEngine.CoreModule.dll”。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets”中的目标“_CheckForUnsupportedNETStandardVersion”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
     4>由于 false 条件，已跳过任务“NETSdkError”；('$(_TargetFrameworkVersionWithoutV)' > '$(NETStandardMaximumVersion)')计算为('2.1' > '2.1')。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets”中的目标“_CheckForUnsupportedNETStandardVersion”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
     3>由于 false 条件，已跳过任务“NETSdkError”；('$(_TargetFrameworkVersionWithoutV)' > '$(NETStandardMaximumVersion)')计算为('2.1' > '2.1')。
     3>已完成在项目“Common.csproj”中生成目标“_CheckForUnsupportedNETStandardVersion”的操作。
     4>已完成在项目“StoryScript.csproj”中生成目标“_CheckForUnsupportedNETStandardVersion”的操作。
     3>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetFrameworkAndFeatureCombination”；('$(TargetFrameworkIdentifier)' == '.NETFramework')的计算结果为('.NETStandard' == '.NETFramework')。
     4>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetFrameworkAndFeatureCombination”；('$(TargetFrameworkIdentifier)' == '.NETFramework')的计算结果为('.NETStandard' == '.NETFramework')。
     3>由于条件的计算结果为 false，已跳过目标“_CheckForSupportedOSPlatformVersionHigherThanTargetPlatformVersion”；('$(TargetPlatformVersion)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)))的计算结果为('7.0' != '' and '.NETStandard' == '.NETCoreApp' and False)。
     4>由于条件的计算结果为 false，已跳过目标“_CheckForSupportedOSPlatformVersionHigherThanTargetPlatformVersion”；('$(TargetPlatformVersion)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)))的计算结果为('7.0' != '' and '.NETStandard' == '.NETCoreApp' and False)。
     3>由于条件的计算结果为 false，已跳过目标“_CheckForInvalidTargetPlatformVersion”；('$(TargetPlatformVersion)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) and ('$(Language)' != 'C++' or '$(_EnablePackageReferencesInVCProjects)' == 'true'))的计算结果为('7.0' != '' and '.NETStandard' == '.NETCoreApp' and False and ('C#' != 'C++' or '' == 'true'))。
     2>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\UnityEngine.dll”。
     4>由于条件的计算结果为 false，已跳过目标“_CheckForInvalidTargetPlatformVersion”；('$(TargetPlatformVersion)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) and ('$(Language)' != 'C++' or '$(_EnablePackageReferencesInVCProjects)' == 'true'))的计算结果为('7.0' != '' and '.NETStandard' == '.NETCoreApp' and False and ('C#' != 'C++' or '' == 'true'))。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DefaultOutputPaths.targets”中的目标“_CheckForUnsupportedArtifactsPath”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
     3>由于 false 条件，已跳过任务“NetSdkError”；('$(UseArtifactsOutput)' == 'true' and '$(_ArtifactsPathSetEarly)' != 'true')计算为('' == 'true' and '' != 'true')。
       由于 false 条件，已跳过任务“NetSdkError”；('$(_ArtifactsPathLocationType)' == 'ProjectFolder')计算为('' == 'ProjectFolder')。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DefaultOutputPaths.targets”中的目标“_CheckForUnsupportedArtifactsPath”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
     4>由于 false 条件，已跳过任务“NetSdkError”；('$(UseArtifactsOutput)' == 'true' and '$(_ArtifactsPathSetEarly)' != 'true')计算为('' == 'true' and '' != 'true')。
       由于 false 条件，已跳过任务“NetSdkError”；('$(_ArtifactsPathLocationType)' == 'ProjectFolder')计算为('' == 'ProjectFolder')。
     3>已完成在项目“Common.csproj”中生成目标“_CheckForUnsupportedArtifactsPath”的操作。
     2>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\UnityEngine.ParticleSystemModule.dll”。
     4>已完成在项目“StoryScript.csproj”中生成目标“_CheckForUnsupportedArtifactsPath”的操作。
     3>由于条件的计算结果为 false，已跳过目标“_CheckForMissingWorkload”；('@(MissingWorkloadPack)' != '' And '$(DesignTimeBuild)' != 'true')的计算结果为('' != '' And '' != 'true')。
     4>由于条件的计算结果为 false，已跳过目标“_CheckForMissingWorkload”；('@(MissingWorkloadPack)' != '' And '$(DesignTimeBuild)' != 'true')的计算结果为('' != '' And '' != 'true')。
     3>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedAppHostUsage”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(HasRuntimeOutput)' == 'true')的计算结果为('.NETStandard' == '.NETCoreApp' and '' == 'true')。
     4>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedAppHostUsage”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(HasRuntimeOutput)' == 'true')的计算结果为('.NETStandard' == '.NETCoreApp' and '' == 'true')。
     3>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedHostingUsage”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp')的计算结果为('.NETStandard' == '.NETCoreApp')。
     4>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedHostingUsage”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp')的计算结果为('.NETStandard' == '.NETCoreApp')。
     2>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\UnityEngine.PhysicsModule.dll”。
     3>由于条件的计算结果为 false，已跳过目标“_CheckAndUnsetUnsupportedPrefer32Bit”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(_TargetFrameworkVersionWithoutV)' >= '7.0')的计算结果为('.NETStandard' == '.NETCoreApp' and '2.1' >= '7.0')。
     4>由于条件的计算结果为 false，已跳过目标“_CheckAndUnsetUnsupportedPrefer32Bit”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(_TargetFrameworkVersionWithoutV)' >= '7.0')的计算结果为('.NETStandard' == '.NETCoreApp' and '2.1' >= '7.0')。
       由于条件的计算结果为 false，已跳过目标“_CheckForMismatchingPlatform”；('$(RuntimeIdentifier)' != '' and '$(PlatformTarget)' != '')的计算结果为('' != '' and '' != '')。
     3>由于条件的计算结果为 false，已跳过目标“_CheckForMismatchingPlatform”；('$(RuntimeIdentifier)' != '' and '$(PlatformTarget)' != '')的计算结果为('' != '' and '' != '')。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.RuntimeIdentifierInference.targets”中的目标“_CheckForLanguageAndFeatureCombinationSupport”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
     4>由于 false 条件，已跳过任务“NETSdkError”；(('$(Language)' == 'C++' and '$(_EnablePackageReferencesInVCProjects)' != 'true') and $(OutputType) != 'library' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp')计算为(('C#' == 'C++' and '' != 'true') and Library != 'library' and '.NETStandard' == '.NETCoreApp')。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.RuntimeIdentifierInference.targets”中的目标“_CheckForLanguageAndFeatureCombinationSupport”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
     3>由于 false 条件，已跳过任务“NETSdkError”；(('$(Language)' == 'C++' and '$(_EnablePackageReferencesInVCProjects)' != 'true') and $(OutputType) != 'library' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp')计算为(('C#' == 'C++' and '' != 'true') and Library != 'library' and '.NETStandard' == '.NETCoreApp')。
     4>_CheckForLanguageAndFeatureCombinationSupport:
       由于 false 条件，已跳过任务“NETSdkError”；(('$(Language)' == 'C++' and '$(_EnablePackageReferencesInVCProjects)' != 'true') and $(EnableComHosting) == 'true')计算为(('C#' == 'C++' and '' != 'true') and  == 'true')。
     3>_CheckForLanguageAndFeatureCombinationSupport:
       由于 false 条件，已跳过任务“NETSdkError”；(('$(Language)' == 'C++' and '$(_EnablePackageReferencesInVCProjects)' != 'true') and $(EnableComHosting) == 'true')计算为(('C#' == 'C++' and '' != 'true') and  == 'true')。
     2>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\UnityEngine.UI.dll”。
     4>_CheckForLanguageAndFeatureCombinationSupport:
       由于 false 条件，已跳过任务“NETSdkError”；(('$(Language)' == 'C++' and '$(_EnablePackageReferencesInVCProjects)' != 'true') and $(SelfContained) == 'true')计算为(('C#' == 'C++' and '' != 'true') and  == 'true')。
     3>_CheckForLanguageAndFeatureCombinationSupport:
       由于 false 条件，已跳过任务“NETSdkError”；(('$(Language)' == 'C++' and '$(_EnablePackageReferencesInVCProjects)' != 'true') and $(SelfContained) == 'true')计算为(('C#' == 'C++' and '' != 'true') and  == 'true')。
     4>已完成在项目“StoryScript.csproj”中生成目标“_CheckForLanguageAndFeatureCombinationSupport”的操作。
     3>已完成在项目“Common.csproj”中生成目标“_CheckForLanguageAndFeatureCombinationSupport”的操作。
     4>由于条件的计算结果为 false，已跳过目标“_CheckForNETCoreSdkIsPreview”；( '$(_NETCoreSdkIsPreview)' == 'true' AND '$(SuppressNETCoreSdkPreviewMessage)' != 'true' )的计算结果为( 'false' == 'true' AND '' != 'true' )。
     3>由于条件的计算结果为 false，已跳过目标“_CheckForNETCoreSdkIsPreview”；( '$(_NETCoreSdkIsPreview)' == 'true' AND '$(SuppressNETCoreSdkPreviewMessage)' != 'true' )的计算结果为( 'false' == 'true' AND '' != 'true' )。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets”中的目标“_GetProjectJsonPath”(目标“_GetRestoreProjectStyle”依赖于它):
     4>由于 false 条件，已跳过任务“GetRestoreProjectJsonPathTask”；( '$(RestoreProjectStyle)' == 'ProjectJson' OR '$(RestoreProjectStyle)' == '' )计算为( 'PackageReference' == 'ProjectJson' OR 'PackageReference' == '' )。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets”中的目标“_GetProjectJsonPath”(目标“_GetRestoreProjectStyle”依赖于它):
     3>由于 false 条件，已跳过任务“GetRestoreProjectJsonPathTask”；( '$(RestoreProjectStyle)' == 'ProjectJson' OR '$(RestoreProjectStyle)' == '' )计算为( 'PackageReference' == 'ProjectJson' OR 'PackageReference' == '' )。
     4>已完成在项目“StoryScript.csproj”中生成目标“_GetProjectJsonPath”的操作。
     3>已完成在项目“Common.csproj”中生成目标“_GetProjectJsonPath”的操作。
     4>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetPlatformIdentifier”；('$(TargetPlatformIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) And ('$(DesignTimeBuild)' != 'true' Or '@(MissingWorkloadPack)' == ''))的计算结果为('Windows' != '' and '.NETStandard' == '.NETCoreApp' and False And ('' != 'true' Or '' == ''))。
     2>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\Common.pdb”。
     3>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetPlatformIdentifier”；('$(TargetPlatformIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) And ('$(DesignTimeBuild)' != 'true' Or '@(MissingWorkloadPack)' == ''))的计算结果为('Windows' != '' and '.NETStandard' == '.NETCoreApp' and False And ('' != 'true' Or '' == ''))。
     4>由于条件的计算结果为 false，已跳过目标“_CheckForMissingWorkload”；('@(MissingWorkloadPack)' != '' And '$(DesignTimeBuild)' != 'true')的计算结果为('' != '' And '' != 'true')。
     3>由于条件的计算结果为 false，已跳过目标“_CheckForMissingWorkload”；('@(MissingWorkloadPack)' != '' And '$(DesignTimeBuild)' != 'true')的计算结果为('' != '' And '' != 'true')。
     4>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedNETCoreVersion”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' And '$(NETCoreAppMaximumVersion)' != '')的计算结果为('.NETStandard' == '.NETCoreApp' And '8.0' != '')。
     3>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedNETCoreVersion”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' And '$(NETCoreAppMaximumVersion)' != '')的计算结果为('.NETStandard' == '.NETCoreApp' And '8.0' != '')。
     4>由于条件的计算结果为 false，已跳过目标“_CheckForEolTargetFrameworks”；('@(_EolNetCoreTargetFrameworkVersions->AnyHaveMetadataValue('Identity', '$(_TargetFrameworkVersionWithoutV)'))' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(CheckEolTargetFramework)' == 'true')的计算结果为('true' and '.NETStandard' == '.NETCoreApp' and '' == 'true')。
     3>由于条件的计算结果为 false，已跳过目标“_CheckForEolTargetFrameworks”；('@(_EolNetCoreTargetFrameworkVersions->AnyHaveMetadataValue('Identity', '$(_TargetFrameworkVersionWithoutV)'))' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(CheckEolTargetFramework)' == 'true')的计算结果为('true' and '.NETStandard' == '.NETCoreApp' and '' == 'true')。
     4>由于条件的计算结果为 false，已跳过目标“_CheckForEolWorkloads”；('@(EolWorkload)' != '' and '$(CheckEolWorkloads)' == 'true')的计算结果为('' != '' and 'true' == 'true')。
     3>由于条件的计算结果为 false，已跳过目标“_CheckForEolWorkloads”；('@(EolWorkload)' != '' and '$(CheckEolWorkloads)' == 'true')的计算结果为('' != '' and 'true' == 'true')。
     4>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetFrameworkAndFeatureCombination”；('$(TargetFrameworkIdentifier)' == '.NETFramework')的计算结果为('.NETStandard' == '.NETFramework')。
     2>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\StoryScript.pdb”。
     3>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetFrameworkAndFeatureCombination”；('$(TargetFrameworkIdentifier)' == '.NETFramework')的计算结果为('.NETStandard' == '.NETFramework')。
     4>由于条件的计算结果为 false，已跳过目标“ApplyImplicitVersions”；('@(PackageReference)' != '')的计算结果为('' != '')。
     3>由于条件的计算结果为 false，已跳过目标“ApplyImplicitVersions”；('@(PackageReference)' != '')的计算结果为('' != '')。
     4>由于条件的计算结果为 false，已跳过目标“IncludeTargetingPackReference”；('$(TargetFrameworkMoniker)' != '' and '$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(AutomaticallyUseReferenceAssemblyPackages)' == 'true')的计算结果为('.NETStandard,Version=v2.1' != '' and '.NETStandard' == '.NETFramework' and 'true' == 'true')。
     3>由于条件的计算结果为 false，已跳过目标“IncludeTargetingPackReference”；('$(TargetFrameworkMoniker)' != '' and '$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(AutomaticallyUseReferenceAssemblyPackages)' == 'true')的计算结果为('.NETStandard,Version=v2.1' != '' and '.NETStandard' == '.NETFramework' and 'true' == 'true')。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.Shared.targets”中的目标“CheckForImplicitPackageReferenceOverrides”(目标“CollectPackageReferences”依赖于它):
     4>正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“CheckForImplicitPackageReferenceOverrides”任务。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.Shared.targets”中的目标“CheckForImplicitPackageReferenceOverrides”(目标“CollectPackageReferences”依赖于它):
     3>正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“CheckForImplicitPackageReferenceOverrides”任务。
     4>任务“CheckForImplicitPackageReferenceOverrides”
     3>任务“CheckForImplicitPackageReferenceOverrides”
     2>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\Dsl.pdb”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\GameCore.csproj.AssemblyReference.cache”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\GameCore.GeneratedMSBuildEditorConfig.editorconfig”。
     3>已完成执行任务“CheckForImplicitPackageReferenceOverrides”的操作。
     4>已完成执行任务“CheckForImplicitPackageReferenceOverrides”的操作。
     3>已完成在项目“Common.csproj”中生成目标“CheckForImplicitPackageReferenceOverrides”的操作。
     2>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\GameCore.csproj.CoreCompileInputs.cache”。
     4>已完成在项目“StoryScript.csproj”中生成目标“CheckForImplicitPackageReferenceOverrides”的操作。
     3>由于条件的计算结果为 false，已跳过目标“AddWindowsSdkKnownFrameworkReferences”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' And '$(TargetPlatformIdentifier)' == 'Windows')的计算结果为('.NETStandard' == '.NETCoreApp' And 'Windows' == 'Windows')。
     4>由于条件的计算结果为 false，已跳过目标“AddWindowsSdkKnownFrameworkReferences”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' And '$(TargetPlatformIdentifier)' == 'Windows')的计算结果为('.NETStandard' == '.NETCoreApp' And 'Windows' == 'Windows')。
     3>由于条件的计算结果为 false，已跳过目标“_NormalizeTargetPlatformVersion”；('$(TargetPlatformVersion)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) and ('$(Language)' != 'C++' or '$(_EnablePackageReferencesInVCProjects)' == 'true'))的计算结果为('7.0' != '' and '.NETStandard' == '.NETCoreApp' and False and ('C#' != 'C++' or '' == 'true'))。
     4>由于条件的计算结果为 false，已跳过目标“_NormalizeTargetPlatformVersion”；('$(TargetPlatformVersion)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) and ('$(Language)' != 'C++' or '$(_EnablePackageReferencesInVCProjects)' == 'true'))的计算结果为('7.0' != '' and '.NETStandard' == '.NETCoreApp' and False and ('C#' != 'C++' or '' == 'true'))。
     3>由于条件的计算结果为 false，已跳过目标“ApplyImplicitVersions”；('@(PackageReference)' != '')的计算结果为('' != '')。
     4>由于条件的计算结果为 false，已跳过目标“ApplyImplicitVersions”；('@(PackageReference)' != '')的计算结果为('' != '')。
     2>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\GameCore.sourcelink.json”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\GameCore.csproj.Up2Date”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\GameCore.dll”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\GameCore.pdb”。
       已完成执行任务“Delete”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“RemoveDuplicates”任务。
       任务“RemoveDuplicates”
       已完成执行任务“RemoveDuplicates”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“MakeDir”任务。
       任务“MakeDir”
       已完成执行任务“MakeDir”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“WriteLinesToFile”任务。
       任务“WriteLinesToFile”
       已完成执行任务“WriteLinesToFile”的操作。
     2>已完成在项目“GameCore.csproj”中生成目标“CoreClean”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“IgnoreJavaScriptOutputAssembly”(目标“AssignProjectConfiguration”依赖于它):
     2>已完成在项目“GameCore.csproj”中生成目标“IgnoreJavaScriptOutputAssembly”的操作。
       已跳过目标“ProcessFrameworkReferences”。以前的生成已成功。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.Shared.targets”中的目标“_DefaultMicrosoftNETPlatformLibrary”(目标“ResolvePackageAssets”依赖于它):
     2>已完成在项目“GameCore.csproj”中生成目标“_DefaultMicrosoftNETPlatformLibrary”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.Shared.targets”中的目标“_ComputePackageReferencePublish”(目标“ResolvePackageAssets”依赖于它):
     2>已完成在项目“GameCore.csproj”中生成目标“_ComputePackageReferencePublish”的操作。
       由于条件的计算结果为 false，已跳过目标“_ResolveCompilerVersion”；('$(CompilerApiVersion)' == '' And
                            ('$(Language)' == 'C#' Or '$(Language)' == 'VB') And
                            Exists('$(RoslynTargetsPath)\Microsoft.Build.Tasks.CodeAnalysis.dll'))的计算结果为('roslyn4.9' == '' And
                            ('C#' == 'C#' Or 'C#' == 'VB') And
                            Exists('C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Build.Tasks.CodeAnalysis.dll'))。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“ResolvePackageAssets”(目标“ResolveLockFileReferences”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ResolvePackageAssets”任务。
       任务“ResolvePackageAssets”
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Publish.targets”中的目标“_ComputeToolPackInputsToProcessFrameworkReferences”(目标“ProcessFrameworkReferences”依赖于它):
     4>已完成在项目“StoryScript.csproj”中生成目标“_ComputeToolPackInputsToProcessFrameworkReferences”的操作。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Publish.targets”中的目标“_ComputeToolPackInputsToProcessFrameworkReferences”(目标“ProcessFrameworkReferences”依赖于它):
     3>已完成在项目“Common.csproj”中生成目标“_ComputeToolPackInputsToProcessFrameworkReferences”的操作。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets”中的目标“ProcessFrameworkReferences”(目标“CollectPackageReferences”依赖于它):
     4>正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“CheckForDuplicateFrameworkReferences”任务。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets”中的目标“ProcessFrameworkReferences”(目标“CollectPackageReferences”依赖于它):
     3>正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“CheckForDuplicateFrameworkReferences”任务。
     4>任务“CheckForDuplicateFrameworkReferences”
     3>任务“CheckForDuplicateFrameworkReferences”
     4>已完成执行任务“CheckForDuplicateFrameworkReferences”的操作。
     3>已完成执行任务“CheckForDuplicateFrameworkReferences”的操作。
     4>ProcessFrameworkReferences:
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ProcessFrameworkReferences”任务。
     3>ProcessFrameworkReferences:
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ProcessFrameworkReferences”任务。
     4>任务“ProcessFrameworkReferences”
     3>任务“ProcessFrameworkReferences”
       已完成执行任务“ProcessFrameworkReferences”的操作。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ResolveAppHosts”任务。
       任务“ResolveAppHosts”
       已完成执行任务“ResolveAppHosts”的操作。
     3>已完成在项目“Common.csproj”中生成目标“ProcessFrameworkReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“IncludeTargetingPackReference”；('$(TargetFrameworkMoniker)' != '' and '$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(AutomaticallyUseReferenceAssemblyPackages)' == 'true')的计算结果为('.NETStandard,Version=v2.1' != '' and '.NETStandard' == '.NETFramework' and 'true' == 'true')。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“_AddMicrosoftNetCompilerToolsetFrameworkPackage”(目标“CollectPackageReferences”依赖于它):
       由于 false 条件，已跳过任务“NETSdkWarning”；('@(PackageReference->AnyHaveMetadataValue('Identity', 'Microsoft.Net.Compilers.Toolset.Framework'))' == 'true')计算为('false' == 'true')。
     3>已完成在项目“Common.csproj”中生成目标“_AddMicrosoftNetCompilerToolsetFrameworkPackage”的操作。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.ObsoleteReferences.targets”中的目标“_CheckForObsoleteDotNetCliToolReferences”(目标“CollectPackageReferences”依赖于它):
       由于 false 条件，已跳过任务“NETSdkWarning”；( '%(_ReferenceToObsoleteDotNetCliTool.Identity)' != '' )计算为( '' != '' )。
     3>已完成在项目“Common.csproj”中生成目标“_CheckForObsoleteDotNetCliToolReferences”的操作。
     4>已完成执行任务“ProcessFrameworkReferences”的操作。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ResolveAppHosts”任务。
       任务“ResolveAppHosts”
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets”中的目标“CollectPackageReferences”(目标“_GetRestoreProjectStyle”依赖于它):
     3>程序集加载期间 TaskRun: NuGet.Build.Tasks, Version=6.9.2.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Build.Tasks.dll, MVID: 387e3575-06a2-46ce-ba2b-3ecfc703013a, AppDomain: [Default])
     4>已完成执行任务“ResolveAppHosts”的操作。
     4>已完成在项目“StoryScript.csproj”中生成目标“ProcessFrameworkReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“IncludeTargetingPackReference”；('$(TargetFrameworkMoniker)' != '' and '$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(AutomaticallyUseReferenceAssemblyPackages)' == 'true')的计算结果为('.NETStandard,Version=v2.1' != '' and '.NETStandard' == '.NETFramework' and 'true' == 'true')。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“_AddMicrosoftNetCompilerToolsetFrameworkPackage”(目标“CollectPackageReferences”依赖于它):
       由于 false 条件，已跳过任务“NETSdkWarning”；('@(PackageReference->AnyHaveMetadataValue('Identity', 'Microsoft.Net.Compilers.Toolset.Framework'))' == 'true')计算为('false' == 'true')。
     4>已完成在项目“StoryScript.csproj”中生成目标“_AddMicrosoftNetCompilerToolsetFrameworkPackage”的操作。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.ObsoleteReferences.targets”中的目标“_CheckForObsoleteDotNetCliToolReferences”(目标“CollectPackageReferences”依赖于它):
       由于 false 条件，已跳过任务“NETSdkWarning”；( '%(_ReferenceToObsoleteDotNetCliTool.Identity)' != '' )计算为( '' != '' )。
     4>已完成在项目“StoryScript.csproj”中生成目标“_CheckForObsoleteDotNetCliToolReferences”的操作。
     3>CollectPackageReferences:
       程序集加载期间 TaskRun: NuGet.Common, Version=6.9.2.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Common.dll, MVID: dbe2e2a4-17f6-48a4-8e27-29ee3db6f1a1, AppDomain: [Default])
       程序集加载期间 TaskRun: NuGet.Commands, Version=6.9.2.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Commands.dll, MVID: 18d12257-a587-4a80-aca0-7fb2ce5ac8cb, AppDomain: [Default])
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets”中的目标“CollectPackageReferences”(目标“_GetRestoreProjectStyle”依赖于它):
     4>程序集加载期间 TaskRun: NuGet.Build.Tasks, Version=6.9.2.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Build.Tasks.dll, MVID: 387e3575-06a2-46ce-ba2b-3ecfc703013a, AppDomain: [Default])
       程序集加载期间 TaskRun: NuGet.Common, Version=6.9.2.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Common.dll, MVID: dbe2e2a4-17f6-48a4-8e27-29ee3db6f1a1, AppDomain: [Default])
     3>CollectPackageReferences:
       程序集加载期间 TaskRun: Microsoft.Build.Utilities.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a (位置: C:\WINDOWS\Microsoft.Net\assembly\GAC_MSIL\Microsoft.Build.Utilities.v4.0\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.Build.Utilities.v4.0.dll, MVID: 5d93d82f-cf9b-491a-95aa-3bdfc7dd6af8, AppDomain: [Default])
     4>CollectPackageReferences:
       程序集加载期间 TaskRun: NuGet.Commands, Version=6.9.2.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Commands.dll, MVID: 18d12257-a587-4a80-aca0-7fb2ce5ac8cb, AppDomain: [Default])
     3>CollectPackageReferences:
       程序集加载期间 TaskRun: NuGet.ProjectModel, Version=6.9.2.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.ProjectModel.dll, MVID: 16bf4f41-0e52-4426-8c76-7081c6cb31e9, AppDomain: [Default])
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Build.Tasks.dll”中的“CheckForDuplicateNuGetItemsTask”任务。
       任务“CheckForDuplicateNuGetItemsTask”
     4>CollectPackageReferences:
       程序集加载期间 TaskRun: Microsoft.Build.Utilities.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a (位置: C:\WINDOWS\Microsoft.Net\assembly\GAC_MSIL\Microsoft.Build.Utilities.v4.0\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.Build.Utilities.v4.0.dll, MVID: 5d93d82f-cf9b-491a-95aa-3bdfc7dd6af8, AppDomain: [Default])
     3>已完成执行任务“CheckForDuplicateNuGetItemsTask”的操作。
     3>已完成在项目“Common.csproj”中生成目标“CollectPackageReferences”的操作。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets”中的目标“_GetRestoreProjectStyle”(目标“EnableIntermediateOutputPathMismatchWarning”依赖于它):
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Build.Tasks.dll”中的“GetRestoreProjectStyleTask”任务。
       任务“GetRestoreProjectStyleTask”
     4>CollectPackageReferences:
       程序集加载期间 TaskRun: NuGet.ProjectModel, Version=6.9.2.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.ProjectModel.dll, MVID: 16bf4f41-0e52-4426-8c76-7081c6cb31e9, AppDomain: [Default])
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Build.Tasks.dll”中的“CheckForDuplicateNuGetItemsTask”任务。
       任务“CheckForDuplicateNuGetItemsTask”
     3>已完成执行任务“GetRestoreProjectStyleTask”的操作。
     3>已完成在项目“Common.csproj”中生成目标“_GetRestoreProjectStyle”的操作。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets”中的目标“EnableIntermediateOutputPathMismatchWarning”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
     3>已完成在项目“Common.csproj”中生成目标“EnableIntermediateOutputPathMismatchWarning”的操作。
       由于条件的计算结果为 false，已跳过目标“ApplyImplicitVersions”；('@(PackageReference)' != '')的计算结果为('' != '')。
       已跳过目标“CheckForImplicitPackageReferenceOverrides”。以前的生成已成功。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.Shared.targets”中的目标“CheckForDuplicateItems”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“CheckForDuplicateItems”任务。
       任务“CheckForDuplicateItems”
       已完成执行任务“CheckForDuplicateItems”的操作。
       任务“CheckForDuplicateItems”
       已完成执行任务“CheckForDuplicateItems”的操作。
       任务“CheckForDuplicateItems”
       已完成执行任务“CheckForDuplicateItems”的操作。
     3>已完成在项目“Common.csproj”中生成目标“CheckForDuplicateItems”的操作。
       由于条件的计算结果为 false，已跳过目标“WarnForExplicitVersions”；('@(SdkBuildWarning)' != '')的计算结果为('' != '')。
       由于条件的计算结果为 false，已跳过目标“_CheckForFailedSDKResolution”；('$(SdkResolverHonoredGlobalJson)' == 'false')的计算结果为('' == 'false')。
       由于条件的计算结果为 false，已跳过目标“_WarnWhenUsingNET8AndVSPriorTo178”；($([MSBuild]::VersionLessThan($(MSBuildVersion), '17.8.0')) and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(_TargetFrameworkVersionWithoutV), '8.0')))的计算结果为(False and '.NETStandard' == '.NETCoreApp' and False)。
       由于条件的计算结果为 false，已跳过目标“_CheckForInvalidWindowsDesktopTargetingConfiguration”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(_TargetFrameworkVersionWithoutV), '5.0')) and ('$(UseWindowsForms)' == 'true' or '$(UseWPF)' == 'true'))的计算结果为('.NETStandard' == '.NETCoreApp' and False and ('' == 'true' or '' == 'true'))。
       由于条件的计算结果为 false，已跳过目标“_CheckForUnnecessaryWindowsDesktopSDK”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(_TargetFrameworkVersionWithoutV), '5.0')) and '$(_MicrosoftWindowsDesktopSdkImported)' == 'true' and '$(TargetFrameworks)' == '')的计算结果为('.NETStandard' == '.NETCoreApp' and False and '' == 'true' and '' == '')。
       已跳过目标“ProcessFrameworkReferences”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“IncludeTargetingPackReference”；('$(TargetFrameworkMoniker)' != '' and '$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(AutomaticallyUseReferenceAssemblyPackages)' == 'true')的计算结果为('.NETStandard,Version=v2.1' != '' and '.NETStandard' == '.NETFramework' and 'true' == 'true')。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CheckForInvalidConfigurationAndPlatform”(目标“BeforeClean”依赖于它):
       由于 false 条件，已跳过任务“Error”；( '$(_InvalidConfigurationError)' == 'true' )计算为( '' == 'true' )。
       由于 false 条件，已跳过任务“Warning”；( '$(_InvalidConfigurationWarning)' == 'true' )计算为( '' == 'true' )。
     4>已完成执行任务“CheckForDuplicateNuGetItemsTask”的操作。
     4>已完成在项目“StoryScript.csproj”中生成目标“CollectPackageReferences”的操作。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets”中的目标“_GetRestoreProjectStyle”(目标“EnableIntermediateOutputPathMismatchWarning”依赖于它):
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Build.Tasks.dll”中的“GetRestoreProjectStyleTask”任务。
       任务“GetRestoreProjectStyleTask”
       已完成执行任务“GetRestoreProjectStyleTask”的操作。
     4>已完成在项目“StoryScript.csproj”中生成目标“_GetRestoreProjectStyle”的操作。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets”中的目标“EnableIntermediateOutputPathMismatchWarning”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
     4>已完成在项目“StoryScript.csproj”中生成目标“EnableIntermediateOutputPathMismatchWarning”的操作。
       由于条件的计算结果为 false，已跳过目标“ApplyImplicitVersions”；('@(PackageReference)' != '')的计算结果为('' != '')。
       已跳过目标“CheckForImplicitPackageReferenceOverrides”。以前的生成已成功。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.DefaultItems.Shared.targets”中的目标“CheckForDuplicateItems”(目标“_CheckForInvalidConfigurationAndPlatform”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“CheckForDuplicateItems”任务。
       任务“CheckForDuplicateItems”
       已完成执行任务“CheckForDuplicateItems”的操作。
       任务“CheckForDuplicateItems”
       已完成执行任务“CheckForDuplicateItems”的操作。
       任务“CheckForDuplicateItems”
       已完成执行任务“CheckForDuplicateItems”的操作。
     4>已完成在项目“StoryScript.csproj”中生成目标“CheckForDuplicateItems”的操作。
       由于条件的计算结果为 false，已跳过目标“WarnForExplicitVersions”；('@(SdkBuildWarning)' != '')的计算结果为('' != '')。
       由于条件的计算结果为 false，已跳过目标“_CheckForFailedSDKResolution”；('$(SdkResolverHonoredGlobalJson)' == 'false')的计算结果为('' == 'false')。
       由于条件的计算结果为 false，已跳过目标“_WarnWhenUsingNET8AndVSPriorTo178”；($([MSBuild]::VersionLessThan($(MSBuildVersion), '17.8.0')) and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(_TargetFrameworkVersionWithoutV), '8.0')))的计算结果为(False and '.NETStandard' == '.NETCoreApp' and False)。
       由于条件的计算结果为 false，已跳过目标“_CheckForInvalidWindowsDesktopTargetingConfiguration”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(_TargetFrameworkVersionWithoutV), '5.0')) and ('$(UseWindowsForms)' == 'true' or '$(UseWPF)' == 'true'))的计算结果为('.NETStandard' == '.NETCoreApp' and False and ('' == 'true' or '' == 'true'))。
       由于条件的计算结果为 false，已跳过目标“_CheckForUnnecessaryWindowsDesktopSDK”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(_TargetFrameworkVersionWithoutV), '5.0')) and '$(_MicrosoftWindowsDesktopSdkImported)' == 'true' and '$(TargetFrameworks)' == '')的计算结果为('.NETStandard' == '.NETCoreApp' and False and '' == 'true' and '' == '')。
       已跳过目标“ProcessFrameworkReferences”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“IncludeTargetingPackReference”；('$(TargetFrameworkMoniker)' != '' and '$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(AutomaticallyUseReferenceAssemblyPackages)' == 'true')的计算结果为('.NETStandard,Version=v2.1' != '' and '.NETStandard' == '.NETFramework' and 'true' == 'true')。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CheckForInvalidConfigurationAndPlatform”(目标“BeforeClean”依赖于它):
       由于 false 条件，已跳过任务“Error”；( '$(_InvalidConfigurationError)' == 'true' )计算为( '' == 'true' )。
       由于 false 条件，已跳过任务“Warning”；( '$(_InvalidConfigurationWarning)' == 'true' )计算为( '' == 'true' )。
     3>_CheckForInvalidConfigurationAndPlatform:
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Message”任务。
       任务“Message”
         Configuration=Debug
       已完成执行任务“Message”的操作。
       任务“Message”
         Platform=AnyCPU
       已完成执行任务“Message”的操作。
       由于 false 条件，已跳过任务“Error”；('$(OutDir)' != '' and !HasTrailingSlash('$(OutDir)'))计算为('bin\Debug\netstandard2.1\' != '' and !HasTrailingSlash('bin\Debug\netstandard2.1\'))。
       由于 false 条件，已跳过任务“Error”；('$(IntermediateOutputPath)' != '' and !HasTrailingSlash('$(IntermediateOutputPath)'))计算为('obj\Debug\netstandard2.1\' != '' and !HasTrailingSlash('obj\Debug\netstandard2.1\'))。
       由于 false 条件，已跳过任务“Error”；('$(BaseIntermediateOutputPath)' != '' and !HasTrailingSlash('$(BaseIntermediateOutputPath)'))计算为('obj\' != '' and !HasTrailingSlash('obj\'))。
       由于 false 条件，已跳过任务“Error”；( '$(_InitialMSBuildProjectExtensionsPath)' != '' And '$(MSBuildProjectExtensionsPath)' != '$(_InitialMSBuildProjectExtensionsPath)' )计算为( 'F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\' != '' And 'F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\' != 'F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\' )。
       由于 false 条件，已跳过任务“Warning”；( '$(EnableBaseIntermediateOutputPathMismatchWarning)' == 'true' And '$(_InitialBaseIntermediateOutputPath)' != '$(BaseIntermediateOutputPath)' And '$(BaseIntermediateOutputPath)' != '$(MSBuildProjectExtensionsPath)' )计算为( 'true' == 'true' And 'obj\' != 'obj\' And 'obj\' != 'F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\' )。
     3>已完成在项目“Common.csproj”中生成目标“_CheckForInvalidConfigurationAndPlatform”的操作。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“ValidateCommandLineProperties”(目标“BeforeClean”依赖于它):
     3>已完成在项目“Common.csproj”中生成目标“ValidateCommandLineProperties”的操作。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeClean”(目标“Clean”依赖于它):
     3>已完成在项目“Common.csproj”中生成目标“BeforeClean”的操作。
       由于条件的计算结果为 false，已跳过目标“UnmanagedUnregistration”；((('$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)' or '$(RegisterForComInterop)' != 'true' or '$(OutputType)' != 'library') or
                           ('$(_AssemblyTimestampBeforeCompile)' == '')) and
                          Exists('@(_UnmanagedRegistrationCache)'))的计算结果为((('' != '' or '' != 'true' or 'Library' != 'library') or
                           ('' == '')) and
                          Exists('obj\Common.csproj.UnmanagedRegistration.cache'))。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“_SdkBeforeClean”(目标“CoreClean”依赖于它):
     3>已完成在项目“Common.csproj”中生成目标“_SdkBeforeClean”的操作。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CoreClean”(目标“Clean”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Delete”任务。
       任务“Delete”
     4>_CheckForInvalidConfigurationAndPlatform:
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Message”任务。
       任务“Message”
         Configuration=Debug
       已完成执行任务“Message”的操作。
       任务“Message”
         Platform=AnyCPU
       已完成执行任务“Message”的操作。
       由于 false 条件，已跳过任务“Error”；('$(OutDir)' != '' and !HasTrailingSlash('$(OutDir)'))计算为('bin\Debug\netstandard2.1\' != '' and !HasTrailingSlash('bin\Debug\netstandard2.1\'))。
       由于 false 条件，已跳过任务“Error”；('$(IntermediateOutputPath)' != '' and !HasTrailingSlash('$(IntermediateOutputPath)'))计算为('obj\Debug\netstandard2.1\' != '' and !HasTrailingSlash('obj\Debug\netstandard2.1\'))。
       由于 false 条件，已跳过任务“Error”；('$(BaseIntermediateOutputPath)' != '' and !HasTrailingSlash('$(BaseIntermediateOutputPath)'))计算为('obj\' != '' and !HasTrailingSlash('obj\'))。
       由于 false 条件，已跳过任务“Error”；( '$(_InitialMSBuildProjectExtensionsPath)' != '' And '$(MSBuildProjectExtensionsPath)' != '$(_InitialMSBuildProjectExtensionsPath)' )计算为( 'F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\' != '' And 'F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\' != 'F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\' )。
       由于 false 条件，已跳过任务“Warning”；( '$(EnableBaseIntermediateOutputPathMismatchWarning)' == 'true' And '$(_InitialBaseIntermediateOutputPath)' != '$(BaseIntermediateOutputPath)' And '$(BaseIntermediateOutputPath)' != '$(MSBuildProjectExtensionsPath)' )计算为( 'true' == 'true' And 'obj\' != 'obj\' And 'obj\' != 'F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\' )。
     4>已完成在项目“StoryScript.csproj”中生成目标“_CheckForInvalidConfigurationAndPlatform”的操作。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“ValidateCommandLineProperties”(目标“BeforeClean”依赖于它):
     4>已完成在项目“StoryScript.csproj”中生成目标“ValidateCommandLineProperties”的操作。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeClean”(目标“Clean”依赖于它):
     4>已完成在项目“StoryScript.csproj”中生成目标“BeforeClean”的操作。
       由于条件的计算结果为 false，已跳过目标“UnmanagedUnregistration”；((('$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)' or '$(RegisterForComInterop)' != 'true' or '$(OutputType)' != 'library') or
                           ('$(_AssemblyTimestampBeforeCompile)' == '')) and
                          Exists('@(_UnmanagedRegistrationCache)'))的计算结果为((('' != '' or '' != 'true' or 'Library' != 'library') or
                           ('' == '')) and
                          Exists('obj\StoryScript.csproj.UnmanagedRegistration.cache'))。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“_SdkBeforeClean”(目标“CoreClean”依赖于它):
     4>已完成在项目“StoryScript.csproj”中生成目标“_SdkBeforeClean”的操作。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CoreClean”(目标“Clean”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Delete”任务。
       任务“Delete”
     3>CoreClean:
         文件“obj\Debug\netstandard2.1\\TempCA\Common.pdb”不存在。正在跳过。
         文件“obj\Debug\netstandard2.1\\TempCA\Common.dll”不存在。正在跳过。
       已完成执行任务“Delete”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ReadLinesFromFile”任务。
       任务“ReadLinesFromFile”
       已完成执行任务“ReadLinesFromFile”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“FindUnderPath”任务。
       任务“FindUnderPath”
         比较路径为“bin\Debug\netstandard2.1\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“obj\Debug\netstandard2.1\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“Delete”
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.deps.json”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.pdb”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\UnityEngine.dll”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\StoryScript.dll”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Dsl.dll”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\LitJson.dll”。
     4>CoreClean:
         文件“obj\Debug\netstandard2.1\\TempCA\StoryScript.pdb”不存在。正在跳过。
     3>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\StoryScript.pdb”。
     4>CoreClean:
         文件“obj\Debug\netstandard2.1\\TempCA\StoryScript.dll”不存在。正在跳过。
       已完成执行任务“Delete”的操作。
     3>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Dsl.pdb”。
     4>CoreClean:
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ReadLinesFromFile”任务。
     3>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\Common.csproj.AssemblyReference.cache”。
     4>任务“ReadLinesFromFile”
     3>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\Common.GeneratedMSBuildEditorConfig.editorconfig”。
     4>已完成执行任务“ReadLinesFromFile”的操作。
     3>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\Common.csproj.CoreCompileInputs.cache”。
     4>CoreClean:
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“FindUnderPath”任务。
     3>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\Common.sourcelink.json”。
     4>任务“FindUnderPath”
         比较路径为“bin\Debug\netstandard2.1\”。
     3>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\Common.csproj.Up2Date”。
     4>已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“obj\Debug\netstandard2.1\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“Delete”
     3>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\Common.dll”。
     4>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.deps.json”。
     3>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\Common.pdb”。
     4>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”。
     3>已完成执行任务“Delete”的操作。
     4>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.pdb”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\Dsl.dll”。
     3>CoreClean:
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“RemoveDuplicates”任务。
       任务“RemoveDuplicates”
     4>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\LitJson.dll”。
     3>已完成执行任务“RemoveDuplicates”的操作。
     4>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\UnityEngine.dll”。
     3>CoreClean:
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“MakeDir”任务。
     4>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\Dsl.pdb”。
     3>任务“MakeDir”
       已完成执行任务“MakeDir”的操作。
     4>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\StoryScript.csproj.AssemblyReference.cache”。
     3>CoreClean:
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“WriteLinesToFile”任务。
     4>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\StoryScript.GeneratedMSBuildEditorConfig.editorconfig”。
     3>任务“WriteLinesToFile”
     4>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\StoryScript.csproj.CoreCompileInputs.cache”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\StoryScript.sourcelink.json”。
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\StoryScr.5BC802E4.Up2Date”。
     3>已完成执行任务“WriteLinesToFile”的操作。
     3>已完成在项目“Common.csproj”中生成目标“CoreClean”的操作。
     4>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\StoryScript.dll”。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“IgnoreJavaScriptOutputAssembly”(目标“AssignProjectConfiguration”依赖于它):
     3>已完成在项目“Common.csproj”中生成目标“IgnoreJavaScriptOutputAssembly”的操作。
       已跳过目标“ProcessFrameworkReferences”。以前的生成已成功。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.Shared.targets”中的目标“_DefaultMicrosoftNETPlatformLibrary”(目标“ResolvePackageAssets”依赖于它):
     3>已完成在项目“Common.csproj”中生成目标“_DefaultMicrosoftNETPlatformLibrary”的操作。
     4>CoreClean:
         正在删除文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\StoryScript.pdb”。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.Shared.targets”中的目标“_ComputePackageReferencePublish”(目标“ResolvePackageAssets”依赖于它):
     3>已完成在项目“Common.csproj”中生成目标“_ComputePackageReferencePublish”的操作。
       由于条件的计算结果为 false，已跳过目标“_ResolveCompilerVersion”；('$(CompilerApiVersion)' == '' And
                            ('$(Language)' == 'C#' Or '$(Language)' == 'VB') And
                            Exists('$(RoslynTargetsPath)\Microsoft.Build.Tasks.CodeAnalysis.dll'))的计算结果为('roslyn4.9' == '' And
                            ('C#' == 'C#' Or 'C#' == 'VB') And
                            Exists('C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Build.Tasks.CodeAnalysis.dll'))。
     4>已完成执行任务“Delete”的操作。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“ResolvePackageAssets”(目标“ResolveLockFileReferences”依赖于它):
     3>正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ResolvePackageAssets”任务。
       任务“ResolvePackageAssets”
     4>CoreClean:
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“RemoveDuplicates”任务。
       任务“RemoveDuplicates”
       已完成执行任务“RemoveDuplicates”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“MakeDir”任务。
       任务“MakeDir”
       已完成执行任务“MakeDir”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“WriteLinesToFile”任务。
       任务“WriteLinesToFile”
       已完成执行任务“WriteLinesToFile”的操作。
     4>已完成在项目“StoryScript.csproj”中生成目标“CoreClean”的操作。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“IgnoreJavaScriptOutputAssembly”(目标“AssignProjectConfiguration”依赖于它):
     4>已完成在项目“StoryScript.csproj”中生成目标“IgnoreJavaScriptOutputAssembly”的操作。
       已跳过目标“ProcessFrameworkReferences”。以前的生成已成功。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.Shared.targets”中的目标“_DefaultMicrosoftNETPlatformLibrary”(目标“ResolvePackageAssets”依赖于它):
     4>已完成在项目“StoryScript.csproj”中生成目标“_DefaultMicrosoftNETPlatformLibrary”的操作。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.Shared.targets”中的目标“_ComputePackageReferencePublish”(目标“ResolvePackageAssets”依赖于它):
     4>已完成在项目“StoryScript.csproj”中生成目标“_ComputePackageReferencePublish”的操作。
       由于条件的计算结果为 false，已跳过目标“_ResolveCompilerVersion”；('$(CompilerApiVersion)' == '' And
                            ('$(Language)' == 'C#' Or '$(Language)' == 'VB') And
                            Exists('$(RoslynTargetsPath)\Microsoft.Build.Tasks.CodeAnalysis.dll'))的计算结果为('roslyn4.9' == '' And
                            ('C#' == 'C#' Or 'C#' == 'VB') And
                            Exists('C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Build.Tasks.CodeAnalysis.dll'))。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“ResolvePackageAssets”(目标“ResolveLockFileReferences”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ResolvePackageAssets”任务。
       任务“ResolvePackageAssets”
     2>已完成执行任务“ResolvePackageAssets”的操作。
     2>已完成在项目“GameCore.csproj”中生成目标“ResolvePackageAssets”的操作。
       由于条件的计算结果为 false，已跳过目标“AdjustDefaultPlatformTargetForNetFrameworkExeWithNoNativeCopyLocalItems”；('$(_UsingDefaultPlatformTarget)' == 'true' and
                            '$(_UsingDefaultRuntimeIdentifier)' == 'true')的计算结果为('true' == 'true' and
                            '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_CheckForTransitiveWindowsDesktopDependencies”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(_TargetFrameworkVersionWithoutV), '5.0')) and '$(TargetPlatformIdentifier)' != 'Windows' and '@(TransitiveFrameworkReference)' != '')的计算结果为('.NETStandard' == '.NETCoreApp' and False and 'Windows' != 'Windows' and '' != '')。
       由于条件的计算结果为 false，已跳过目标“AddTransitiveFrameworkReferences”；('@(TransitiveFrameworkReference)' != '')的计算结果为('' != '')。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“ResolveLockFileReferences”(目标“ResolvePackageDependenciesForBuild”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“JoinItems”任务。
       任务“JoinItems”
       已完成执行任务“JoinItems”的操作。
     2>已完成在项目“GameCore.csproj”中生成目标“ResolveLockFileReferences”的操作。
       已跳过目标“ResolvePackageAssets”。以前的生成已成功。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“ResolveLockFileAnalyzers”(目标“ResolvePackageDependenciesForBuild”依赖于它):
     2>已完成在项目“GameCore.csproj”中生成目标“ResolveLockFileAnalyzers”的操作。
       已跳过目标“ResolvePackageAssets”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“RunProduceContentAssets”；('@(_ContentFilesToPreprocess)' != '' and '$(_CleaningWithoutRebuilding)' != 'true')的计算结果为('' != '' and 'true' != 'true')。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“ResolveLockFileCopyLocalFiles”(目标“ResolvePackageDependenciesForBuild”依赖于它):
     2>已完成在项目“GameCore.csproj”中生成目标“ResolveLockFileCopyLocalFiles”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveRuntimePackAssets”；('@(RuntimePack)' != '')的计算结果为('' != '')。
       由于条件的计算结果为 false，已跳过目标“RunProduceContentAssets”；('@(_ContentFilesToPreprocess)' != '' and '$(_CleaningWithoutRebuilding)' != 'true')的计算结果为('' != '' and 'true' != 'true')。
       已跳过目标“ResolvePackageAssets”。以前的生成已成功。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“IncludeTransitiveProjectReferences”(目标“ResolvePackageDependenciesForBuild”依赖于它):
     2>已完成在项目“GameCore.csproj”中生成目标“IncludeTransitiveProjectReferences”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“ResolvePackageDependenciesForBuild”(目标“AssignProjectConfiguration”依赖于它):
     2>已完成在项目“GameCore.csproj”中生成目标“ResolvePackageDependenciesForBuild”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AssignProjectConfiguration”(目标“PrepareProjectReferences”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“AssignProjectConfiguration”任务。
       任务“AssignProjectConfiguration”
         已为项目引用“..\..\Infrastructure\Common\Common.csproj”指定了“Debug|AnyCPU”配置。
         已为项目引用“..\..\Infrastructure\StoryScript\StoryScript.csproj”指定了“Debug|AnyCPU”配置。
       已完成执行任务“AssignProjectConfiguration”的操作。
     2>已完成在项目“GameCore.csproj”中生成目标“AssignProjectConfiguration”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_SplitProjectReferencesByFileExistence”(目标“PrepareProjectReferences”依赖于它):
       由于 false 条件，已跳过任务“ResolveNonMSBuildProjectOutput”；('$(BuildingInsideVisualStudio)'=='true' and '@(ProjectReferenceWithConfiguration)'!='')计算为(''=='true' and '..\..\Infrastructure\Common\Common.csproj;..\..\Infrastructure\StoryScript\StoryScript.csproj'!='')。
     2>已完成在项目“GameCore.csproj”中生成目标“_SplitProjectReferencesByFileExistence”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_AddOutputPathToGlobalPropertiesToRemove”(目标“_GetProjectReferenceTargetFrameworkProperties”依赖于它):
     2>已完成在项目“GameCore.csproj”中生成目标“_AddOutputPathToGlobalPropertiesToRemove”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GetProjectReferenceTargetFrameworkProperties”(目标“PrepareProjectReferences”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“MSBuild”任务。
       任务“MSBuild”
         全局属性:
           Configuration=Debug
           Platform=AnyCPU
         移除属性:
           TargetFramework
           RuntimeIdentifier
           SelfContained
     4>已完成执行任务“ResolvePackageAssets”的操作。
     4>已完成在项目“StoryScript.csproj”中生成目标“ResolvePackageAssets”的操作。
       由于条件的计算结果为 false，已跳过目标“AdjustDefaultPlatformTargetForNetFrameworkExeWithNoNativeCopyLocalItems”；('$(_UsingDefaultPlatformTarget)' == 'true' and
                            '$(_UsingDefaultRuntimeIdentifier)' == 'true')的计算结果为('true' == 'true' and
                            '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_CheckForTransitiveWindowsDesktopDependencies”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(_TargetFrameworkVersionWithoutV), '5.0')) and '$(TargetPlatformIdentifier)' != 'Windows' and '@(TransitiveFrameworkReference)' != '')的计算结果为('.NETStandard' == '.NETCoreApp' and False and 'Windows' != 'Windows' and '' != '')。
       由于条件的计算结果为 false，已跳过目标“AddTransitiveFrameworkReferences”；('@(TransitiveFrameworkReference)' != '')的计算结果为('' != '')。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“ResolveLockFileReferences”(目标“ResolvePackageDependenciesForBuild”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“JoinItems”任务。
       任务“JoinItems”
       已完成执行任务“JoinItems”的操作。
     4>已完成在项目“StoryScript.csproj”中生成目标“ResolveLockFileReferences”的操作。
       已跳过目标“ResolvePackageAssets”。以前的生成已成功。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“ResolveLockFileAnalyzers”(目标“ResolvePackageDependenciesForBuild”依赖于它):
     4>已完成在项目“StoryScript.csproj”中生成目标“ResolveLockFileAnalyzers”的操作。
       已跳过目标“ResolvePackageAssets”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“RunProduceContentAssets”；('@(_ContentFilesToPreprocess)' != '' and '$(_CleaningWithoutRebuilding)' != 'true')的计算结果为('' != '' and 'true' != 'true')。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“ResolveLockFileCopyLocalFiles”(目标“ResolvePackageDependenciesForBuild”依赖于它):
     4>已完成在项目“StoryScript.csproj”中生成目标“ResolveLockFileCopyLocalFiles”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveRuntimePackAssets”；('@(RuntimePack)' != '')的计算结果为('' != '')。
       由于条件的计算结果为 false，已跳过目标“RunProduceContentAssets”；('@(_ContentFilesToPreprocess)' != '' and '$(_CleaningWithoutRebuilding)' != 'true')的计算结果为('' != '' and 'true' != 'true')。
       已跳过目标“ResolvePackageAssets”。以前的生成已成功。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“IncludeTransitiveProjectReferences”(目标“ResolvePackageDependenciesForBuild”依赖于它):
     4>已完成在项目“StoryScript.csproj”中生成目标“IncludeTransitiveProjectReferences”的操作。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“ResolvePackageDependenciesForBuild”(目标“AssignProjectConfiguration”依赖于它):
     4>已完成在项目“StoryScript.csproj”中生成目标“ResolvePackageDependenciesForBuild”的操作。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AssignProjectConfiguration”(目标“PrepareProjectReferences”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“AssignProjectConfiguration”任务。
       任务“AssignProjectConfiguration”
       已完成执行任务“AssignProjectConfiguration”的操作。
     4>已完成在项目“StoryScript.csproj”中生成目标“AssignProjectConfiguration”的操作。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_SplitProjectReferencesByFileExistence”(目标“PrepareProjectReferences”依赖于它):
       由于 false 条件，已跳过任务“ResolveNonMSBuildProjectOutput”；('$(BuildingInsideVisualStudio)'=='true' and '@(ProjectReferenceWithConfiguration)'!='')计算为(''=='true' and ''!='')。
     4>已完成在项目“StoryScript.csproj”中生成目标“_SplitProjectReferencesByFileExistence”的操作。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_AddOutputPathToGlobalPropertiesToRemove”(目标“_GetProjectReferenceTargetFrameworkProperties”依赖于它):
     4>已完成在项目“StoryScript.csproj”中生成目标“_AddOutputPathToGlobalPropertiesToRemove”的操作。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GetProjectReferenceTargetFrameworkProperties”(目标“PrepareProjectReferences”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“MSBuild”任务。
       任务“MSBuild”
       已完成执行任务“MSBuild”的操作。
       由于 false 条件，已跳过任务“MSBuild”；('%(_MSBuildProjectReferenceExistent.SkipGetTargetFrameworkProperties)' != 'true' and '$(EnableDynamicPlatformResolution)' == 'true')计算为('' != 'true' and '' == 'true')。
     3>已完成执行任务“ResolvePackageAssets”的操作。
     3>已完成在项目“Common.csproj”中生成目标“ResolvePackageAssets”的操作。
       由于条件的计算结果为 false，已跳过目标“AdjustDefaultPlatformTargetForNetFrameworkExeWithNoNativeCopyLocalItems”；('$(_UsingDefaultPlatformTarget)' == 'true' and
                            '$(_UsingDefaultRuntimeIdentifier)' == 'true')的计算结果为('true' == 'true' and
                            '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_CheckForTransitiveWindowsDesktopDependencies”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(_TargetFrameworkVersionWithoutV), '5.0')) and '$(TargetPlatformIdentifier)' != 'Windows' and '@(TransitiveFrameworkReference)' != '')的计算结果为('.NETStandard' == '.NETCoreApp' and False and 'Windows' != 'Windows' and '' != '')。
       由于条件的计算结果为 false，已跳过目标“AddTransitiveFrameworkReferences”；('@(TransitiveFrameworkReference)' != '')的计算结果为('' != '')。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“ResolveLockFileReferences”(目标“ResolvePackageDependenciesForBuild”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“JoinItems”任务。
       任务“JoinItems”
       已完成执行任务“JoinItems”的操作。
     3>已完成在项目“Common.csproj”中生成目标“ResolveLockFileReferences”的操作。
       已跳过目标“ResolvePackageAssets”。以前的生成已成功。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“ResolveLockFileAnalyzers”(目标“ResolvePackageDependenciesForBuild”依赖于它):
     3>已完成在项目“Common.csproj”中生成目标“ResolveLockFileAnalyzers”的操作。
       已跳过目标“ResolvePackageAssets”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“RunProduceContentAssets”；('@(_ContentFilesToPreprocess)' != '' and '$(_CleaningWithoutRebuilding)' != 'true')的计算结果为('' != '' and 'true' != 'true')。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“ResolveLockFileCopyLocalFiles”(目标“ResolvePackageDependenciesForBuild”依赖于它):
     3>已完成在项目“Common.csproj”中生成目标“ResolveLockFileCopyLocalFiles”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveRuntimePackAssets”；('@(RuntimePack)' != '')的计算结果为('' != '')。
       由于条件的计算结果为 false，已跳过目标“RunProduceContentAssets”；('@(_ContentFilesToPreprocess)' != '' and '$(_CleaningWithoutRebuilding)' != 'true')的计算结果为('' != '' and 'true' != 'true')。
       已跳过目标“ResolvePackageAssets”。以前的生成已成功。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“IncludeTransitiveProjectReferences”(目标“ResolvePackageDependenciesForBuild”依赖于它):
     3>已完成在项目“Common.csproj”中生成目标“IncludeTransitiveProjectReferences”的操作。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets”中的目标“ResolvePackageDependenciesForBuild”(目标“AssignProjectConfiguration”依赖于它):
     3>已完成在项目“Common.csproj”中生成目标“ResolvePackageDependenciesForBuild”的操作。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AssignProjectConfiguration”(目标“PrepareProjectReferences”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“AssignProjectConfiguration”任务。
       任务“AssignProjectConfiguration”
         已为项目引用“..\StoryScript\StoryScript.csproj”指定了“Debug|AnyCPU”配置。
       已完成执行任务“AssignProjectConfiguration”的操作。
     3>已完成在项目“Common.csproj”中生成目标“AssignProjectConfiguration”的操作。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_SplitProjectReferencesByFileExistence”(目标“PrepareProjectReferences”依赖于它):
       由于 false 条件，已跳过任务“ResolveNonMSBuildProjectOutput”；('$(BuildingInsideVisualStudio)'=='true' and '@(ProjectReferenceWithConfiguration)'!='')计算为(''=='true' and '..\StoryScript\StoryScript.csproj'!='')。
     3>已完成在项目“Common.csproj”中生成目标“_SplitProjectReferencesByFileExistence”的操作。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_AddOutputPathToGlobalPropertiesToRemove”(目标“_GetProjectReferenceTargetFrameworkProperties”依赖于它):
     3>已完成在项目“Common.csproj”中生成目标“_AddOutputPathToGlobalPropertiesToRemove”的操作。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GetProjectReferenceTargetFrameworkProperties”(目标“PrepareProjectReferences”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“MSBuild”任务。
       任务“MSBuild”
         全局属性:
           Configuration=Debug
           Platform=AnyCPU
         移除属性:
           TargetFramework
           RuntimeIdentifier
           SelfContained
     2>项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”(2)正在节点 2 上生成“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(3:2) (GetTargetFrameworks 个目标)。
   3:2>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetFrameworksWithPlatformForSingleTargetFramework”(目标“GetTargetFrameworks”依赖于它):
   3:2>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“CombineTargetFrameworkInfoProperties”任务。
       任务“CombineTargetFrameworkInfoProperties”
     4>_GetProjectReferenceTargetFrameworkProperties:
       由于 false 条件，已跳过任务“GetReferenceNearestTargetFrameworkTask”；('@(_ProjectReferenceTargetFrameworkPossibilities)' != '' and '$(ReferringTargetFrameworkForProjectReferences)' != ''
                                                               And '$(GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter)' == 'true' and '%(_ProjectReferenceTargetFrameworkPossibilities.IsVcxOrNativeProj)' != 'true')计算为('' != '' and '.NETStandard,Version=v2.1' != ''
                                                               And 'true' == 'true' and '' != 'true')。
       由于 false 条件，已跳过任务“GetReferenceNearestTargetFrameworkTask”；('@(_ProjectReferenceTargetFrameworkPossibilities)' != '' and '$(ReferringTargetFrameworkForProjectReferences)' != ''
                                                               And '$(GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter)' != 'true' and '%(_ProjectReferenceTargetFrameworkPossibilities.IsVcxOrNativeProj)' != 'true')计算为('' != '' and '.NETStandard,Version=v2.1' != ''
                                                               And 'true' != 'true' and '' != 'true')。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“SetRidAgnosticValueForProjects”任务。
       任务“SetRidAgnosticValueForProjects”
       已完成执行任务“SetRidAgnosticValueForProjects”的操作。
     4>已完成在项目“StoryScript.csproj”中生成目标“_GetProjectReferenceTargetFrameworkProperties”的操作。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“ValidateExecutableReferences”(目标“PrepareProjectReferences”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ValidateExecutableReferences”任务。
       任务“ValidateExecutableReferences”
   3:2>已完成执行任务“CombineTargetFrameworkInfoProperties”的操作。
   3:2>已完成在项目“Common.csproj”中生成目标“GetTargetFrameworksWithPlatformForSingleTargetFramework”的操作。
   3:2>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetFrameworks”(入口点):
       由于 false 条件，已跳过任务“Error”；('$(IsCrossTargetingBuild)' == 'true')计算为('' == 'true')。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“CombineXmlElements”任务。
       任务“CombineXmlElements”
       已完成执行任务“CombineXmlElements”的操作。
   3:2>已完成在项目“Common.csproj”中生成目标“GetTargetFrameworks”的操作。
   3:2>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(GetTargetFrameworks 个目标)的操作。
     4>已完成执行任务“ValidateExecutableReferences”的操作。
     4>已完成在项目“StoryScript.csproj”中生成目标“ValidateExecutableReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“_GetProjectReferencePlatformProperties”；('$(EnableDynamicPlatformResolution)' == 'true'
                            and '@(_MSBuildProjectReferenceExistent)' != '')的计算结果为('' == 'true'
                            and '' != '')。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareProjectReferences”(目标“CleanReferencedProjects”依赖于它):
     4>已完成在项目“StoryScript.csproj”中生成目标“PrepareProjectReferences”的操作。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CleanReferencedProjects”(目标“Clean”依赖于它):
       由于 false 条件，已跳过任务“MSBuild”；('$(BuildingInsideVisualStudio)' != 'true' and '$(BuildProjectReferences)' == 'true' and '@(_MSBuildProjectReferenceExistent)' != '')计算为('' != 'true' and 'true' == 'true' and '' != '')。
     4>已完成在项目“StoryScript.csproj”中生成目标“CleanReferencedProjects”的操作。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CleanPublishFolder”(目标“Clean”依赖于它):
       由于 false 条件，已跳过任务“RemoveDir”；('$(ClickOncePublishDir)'=='$(OutputPath)app.publish\' and Exists('$(ClickOncePublishDir)'))计算为('bin\Debug\netstandard2.1\publish\'=='bin\Debug\netstandard2.1\app.publish\' and Exists('bin\Debug\netstandard2.1\publish\'))。
     4>已完成在项目“StoryScript.csproj”中生成目标“CleanPublishFolder”的操作。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterClean”(目标“Clean”依赖于它):
     4>已完成在项目“StoryScript.csproj”中生成目标“AfterClean”的操作。
       已跳过目标“_CheckForInvalidConfigurationAndPlatform”。以前的生成已成功。
       已跳过目标“_CheckForInvalidConfigurationAndPlatform”。以前的生成已成功。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Clean”(入口点):
     4>已完成在项目“StoryScript.csproj”中生成目标“Clean”的操作。
     4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.ServiceModel.targets”中的目标“CleanXsdCodeGen”(入口点):
       任务“Delete”
       已完成执行任务“Delete”的操作。
     4>已完成在项目“StoryScript.csproj”中生成目标“CleanXsdCodeGen”的操作。
       由于条件的计算结果为 false，已跳过目标“_CleanPackageFiles”；('$(GeneratePackageOnBuild)' == 'true' AND '$(IsInnerBuild)' != 'true')的计算结果为('false' == 'true' AND '' != 'true')。
     4>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(Clean 个目标)的操作。
     3>项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(3)正在节点 3 上生成“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(4:2) (GetTargetFrameworks 个目标)。
   4:2>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetFrameworksWithPlatformForSingleTargetFramework”(目标“GetTargetFrameworks”依赖于它):
   4:2>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“CombineTargetFrameworkInfoProperties”任务。
       任务“CombineTargetFrameworkInfoProperties”
       已完成执行任务“CombineTargetFrameworkInfoProperties”的操作。
   4:2>已完成在项目“StoryScript.csproj”中生成目标“GetTargetFrameworksWithPlatformForSingleTargetFramework”的操作。
   4:2>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetFrameworks”(入口点):
       由于 false 条件，已跳过任务“Error”；('$(IsCrossTargetingBuild)' == 'true')计算为('' == 'true')。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“CombineXmlElements”任务。
       任务“CombineXmlElements”
       已完成执行任务“CombineXmlElements”的操作。
   4:2>已完成在项目“StoryScript.csproj”中生成目标“GetTargetFrameworks”的操作。
   4:2>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(GetTargetFrameworks 个目标)的操作。
     2>项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”(2)正在节点 3 上生成“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(4:3) (GetTargetFrameworks 个目标)。
   4:3>已跳过目标“GetTargetFrameworks”。以前的生成已成功。
   4:3>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(GetTargetFrameworks 个目标)的操作。
     2>已完成执行任务“MSBuild”的操作。
       由于 false 条件，已跳过任务“MSBuild”；('%(_MSBuildProjectReferenceExistent.SkipGetTargetFrameworkProperties)' != 'true' and '$(EnableDynamicPlatformResolution)' == 'true')计算为('' != 'true' and '' == 'true')。
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Build.Tasks.dll”中的“GetReferenceNearestTargetFrameworkTask”任务。
       任务“GetReferenceNearestTargetFrameworkTask”
     3>已完成执行任务“MSBuild”的操作。
       由于 false 条件，已跳过任务“MSBuild”；('%(_MSBuildProjectReferenceExistent.SkipGetTargetFrameworkProperties)' != 'true' and '$(EnableDynamicPlatformResolution)' == 'true')计算为('' != 'true' and '' == 'true')。
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Build.Tasks.dll”中的“GetReferenceNearestTargetFrameworkTask”任务。
       任务“GetReferenceNearestTargetFrameworkTask”
     2>_GetProjectReferenceTargetFrameworkProperties:
         程序集加载期间 TaskRun (NuGet.Build.Tasks.GetReferenceNearestTargetFrameworkTask): NuGet.Build.Tasks.resources, Version=6.9.2.1, Culture=zh-Hans, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\zh-Hans\NuGet.Build.Tasks.resources.dll, MVID: 2619b30e-99e0-4341-90b3-f72b5e000b23, AppDomain: [Default])
     3>_GetProjectReferenceTargetFrameworkProperties:
         程序集加载期间 TaskRun (NuGet.Build.Tasks.GetReferenceNearestTargetFrameworkTask): NuGet.Build.Tasks.resources, Version=6.9.2.1, Culture=zh-Hans, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\zh-Hans\NuGet.Build.Tasks.resources.dll, MVID: 2619b30e-99e0-4341-90b3-f72b5e000b23, AppDomain: [Default])
     2>已完成执行任务“GetReferenceNearestTargetFrameworkTask”的操作。
     3>已完成执行任务“GetReferenceNearestTargetFrameworkTask”的操作。
     2>_GetProjectReferenceTargetFrameworkProperties:
       由于 false 条件，已跳过任务“GetReferenceNearestTargetFrameworkTask”；('@(_ProjectReferenceTargetFrameworkPossibilities)' != '' and '$(ReferringTargetFrameworkForProjectReferences)' != ''
                                                               And '$(GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter)' != 'true' and '%(_ProjectReferenceTargetFrameworkPossibilities.IsVcxOrNativeProj)' != 'true')计算为('..\..\Infrastructure\Common\Common.csproj;..\..\Infrastructure\StoryScript\StoryScript.csproj' != '' and '.NETStandard,Version=v2.1' != ''
                                                               And 'true' != 'true' and '' != 'true')。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“SetRidAgnosticValueForProjects”任务。
       任务“SetRidAgnosticValueForProjects”
       已完成执行任务“SetRidAgnosticValueForProjects”的操作。
     2>已完成在项目“GameCore.csproj”中生成目标“_GetProjectReferenceTargetFrameworkProperties”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“ValidateExecutableReferences”(目标“PrepareProjectReferences”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ValidateExecutableReferences”任务。
       任务“ValidateExecutableReferences”
     3>_GetProjectReferenceTargetFrameworkProperties:
       由于 false 条件，已跳过任务“GetReferenceNearestTargetFrameworkTask”；('@(_ProjectReferenceTargetFrameworkPossibilities)' != '' and '$(ReferringTargetFrameworkForProjectReferences)' != ''
                                                               And '$(GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter)' != 'true' and '%(_ProjectReferenceTargetFrameworkPossibilities.IsVcxOrNativeProj)' != 'true')计算为('..\StoryScript\StoryScript.csproj' != '' and '.NETStandard,Version=v2.1' != ''
                                                               And 'true' != 'true' and '' != 'true')。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“SetRidAgnosticValueForProjects”任务。
       任务“SetRidAgnosticValueForProjects”
       已完成执行任务“SetRidAgnosticValueForProjects”的操作。
     3>已完成在项目“Common.csproj”中生成目标“_GetProjectReferenceTargetFrameworkProperties”的操作。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“ValidateExecutableReferences”(目标“PrepareProjectReferences”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ValidateExecutableReferences”任务。
       任务“ValidateExecutableReferences”
     2>已完成执行任务“ValidateExecutableReferences”的操作。
     2>已完成在项目“GameCore.csproj”中生成目标“ValidateExecutableReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“_GetProjectReferencePlatformProperties”；('$(EnableDynamicPlatformResolution)' == 'true'
                            and '@(_MSBuildProjectReferenceExistent)' != '')的计算结果为('' == 'true'
                            and '..\..\Infrastructure\Common\Common.csproj;..\..\Infrastructure\StoryScript\StoryScript.csproj' != '')。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareProjectReferences”(目标“CleanReferencedProjects”依赖于它):
     2>已完成在项目“GameCore.csproj”中生成目标“PrepareProjectReferences”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CleanReferencedProjects”(目标“Clean”依赖于它):
       任务“MSBuild”
         全局属性:
           Configuration=Debug
           Platform=AnyCPU
     3>已完成执行任务“ValidateExecutableReferences”的操作。
     2>CleanReferencedProjects:
         移除项目“..\..\Infrastructure\Common\Common.csproj”的属性:
           TargetFramework
           RuntimeIdentifier
           SelfContained
         移除项目“..\..\Infrastructure\StoryScript\StoryScript.csproj”的属性:
           TargetFramework
           RuntimeIdentifier
           SelfContained
     3>已完成在项目“Common.csproj”中生成目标“ValidateExecutableReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“_GetProjectReferencePlatformProperties”；('$(EnableDynamicPlatformResolution)' == 'true'
                            and '@(_MSBuildProjectReferenceExistent)' != '')的计算结果为('' == 'true'
                            and '..\StoryScript\StoryScript.csproj' != '')。
     2>项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”(2)正在节点 1 上生成“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(4:4) (Clean 个目标)。
   4:4>已跳过目标“Clean”。以前的生成已成功。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareProjectReferences”(目标“CleanReferencedProjects”依赖于它):
     3>已完成在项目“Common.csproj”中生成目标“PrepareProjectReferences”的操作。
   4:4>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(Clean 个目标)的操作。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CleanReferencedProjects”(目标“Clean”依赖于它):
     3>任务“MSBuild”
         全局属性:
           Configuration=Debug
           Platform=AnyCPU
         移除项目“..\StoryScript\StoryScript.csproj”的属性:
           TargetFramework
           RuntimeIdentifier
           SelfContained
     3>项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(3)正在节点 3 上生成“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(4:5) (Clean 个目标)。
   4:5>已跳过目标“Clean”。以前的生成已成功。
   4:5>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(Clean 个目标)的操作。
     3>已完成执行任务“MSBuild”的操作。
     3>已完成在项目“Common.csproj”中生成目标“CleanReferencedProjects”的操作。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CleanPublishFolder”(目标“Clean”依赖于它):
       由于 false 条件，已跳过任务“RemoveDir”；('$(ClickOncePublishDir)'=='$(OutputPath)app.publish\' and Exists('$(ClickOncePublishDir)'))计算为('bin\Debug\netstandard2.1\publish\'=='bin\Debug\netstandard2.1\app.publish\' and Exists('bin\Debug\netstandard2.1\publish\'))。
     3>已完成在项目“Common.csproj”中生成目标“CleanPublishFolder”的操作。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterClean”(目标“Clean”依赖于它):
     3>已完成在项目“Common.csproj”中生成目标“AfterClean”的操作。
       已跳过目标“_CheckForInvalidConfigurationAndPlatform”。以前的生成已成功。
       已跳过目标“_CheckForInvalidConfigurationAndPlatform”。以前的生成已成功。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Clean”(入口点):
     3>已完成在项目“Common.csproj”中生成目标“Clean”的操作。
     3>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.ServiceModel.targets”中的目标“CleanXsdCodeGen”(入口点):
       任务“Delete”
       已完成执行任务“Delete”的操作。
     3>已完成在项目“Common.csproj”中生成目标“CleanXsdCodeGen”的操作。
       由于条件的计算结果为 false，已跳过目标“_CleanPackageFiles”；('$(GeneratePackageOnBuild)' == 'true' AND '$(IsInnerBuild)' != 'true')的计算结果为('false' == 'true' AND '' != 'true')。
     3>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(Clean 个目标)的操作。
     2>项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”(2)正在节点 2 上生成“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(3:3) (Clean 个目标)。
   3:3>已跳过目标“Clean”。以前的生成已成功。
   3:3>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(Clean 个目标)的操作。
     2>已完成执行任务“MSBuild”的操作。
     2>已完成在项目“GameCore.csproj”中生成目标“CleanReferencedProjects”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CleanPublishFolder”(目标“Clean”依赖于它):
       由于 false 条件，已跳过任务“RemoveDir”；('$(ClickOncePublishDir)'=='$(OutputPath)app.publish\' and Exists('$(ClickOncePublishDir)'))计算为('bin\Debug\netstandard2.1\publish\'=='bin\Debug\netstandard2.1\app.publish\' and Exists('bin\Debug\netstandard2.1\publish\'))。
     2>已完成在项目“GameCore.csproj”中生成目标“CleanPublishFolder”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterClean”(目标“Clean”依赖于它):
     2>已完成在项目“GameCore.csproj”中生成目标“AfterClean”的操作。
       已跳过目标“_CheckForInvalidConfigurationAndPlatform”。以前的生成已成功。
       已跳过目标“_CheckForInvalidConfigurationAndPlatform”。以前的生成已成功。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Clean”(入口点):
     2>已完成在项目“GameCore.csproj”中生成目标“Clean”的操作。
     2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.ServiceModel.targets”中的目标“CleanXsdCodeGen”(入口点):
       任务“Delete”
       已完成执行任务“Delete”的操作。
     2>已完成在项目“GameCore.csproj”中生成目标“CleanXsdCodeGen”的操作。
       由于条件的计算结果为 false，已跳过目标“_CleanPackageFiles”；('$(GeneratePackageOnBuild)' == 'true' AND '$(IsInnerBuild)' != 'true')的计算结果为('false' == 'true' AND '' != 'true')。
     2>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”(Clean 个目标)的操作。
     1>已完成执行任务“MSBuild”的操作。
     1>已完成在项目“GameLibrary.sln”中生成目标“Clean”的操作。
     1>来自项目“F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”的文件“F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln.metaproj”中的目标“Rebuild”(入口点):
       任务“MSBuild”
         全局属性:
           BuildingSolutionFile=true
           CurrentSolutionConfigurationContents=<SolutionConfiguration>
           <ProjectConfiguration Project="{1C8280CD-EB93-4849-940E-A99EDDF811D6}" AbsolutePath="F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
           <ProjectConfiguration Project="{F1D962E1-3B17-4597-B542-BCB657E75829}" AbsolutePath="F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
           <ProjectConfiguration Project="{F5FC4012-CE76-4AD8-B04A-25B1A0BF7EEC}" AbsolutePath="F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
         </SolutionConfiguration>
           SolutionDir=F:\GitHub\GameDemo\GameLibrary\
           SolutionExt=.sln
           SolutionFileName=GameLibrary.sln
           SolutionName=GameLibrary
           SolutionPath=F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln
         项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的其他属性:
           Configuration=Debug
           Platform=AnyCPU
         项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的其他属性:
           Configuration=Debug
           Platform=AnyCPU
         项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的其他属性:
           Configuration=Debug
           Platform=AnyCPU
     1>项目“F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”(1)正在节点 1 上生成“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”(2:2) (Rebuild 个目标)。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“_SdkBeforeRebuild”(目标“Rebuild”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“_SdkBeforeRebuild”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeRebuild”(目标“Rebuild”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“BeforeRebuild”的操作。
       已跳过目标“Clean”。以前的生成已成功。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeBuild”(目标“Build”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“BeforeBuild”的操作。
       由于条件的计算结果为 false，已跳过目标“_CheckForBuildWithNoBuild”；('$(NoBuild)' == 'true' and '$(GeneratePackageOnBuild)' != 'true')的计算结果为('' == 'true' and 'false' != 'true')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BuildOnlySettings”(目标“CoreBuild”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“BuildOnlySettings”的操作。
       由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetFramework”；('$(_UnsupportedTargetFrameworkError)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetPlatformIdentifier”；('$(TargetPlatformIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) And ('$(DesignTimeBuild)' != 'true' Or '@(MissingWorkloadPack)' == ''))的计算结果为('Windows' != '' and '.NETStandard' == '.NETCoreApp' and False And ('' != 'true' Or '' == ''))。
     1>项目“F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”(1)正在节点 3 上生成“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(4:6) (Rebuild 个目标)。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“_SdkBeforeRebuild”(目标“Rebuild”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_SdkBeforeRebuild”的操作。
     1>项目“F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”(1)正在节点 2 上生成“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(3:4) (Rebuild 个目标)。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“_SdkBeforeRebuild”(目标“Rebuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_SdkBeforeRebuild”的操作。
   2:2>由于条件的计算结果为 false，已跳过目标“_CheckForMissingWorkload”；('@(MissingWorkloadPack)' != '' And '$(DesignTimeBuild)' != 'true')的计算结果为('' != '' And '' != 'true')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DisableStandardFrameworkResolution.targets”中的目标“GetFrameworkPaths”(目标“PrepareForBuild”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“GetFrameworkPaths”的操作。
       由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetFramework”；('$(_UnsupportedTargetFrameworkError)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetPlatformIdentifier”；('$(TargetPlatformIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) And ('$(DesignTimeBuild)' != 'true' Or '@(MissingWorkloadPack)' == ''))的计算结果为('Windows' != '' and '.NETStandard' == '.NETCoreApp' and False And ('' != 'true' Or '' == ''))。
       由于条件的计算结果为 false，已跳过目标“_CheckForMissingWorkload”；('@(MissingWorkloadPack)' != '' And '$(DesignTimeBuild)' != 'true')的计算结果为('' != '' And '' != 'true')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DisableStandardFrameworkResolution.targets”中的目标“GetReferenceAssemblyPaths”(目标“PrepareForBuild”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“GetReferenceAssemblyPaths”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeRebuild”(目标“Rebuild”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“BeforeRebuild”的操作。
   2:2>由于条件的计算结果为 false，已跳过目标“AssignLinkMetadata”；( '$(SynthesizeLinkMetadata)' == 'true' )的计算结果为( '' == 'true' )。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeRebuild”(目标“Rebuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“BeforeRebuild”的操作。
   2:2>由于条件的计算结果为 false，已跳过目标“_VerifyPackReleaseConfigurations”；('$(_IsPacking)' == 'true' and '$(DOTNET_CLI_DISABLE_PUBLISH_AND_PACK_RELEASE)' != 'true' and '$(DOTNET_CLI_LAZY_PUBLISH_AND_PACK_RELEASE_FOR_SOLUTIONS)' == 'true')的计算结果为('' == 'true' and '' != 'true' and '' == 'true')。
   4:6>已跳过目标“Clean”。以前的生成已成功。
   3:4>已跳过目标“Clean”。以前的生成已成功。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeBuild”(目标“Build”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“BeforeBuild”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeBuild”(目标“Build”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“BeforeBuild”的操作。
   4:6>由于条件的计算结果为 false，已跳过目标“_CheckForBuildWithNoBuild”；('$(NoBuild)' == 'true' and '$(GeneratePackageOnBuild)' != 'true')的计算结果为('' == 'true' and 'false' != 'true')。
   3:4>由于条件的计算结果为 false，已跳过目标“_CheckForBuildWithNoBuild”；('$(NoBuild)' == 'true' and '$(GeneratePackageOnBuild)' != 'true')的计算结果为('' == 'true' and 'false' != 'true')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BuildOnlySettings”(目标“CoreBuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“BuildOnlySettings”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BuildOnlySettings”(目标“CoreBuild”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“BuildOnlySettings”的操作。
       由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetFramework”；('$(_UnsupportedTargetFrameworkError)' == 'true')的计算结果为('' == 'true')。
   3:4>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetFramework”；('$(_UnsupportedTargetFrameworkError)' == 'true')的计算结果为('' == 'true')。
   4:6>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetPlatformIdentifier”；('$(TargetPlatformIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) And ('$(DesignTimeBuild)' != 'true' Or '@(MissingWorkloadPack)' == ''))的计算结果为('Windows' != '' and '.NETStandard' == '.NETCoreApp' and False And ('' != 'true' Or '' == ''))。
   3:4>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetPlatformIdentifier”；('$(TargetPlatformIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) And ('$(DesignTimeBuild)' != 'true' Or '@(MissingWorkloadPack)' == ''))的计算结果为('Windows' != '' and '.NETStandard' == '.NETCoreApp' and False And ('' != 'true' Or '' == ''))。
   4:6>由于条件的计算结果为 false，已跳过目标“_CheckForMissingWorkload”；('@(MissingWorkloadPack)' != '' And '$(DesignTimeBuild)' != 'true')的计算结果为('' != '' And '' != 'true')。
   3:4>由于条件的计算结果为 false，已跳过目标“_CheckForMissingWorkload”；('@(MissingWorkloadPack)' != '' And '$(DesignTimeBuild)' != 'true')的计算结果为('' != '' And '' != 'true')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareForBuild”(目标“CoreBuild”依赖于它):
   2:2>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“FindAppConfigFile”任务。
       任务“FindAppConfigFile”
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DisableStandardFrameworkResolution.targets”中的目标“GetFrameworkPaths”(目标“PrepareForBuild”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“GetFrameworkPaths”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DisableStandardFrameworkResolution.targets”中的目标“GetFrameworkPaths”(目标“PrepareForBuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“GetFrameworkPaths”的操作。
   4:6>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetFramework”；('$(_UnsupportedTargetFrameworkError)' == 'true')的计算结果为('' == 'true')。
   3:4>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetFramework”；('$(_UnsupportedTargetFrameworkError)' == 'true')的计算结果为('' == 'true')。
   4:6>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetPlatformIdentifier”；('$(TargetPlatformIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) And ('$(DesignTimeBuild)' != 'true' Or '@(MissingWorkloadPack)' == ''))的计算结果为('Windows' != '' and '.NETStandard' == '.NETCoreApp' and False And ('' != 'true' Or '' == ''))。
   3:4>由于条件的计算结果为 false，已跳过目标“_CheckForUnsupportedTargetPlatformIdentifier”；('$(TargetPlatformIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) And ('$(DesignTimeBuild)' != 'true' Or '@(MissingWorkloadPack)' == ''))的计算结果为('Windows' != '' and '.NETStandard' == '.NETCoreApp' and False And ('' != 'true' Or '' == ''))。
   4:6>由于条件的计算结果为 false，已跳过目标“_CheckForMissingWorkload”；('@(MissingWorkloadPack)' != '' And '$(DesignTimeBuild)' != 'true')的计算结果为('' != '' And '' != 'true')。
   3:4>由于条件的计算结果为 false，已跳过目标“_CheckForMissingWorkload”；('@(MissingWorkloadPack)' != '' And '$(DesignTimeBuild)' != 'true')的计算结果为('' != '' And '' != 'true')。
   2:2>已完成执行任务“FindAppConfigFile”的操作。
       任务“MakeDir”
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DisableStandardFrameworkResolution.targets”中的目标“GetReferenceAssemblyPaths”(目标“PrepareForBuild”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“GetReferenceAssemblyPaths”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.DisableStandardFrameworkResolution.targets”中的目标“GetReferenceAssemblyPaths”(目标“PrepareForBuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“GetReferenceAssemblyPaths”的操作。
   4:6>由于条件的计算结果为 false，已跳过目标“AssignLinkMetadata”；( '$(SynthesizeLinkMetadata)' == 'true' )的计算结果为( '' == 'true' )。
   3:4>由于条件的计算结果为 false，已跳过目标“AssignLinkMetadata”；( '$(SynthesizeLinkMetadata)' == 'true' )的计算结果为( '' == 'true' )。
   2:2>已完成执行任务“MakeDir”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“PrepareForBuild”的操作。
   3:4>由于条件的计算结果为 false，已跳过目标“_VerifyPackReleaseConfigurations”；('$(_IsPacking)' == 'true' and '$(DOTNET_CLI_DISABLE_PUBLISH_AND_PACK_RELEASE)' != 'true' and '$(DOTNET_CLI_LAZY_PUBLISH_AND_PACK_RELEASE_FOR_SOLUTIONS)' == 'true')的计算结果为('' == 'true' and '' != 'true' and '' == 'true')。
   4:6>由于条件的计算结果为 false，已跳过目标“_VerifyPackReleaseConfigurations”；('$(_IsPacking)' == 'true' and '$(DOTNET_CLI_DISABLE_PUBLISH_AND_PACK_RELEASE)' != 'true' and '$(DOTNET_CLI_LAZY_PUBLISH_AND_PACK_RELEASE_FOR_SOLUTIONS)' == 'true')的计算结果为('' == 'true' and '' != 'true' and '' == 'true')。
   2:2>由于条件的计算结果为 false，已跳过目标“GenerateGlobalUsings”；(@(Using->Count()) != 0)的计算结果为(0 != 0)。
       由于条件的计算结果为 false，已跳过目标“PreBuildEvent”；('$(PreBuildEvent)'!='')的计算结果为(''!='')。
       由于条件的计算结果为 false，已跳过目标“_BlockWinMDsOnUnsupportedTFMs”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), '5.0')))的计算结果为('.NETStandard' == '.NETCoreApp' and False)。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareForBuild”(目标“CoreBuild”依赖于它):
   4:6>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“FindAppConfigFile”任务。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareForBuild”(目标“CoreBuild”依赖于它):
   3:4>正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“FindAppConfigFile”任务。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeResolveReferences”(目标“ResolveReferences”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“BeforeResolveReferences”的操作。
       已跳过目标“AssignProjectConfiguration”。以前的生成已成功。
       已跳过目标“PrepareProjectReferences”。以前的生成已成功。
   4:6>任务“FindAppConfigFile”
   3:4>任务“FindAppConfigFile”
   4:6>已完成执行任务“FindAppConfigFile”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveProjectReferences”(目标“ResolveReferences”依赖于它):
   2:2>由于 false 条件，已跳过任务“MSBuild”；('%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildProjectReferences)' != 'true') and '$(VisualStudioVersion)' != '10.0' and '@(_MSBuildProjectReferenceExistent)' != '')计算为('true' == 'true' and '..\..\Infrastructure\Common\Common.csproj;..\..\Infrastructure\StoryScript\StoryScript.csproj' != '' and ('' == 'true' or 'true' != 'true') and '17.0' != '10.0' and '..\..\Infrastructure\Common\Common.csproj;..\..\Infrastructure\StoryScript\StoryScript.csproj' != '')。
   3:4>已完成执行任务“FindAppConfigFile”的操作。
   4:6>任务“MakeDir”
   3:4>任务“MakeDir”
   4:6>已完成执行任务“MakeDir”的操作。
   3:4>已完成执行任务“MakeDir”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“PrepareForBuild”的操作。
   2:2>任务“MSBuild”
   3:4>已完成在项目“Common.csproj”中生成目标“PrepareForBuild”的操作。
   4:6>由于条件的计算结果为 false，已跳过目标“GenerateGlobalUsings”；(@(Using->Count()) != 0)的计算结果为(0 != 0)。
   3:4>由于条件的计算结果为 false，已跳过目标“GenerateGlobalUsings”；(@(Using->Count()) != 0)的计算结果为(0 != 0)。
   4:6>由于条件的计算结果为 false，已跳过目标“PreBuildEvent”；('$(PreBuildEvent)'!='')的计算结果为(''!='')。
   3:4>由于条件的计算结果为 false，已跳过目标“PreBuildEvent”；('$(PreBuildEvent)'!='')的计算结果为(''!='')。
   4:6>由于条件的计算结果为 false，已跳过目标“_BlockWinMDsOnUnsupportedTFMs”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), '5.0')))的计算结果为('.NETStandard' == '.NETCoreApp' and False)。
   3:4>由于条件的计算结果为 false，已跳过目标“_BlockWinMDsOnUnsupportedTFMs”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), '5.0')))的计算结果为('.NETStandard' == '.NETCoreApp' and False)。
   2:2>ResolveProjectReferences:
         全局属性:
           Configuration=Debug
           Platform=AnyCPU
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeResolveReferences”(目标“ResolveReferences”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“BeforeResolveReferences”的操作。
   2:2>ResolveProjectReferences:
         移除项目“..\..\Infrastructure\Common\Common.csproj”的属性:
           TargetFramework
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeResolveReferences”(目标“ResolveReferences”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“BeforeResolveReferences”的操作。
   2:2>ResolveProjectReferences:
           RuntimeIdentifier
           SelfContained
         移除项目“..\..\Infrastructure\StoryScript\StoryScript.csproj”的属性:
           TargetFramework
           RuntimeIdentifier
   4:6>已跳过目标“AssignProjectConfiguration”。以前的生成已成功。
   2:2>ResolveProjectReferences:
           SelfContained
   3:4>已跳过目标“AssignProjectConfiguration”。以前的生成已成功。
   4:6>已跳过目标“PrepareProjectReferences”。以前的生成已成功。
   3:4>已跳过目标“PrepareProjectReferences”。以前的生成已成功。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveProjectReferences”(目标“ResolveReferences”依赖于它):
   4:6>由于 false 条件，已跳过任务“MSBuild”；('%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildProjectReferences)' != 'true') and '$(VisualStudioVersion)' != '10.0' and '@(_MSBuildProjectReferenceExistent)' != '')计算为('' == 'true' and '' != '' and ('' == 'true' or 'true' != 'true') and '17.0' != '10.0' and '' != '')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveProjectReferences”(目标“ResolveReferences”依赖于它):
   3:4>由于 false 条件，已跳过任务“MSBuild”；('%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildProjectReferences)' != 'true') and '$(VisualStudioVersion)' != '10.0' and '@(_MSBuildProjectReferenceExistent)' != '')计算为('true' == 'true' and '..\StoryScript\StoryScript.csproj' != '' and ('' == 'true' or 'true' != 'true') and '17.0' != '10.0' and '..\StoryScript\StoryScript.csproj' != '')。
   4:6>ResolveProjectReferences:
       由于 false 条件，已跳过任务“MSBuild”；('%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and '$(BuildingInsideVisualStudio)' != 'true' and '$(BuildProjectReferences)' == 'true' and '@(_MSBuildProjectReferenceExistent)' != '')计算为('' == 'true' and '' != '' and '' != 'true' and 'true' == 'true' and '' != '')。
   3:4>任务“MSBuild”
   4:6>ResolveProjectReferences:
       由于 false 条件，已跳过任务“MSBuild”；('%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and '$(BuildingProject)' == 'true' and '@(_MSBuildProjectReferenceExistent)' != '')计算为('' == 'true' and '' != '' and 'true' == 'true' and '' != '')。
   3:4>ResolveProjectReferences:
         全局属性:
   4:6>ResolveProjectReferences:
       由于 false 条件，已跳过任务“Warning”；('@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceNonexistent)' != '')计算为('' != '' and '' != '')。
   3:4>ResolveProjectReferences:
           Configuration=Debug
   4:6>已完成在项目“StoryScript.csproj”中生成目标“ResolveProjectReferences”的操作。
   3:4>ResolveProjectReferences:
           Platform=AnyCPU
         移除项目“..\StoryScript\StoryScript.csproj”的属性:
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Windows.targets”中的目标“RemoveManagedWinRTComponentWinMDReferences”(目标“ResolveReferences”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“RemoveManagedWinRTComponentWinMDReferences”的操作。
   3:4>ResolveProjectReferences:
           TargetFramework
   4:6>由于条件的计算结果为 false，已跳过目标“AddWinRTComponentImplementationReference”；('@(ManagedWinRTComponentImplementations)' != '')的计算结果为('' != '')。
   3:4>ResolveProjectReferences:
           RuntimeIdentifier
   4:6>由于条件的计算结果为 false，已跳过目标“FindInvalidProjectReferences”；('$(FindInvalidProjectReferences)' == 'true')的计算结果为('' == 'true')。
   3:4>ResolveProjectReferences:
           SelfContained
   4:6>由于条件的计算结果为 false，已跳过目标“ResolveNativeReferences”；('@(NativeReference)'!='')的计算结果为(''!='')。
       已跳过目标“ResolveProjectReferences”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“FindInvalidProjectReferences”；('$(FindInvalidProjectReferences)' == 'true')的计算结果为('' == 'true')。
       已跳过目标“GetFrameworkPaths”。以前的生成已成功。
       已跳过目标“GetReferenceAssemblyPaths”。以前的生成已成功。
       已跳过目标“PrepareForBuild”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“GetInstalledSDKLocations”；('@(SDKReference)' != '')的计算结果为('' != '')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveSDKReferences”(目标“ResolveAssemblyReferences”依赖于它):
       由于 false 条件，已跳过任务“ResolveSDKReference”；('@(SDKReference)'!='')计算为(''!='')。
   2:2>项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”(2:2)正在节点 2 上生成“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(3:5) (默认目标)。
   3:5>已跳过目标“BeforeBuild”。以前的生成已成功。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“ResolveSDKReferences”的操作。
   3:5>由于条件的计算结果为 false，已跳过目标“_CheckForBuildWithNoBuild”；('$(NoBuild)' == 'true' and '$(GeneratePackageOnBuild)' != 'true')的计算结果为('' == 'true' and 'false' != 'true')。
   4:6>已跳过目标“ResolveSDKReferences”。以前的生成已成功。
   3:5>已跳过目标“BuildOnlySettings”。以前的生成已成功。
       已跳过目标“PrepareForBuild”。以前的生成已成功。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ExpandSDKReferences”(目标“ResolveAssemblyReferences”依赖于它):
   4:6>由于 false 条件，已跳过任务“GetSDKReferenceFiles”；('@(ResolvedSDKReference)'!='')计算为(''!='')。
   3:5>由于条件的计算结果为 false，已跳过目标“PreBuildEvent”；('$(PreBuildEvent)'!='')的计算结果为(''!='')。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“ExpandSDKReferences”的操作。
   3:5>由于条件的计算结果为 false，已跳过目标“_BlockWinMDsOnUnsupportedTFMs”；('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), '5.0')))的计算结果为('.NETStandard' == '.NETCoreApp' and False)。
   4:6>已跳过目标“ResolvePackageDependenciesForBuild”。以前的生成已成功。
       已跳过目标“GetFrameworkPaths”。以前的生成已成功。
       已跳过目标“GetReferenceAssemblyPaths”。以前的生成已成功。
       已跳过目标“ProcessFrameworkReferences”。以前的生成已成功。
       已跳过目标“ResolvePackageAssets”。以前的生成已成功。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets”中的目标“ResolveFrameworkReferences”(目标“ResolveTargetingPackAssets”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“GetPackageDirectory”任务。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ResolveFrameworkReferences”任务。
       任务“ResolveFrameworkReferences”
       已完成执行任务“ResolveFrameworkReferences”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“ResolveFrameworkReferences”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets”中的目标“ResolveTargetingPackAssets”(目标“_HandlePackageFileConflicts”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ResolveTargetingPackAssets”任务。
       任务“ResolveTargetingPackAssets”
       已完成执行任务“ResolveTargetingPackAssets”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“ResolveTargetingPackAssets”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets”中的目标“ResolveOffByDefaultAnalyzers”(目标“_HandlePackageFileConflicts”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“ResolveOffByDefaultAnalyzers”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.ConflictResolution.targets”中的目标“_HandlePackageFileConflicts”(目标“ResolveAssemblyReferences”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ResolvePackageFileConflicts”任务。
       任务“ResolvePackageFileConflicts”
       已完成执行任务“ResolvePackageFileConflicts”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_HandlePackageFileConflicts”的操作。
       已跳过目标“ResolveTargetingPackAssets”。以前的生成已成功。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveAssemblyReferences”(目标“ResolveReferences”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ResolveAssemblyReference”任务。
       任务“ResolveAssemblyReference”
         TargetFrameworkMoniker:
             .NETStandard,Version=v2.1
         TargetFrameworkMonikerDisplayName:
             .NET Standard 2.1
         TargetedRuntimeVersion:
             
         Assemblies:
             Dsl
                 HintPath =“..\..\ExternLibrary\Dsl.dll”
             LitJson
                 HintPath =“..\..\ExternLibrary\LitJson.dll”
             UnityEngine
                 HintPath =“..\..\ExternLibrary\UnityEngine.dll”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\Microsoft.Win32.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.AppContext.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Buffers.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.Concurrent.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.NonGeneric.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.Specialized.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.Composition.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.EventBasedAsync.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.TypeConverter.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Console.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Core.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Data.Common.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Data.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Contracts.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Debug.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.FileVersionInfo.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Process.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.StackTrace.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.TextWriterTraceListener.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Tools.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.TraceSource.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Tracing.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Drawing.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Drawing.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Dynamic.Runtime.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.Calendars.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.Extensions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.FileSystem.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.ZipFile.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.DriveInfo.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.Watcher.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.IsolatedStorage.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.MemoryMappedFiles.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Pipes.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.UnmanagedMemoryStream.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Expressions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Parallel.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Queryable.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Memory.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Http.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.NameResolution.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.NetworkInformation.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Ping.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Requests.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Security.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Sockets.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebHeaderCollection.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebSockets.Client.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebSockets.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Numerics.Vectors.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Numerics.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ObjectModel.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.DispatchProxy.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.ILGeneration.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.Lightweight.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Extensions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.Reader.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.ResourceManager.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.Writer.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.CompilerServices.VisualC.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Extensions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Handles.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.InteropServices.RuntimeInformation.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.InteropServices.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Numerics.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Formatters.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Json.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Xml.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Claims.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Algorithms.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Csp.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Encoding.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.X509Certificates.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Principal.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.SecureString.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ServiceModel.Web.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.Encoding.Extensions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.Encoding.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.RegularExpressions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Overlapped.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.Extensions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.Parallel.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Thread.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.ThreadPool.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Timer.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Transactions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ValueTuple.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Web.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Windows.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.Linq.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.ReaderWriter.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.Serialization.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XDocument.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XPath.XDocument.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XPath.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XmlDocument.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XmlSerializer.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\mscorlib.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\netstandard.dll
                 Private =“false”
         AssemblyFiles:
         CandidateAssemblyFiles:
         TargetFrameworkDirectories:
             
         InstalledAssemblyTables:
         IgnoreInstalledAssemblyTable:
             False
         SearchPaths:
             {CandidateAssemblyFiles}
             {HintPathFromItem}
             {TargetFrameworkDirectory}
             {RawFileName}
         AllowedAssemblyExtensions:
             .winmd
             .dll
             .exe
         AllowedRelatedFileExtensions:
             .pdb
             .xml
             .pri
             .dll.config
             .exe.config
         AppConfigFile:
             
         AutoUnify:
             True
         CopyLocalDependenciesWhenParentReferenceInGac:
             True
         FindDependencies:
             True
         TargetProcessorArchitecture:
             msil
         StateFile:
             obj\Debug\netstandard2.1\StoryScript.csproj.AssemblyReference.cache
         InstalledAssemblySubsetTables:
         IgnoreInstalledAssemblySubsetTable:
             False
         TargetFrameworkSubsets:
         FullTargetFrameworkSubsetNames:
             Full
         ProfileName:
             
         FullFrameworkFolders:
         LatestTargetFrameworkDirectories:
         ProfileTablesLocation:
         主引用“Dsl, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
             找到相关文件“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.pdb”。
         主引用“LitJson, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
             此引用的 ImageRuntimeVersion 是“v2.0.50727”。
         主引用“UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
         主引用“Microsoft.Win32.Primitives, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\Microsoft.Win32.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.AppContext, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.AppContext.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Buffers, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Buffers.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Collections.Concurrent, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.Concurrent.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Collections.NonGeneric, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.NonGeneric.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Collections.Specialized, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.Specialized.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Collections, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ComponentModel.Composition, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.Composition.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ComponentModel.EventBasedAsync, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.EventBasedAsync.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ComponentModel.Primitives, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ComponentModel.TypeConverter, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.TypeConverter.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ComponentModel, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Console, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Console.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Core.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Data.Common, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Data.Common.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Data.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.Contracts, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Contracts.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.Debug, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Debug.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.FileVersionInfo, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.FileVersionInfo.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.Process, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Process.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.StackTrace, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.StackTrace.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.TextWriterTraceListener, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.TextWriterTraceListener.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.Tools, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Tools.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.TraceSource, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.TraceSource.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.Tracing, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Tracing.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Drawing.Primitives, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Drawing.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Drawing.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Dynamic.Runtime, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Dynamic.Runtime.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Globalization.Calendars, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.Calendars.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Globalization.Extensions, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.Extensions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Globalization, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.Compression.FileSystem, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.FileSystem.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.Compression.ZipFile, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.ZipFile.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.Compression, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.FileSystem.DriveInfo, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.DriveInfo.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.FileSystem.Primitives, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.FileSystem.Watcher, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.Watcher.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.FileSystem, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.IsolatedStorage, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.IsolatedStorage.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.MemoryMappedFiles, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.MemoryMappedFiles.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.Pipes, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Pipes.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.UnmanagedMemoryStream, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.UnmanagedMemoryStream.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Linq.Expressions, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Expressions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Linq.Parallel, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Parallel.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Linq.Queryable, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Queryable.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Linq, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Memory, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Memory.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.Http, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Http.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.NameResolution, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.NameResolution.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.NetworkInformation, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.NetworkInformation.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.Ping, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Ping.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.Primitives, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.Requests, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Requests.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.Security, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Security.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.Sockets, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Sockets.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.WebHeaderCollection, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebHeaderCollection.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.WebSockets.Client, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebSockets.Client.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.WebSockets, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebSockets.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Numerics.Vectors, Version=4.1.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Numerics.Vectors.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Numerics.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ObjectModel, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ObjectModel.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection.DispatchProxy, Version=4.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.DispatchProxy.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection.Emit.ILGeneration, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.ILGeneration.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection.Emit.Lightweight, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.Lightweight.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection.Emit, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection.Extensions, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Extensions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection.Primitives, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Resources.Reader, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.Reader.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Resources.ResourceManager, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.ResourceManager.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Resources.Writer, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.Writer.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.CompilerServices.VisualC, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.CompilerServices.VisualC.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Extensions, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Extensions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Handles, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Handles.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.InteropServices.RuntimeInformation, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.InteropServices.RuntimeInformation.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.InteropServices, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.InteropServices.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Numerics, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Numerics.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Serialization.Formatters, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Formatters.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Serialization.Json, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Json.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Serialization.Primitives, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Serialization.Xml, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Xml.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Claims, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Claims.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Cryptography.Algorithms, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Algorithms.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Cryptography.Csp, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Csp.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Cryptography.Encoding, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Encoding.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Cryptography.Primitives, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Cryptography.X509Certificates, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.X509Certificates.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Principal, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Principal.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.SecureString, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.SecureString.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ServiceModel.Web.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Text.Encoding.Extensions, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.Encoding.Extensions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Text.Encoding, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.Encoding.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Text.RegularExpressions, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.RegularExpressions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.Overlapped, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Overlapped.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.Tasks.Extensions, Version=4.2.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.Extensions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.Tasks.Parallel, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.Parallel.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.Tasks, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.Thread, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Thread.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.ThreadPool, Version=4.0.12.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.ThreadPool.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.Timer, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Timer.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Transactions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Transactions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ValueTuple, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ValueTuple.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Web.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Windows, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Windows.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.Linq.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.ReaderWriter, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.ReaderWriter.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.Serialization.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.XDocument, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XDocument.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.XPath.XDocument, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XPath.XDocument.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.XPath, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XPath.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.XmlDocument, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XmlDocument.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.XmlSerializer, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XmlSerializer.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         统一主引用“System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             使用此版本而不是“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll”中的原始版本“2.0.0.0”，因为 AutoUnify 为“true”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         统一主引用“mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             使用此版本而不是“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll”中的原始版本“2.0.0.0”，因为 AutoUnify 为“true”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\mscorlib.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         统一主引用“netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”。
             使用此版本而不是“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll”中的原始版本“2.0.0.0”，因为 AutoUnify 为“true”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\netstandard.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
       已完成执行任务“ResolveAssemblyReference”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“ResolveAssemblyReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“_ErrorOnUnresolvedWindowsSDKAssemblyConflict”；( '@(ResolveAssemblyReferenceUnresolvedAssemblyConflicts)' != '' )的计算结果为( '' != '' )。
       由于条件的计算结果为 false，已跳过目标“GenerateBindingRedirects”；('$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true' and '@(SuggestedBindingRedirects)' != '' and '$(DesignTimeBuild)' != 'true' and '$(BuildingProject)' == 'true')的计算结果为('' == 'true' and '' == 'true' and 'System, Culture=neutral, PublicKeyToken=b77a5c561934e089;mscorlib, Culture=neutral, PublicKeyToken=b77a5c561934e089;netstandard, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' != '' and '' != 'true' and 'true' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateSupportedRuntime”；('$(GenerateSupportedRuntime)' != 'false' and '$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(HasRuntimeOutput)' == 'true')的计算结果为('' != 'false' and '.NETStandard' == '.NETFramework' and '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateBindingRedirectsUpdateAppConfig”；('$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true')的计算结果为('' == 'true' and '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“ResolveComReferences”；('@(COMReference)'!='' or '@(COMFileReference)'!='')的计算结果为(''!='' or ''!='')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterResolveReferences”(目标“ResolveReferences”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“AfterResolveReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveTestReferences”；('@(Shadow)'!='')的计算结果为(''!='')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveReferences”(目标“CoreBuild”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“ResolveReferences”的操作。
       已跳过目标“ResolvePackageDependenciesForBuild”。以前的生成已成功。
       已跳过目标“_HandlePackageFileConflicts”。以前的生成已成功。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets”中的目标“ValidationExtension”(目标“PrepareResources”依赖于它):
       由于 false 条件，已跳过任务“WorkflowBuildMessageTask”；('$(SkipWorkflowValidation)'!='' and '$(SkipWorkflowValidation)'!='true' and '$(SkipWorkflowValidation)'!='false')计算为(''!='' and ''!='true' and ''!='false')。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“ValidationExtension”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets”中的目标“ExpressionBuildExtension”(目标“PrepareResources”依赖于它):
       由于 false 条件，已跳过任务“WorkflowBuildMessageTask”；('$(DisableWorkflowCompiledExpressions)'!='' and '$(DisableWorkflowCompiledExpressions)'!='true' and '$(DisableWorkflowCompiledExpressions)'!='false')计算为(''!='' and ''!='true' and ''!='false')。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“ExpressionBuildExtension”的操作。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompilePass1”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileReadGeneratedFileList”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileAddFilesGenerated”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompilePass2”；('$(XamlRequiresCompilationPass2)' == 'true' )的计算结果为('false' == 'true' )。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileReadPass2Flag”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileAddExtensionFilesGenerated”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“AddDeferredValidationErrorsFileToFileWrites”；(Exists('$(DeferredValidationErrorsFileName)'))的计算结果为(Exists('obj\Debug\netstandard2.1\\AC2C1ABA-CCF6-44D4-8127-588FD4D0A860-DeferredValidationErrors.xml'))。
       由于条件的计算结果为 false，已跳过目标“ReportValidationBuildExtensionErrors”；('$(SkipWorkflowValidation)' != 'true' and ('@(XamlPage)' != '' or '@(XamlAppDef)' != ''))的计算结果为('' != 'true' and ('' != '' or '' != ''))。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“CopyAdditionalFiles”(目标“AssignTargetPaths”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“CopyAdditionalFiles”的操作。
       由于条件的计算结果为 false，已跳过目标“_ComputeNETCoreBuildOutputFiles”；('$(ComputeNETCoreBuildOutputFiles)' == 'true')的计算结果为('' == 'true')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AssignTargetPaths”(目标“PrepareResourceNames”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“AssignTargetPath”任务。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       由于 false 条件，已跳过任务“AssignTargetPath”；('@(_DeploymentBaseManifestWithTargetPath)'=='' and '%(None.Extension)'=='.manifest')计算为(''=='' and ''=='.manifest')。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“AssignTargetPaths”的操作。
       已跳过目标“AssignTargetPaths”。以前的生成已成功。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“SplitResourcesByCulture”(目标“PrepareResourceNames”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ResxWithNoCulture)'!='')计算为(''!='')。
       由于 false 条件，已跳过任务“Warning”；('@(ResxWithCulture)'!='')计算为(''!='')。
       由于 false 条件，已跳过任务“Warning”；('@(NonResxWithCulture)'!='')计算为(''!='')。
       由于 false 条件，已跳过任务“Warning”；('@(NonResxWithNoCulture)'!='')计算为(''!='')。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“AssignCulture”任务。
       任务“AssignCulture”
       已完成执行任务“AssignCulture”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“SplitResourcesByCulture”的操作。
       由于条件的计算结果为 false，已跳过目标“CreateManifestResourceNames”；('@(EmbeddedResource)' != '')的计算结果为('' != '')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CreateCustomManifestResourceNames”(目标“PrepareResourceNames”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“CreateCustomManifestResourceNames”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareResourceNames”(目标“PrepareResources”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“PrepareResourceNames”的操作。
       已跳过目标“ResolveAssemblyReferences”。以前的生成已成功。
       已跳过目标“SplitResourcesByCulture”。以前的生成已成功。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeResGen”(目标“ResGen”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“BeforeResGen”的操作。
       已跳过目标“ResolveReferences”。以前的生成已成功。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“FindReferenceAssembliesForReferences”(目标“CoreResGen”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“FindReferenceAssembliesForReferences”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CoreResGen”(目标“ResGen”依赖于它):
       由于 false 条件，已跳过任务“GenerateResource”；('%(EmbeddedResource.Type)' == 'Resx' and '%(EmbeddedResource.GenerateResource)' != 'false' and '$(GenerateResourceMSBuildRuntime)' != 'CLR2')计算为('' == 'Resx' and '' != 'false' and 'CurrentRuntime' != 'CLR2')。
       由于 false 条件，已跳过任务“GenerateResource”；('%(EmbeddedResource.Type)' == 'Resx' and '%(EmbeddedResource.GenerateResource)' != 'false' and '$(GenerateResourceMSBuildRuntime)' == 'CLR2')计算为('' == 'Resx' and '' != 'false' and 'CurrentRuntime' == 'CLR2')。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“CoreResGen”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterResGen”(目标“ResGen”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“AfterResGen”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResGen”(目标“PrepareResources”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“ResGen”的操作。
       由于条件的计算结果为 false，已跳过目标“CompileLicxFiles”；('@(_LicxFile)'!='')的计算结果为(''!='')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareResources”(目标“CoreBuild”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“PrepareResources”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveKeySource”；($(SignManifests) == 'true' or $(SignAssembly) == 'true')的计算结果为( == 'true' or false == 'true')。
       已跳过目标“ResolveReferences”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“ResolveKeySource”；($(SignManifests) == 'true' or $(SignAssembly) == 'true')的计算结果为( == 'true' or false == 'true')。
       由于条件的计算结果为 false，已跳过目标“ResolveComReferences”；('@(COMReference)'!='' or '@(COMFileReference)'!='')的计算结果为(''!='' or ''!='')。
       由于条件的计算结果为 false，已跳过目标“ResolveNativeReferences”；('@(NativeReference)'!='')的计算结果为(''!='')。
       由于条件的计算结果为 false，已跳过目标“_SetExternalWin32ManifestProperties”；('$(GenerateClickOnceManifests)'=='true' or '@(NativeReference)'!='' or '@(ResolvedIsolatedComModules)'!='')的计算结果为(''=='true' or ''!='' or ''!='')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_SetEmbeddedWin32ManifestProperties”(目标“SetWin32ManifestProperties”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“GetFrameworkPath”任务。
       任务“GetFrameworkPath”
       已完成执行任务“GetFrameworkPath”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_SetEmbeddedWin32ManifestProperties”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“SetWin32ManifestProperties”(目标“Compile”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“SetWin32ManifestProperties”的操作。
       已跳过目标“FindReferenceAssembliesForReferences”。以前的生成已成功。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GenerateCompileInputs”(目标“Compile”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ManifestResourceWithNoCulture)'!='' and '%(ManifestResourceWithNoCulture.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
       由于 false 条件，已跳过任务“Warning”；('@(ManifestNonResxWithNoCultureOnDisk)'!='' and '%(ManifestNonResxWithNoCultureOnDisk.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_GenerateCompileInputs”的操作。
       已跳过目标“PrepareForBuild”。以前的生成已成功。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“GenerateMSBuildEditorConfigFileShouldRun”(目标“GenerateMSBuildEditorConfigFile”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“GenerateMSBuildEditorConfigFileShouldRun”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“GenerateMSBuildEditorConfigFileCore”(目标“GenerateMSBuildEditorConfigFile”依赖于它):
       正在完全生成目标“GenerateMSBuildEditorConfigFileCore”。
       未指定输入文件。
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Build.Tasks.CodeAnalysis.dll”中的“GenerateMSBuildEditorConfig”任务。
       任务“GenerateMSBuildEditorConfig”
       已完成执行任务“GenerateMSBuildEditorConfig”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“GenerateMSBuildEditorConfigFileCore”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“GenerateMSBuildEditorConfigFile”(目标“BeforeCompile”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“GenerateMSBuildEditorConfigFile”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateTargetFrameworkMonikerAttribute”；('@(Compile)' != '' and '$(GenerateTargetFrameworkAttribute)' == 'true')的计算结果为('CommonCommands\Assign.cs;CommonCommands\Composite.cs;CommonCommands\Foreach.cs;...' != '' and 'False' == 'true')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.CSharp.CurrentVersion.targets”中的目标“_SetTargetFrameworkMonikerAttribute”(目标“GenerateTargetFrameworkMonikerAttribute”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_SetTargetFrameworkMonikerAttribute”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateAdditionalSources”；('@(AssemblyAttributes)' != '' and '$(GenerateAdditionalSources)' == 'true')的计算结果为('' != '' and '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateAssemblyInfo”；('$(GenerateAssemblyInfo)' == 'true')的计算结果为('false' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateGlobalUsings”；(@(Using->Count()) != 0)的计算结果为(0 != 0)。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeCompile”(目标“Compile”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“BeforeCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“_TimeStampBeforeCompile”；('$(RunPostBuildEvent)'=='OnOutputUpdated' or ('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library'))的计算结果为(''=='OnOutputUpdated' or (''=='true' and 'Library'=='library'))。
       已跳过目标“ResolveAssemblyReferences”。以前的生成已成功。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GenerateCompileDependencyCache”(目标“Compile”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Hash”任务。
       任务“Hash”
       已完成执行任务“Hash”的操作。
       任务“WriteLinesToFile”
       已完成执行任务“WriteLinesToFile”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_GenerateCompileDependencyCache”的操作。
       由于条件的计算结果为 false，已跳过目标“_ComputeNonExistentFileProperty”；(('$(BuildingInsideVisualStudio)' == 'true') and ('$(BuildingOutOfProcess)' != 'true') and (('$(BuildingProject)' == 'false') or ('$(UseHostCompilerIfAvailable)' == 'true')))的计算结果为(('' == 'true') and ('' != 'true') and (('true' == 'false') or ('true' == 'true')))。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.CSharp.CurrentVersion.targets”中的目标“ResolveCodeAnalysisRuleSet”(目标“CoreCompile”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ResolveCodeAnalysisRuleSet”任务。
       任务“ResolveCodeAnalysisRuleSet”
       已完成执行任务“ResolveCodeAnalysisRuleSet”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“ResolveCodeAnalysisRuleSet”的操作。
       由于条件的计算结果为 false，已跳过目标“ShimReferencePathsWhenCommonTargetsDoesNotUnderstandReferenceAssemblies”；('@(ReferencePathWithRefAssemblies)' == '')的计算结果为('F:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll;F:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll;C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\Microsoft.Win32.Primitives.dll;...' == '')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“_BeforeVBCSCoreCompile”(目标“CoreCompile”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_BeforeVBCSCoreCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“AdjustDefaultPlatformTargetForNetFrameworkExeWithNoNativeCopyLocalItems”；('$(_UsingDefaultPlatformTarget)' == 'true' and
                            '$(_UsingDefaultRuntimeIdentifier)' == 'true')的计算结果为('true' == 'true' and
                            '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_DisableDiagnosticTracing”；('$(DisableDiagnosticTracing)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateTargetPlatformDefineConstants”；( '$(DisableImplicitFrameworkDefines)' != 'true' and '$(TargetPlatformIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) )的计算结果为( '' != 'true' and 'Windows' != '' and '.NETStandard' == '.NETCoreApp' and False )。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.BeforeCommon.targets”中的目标“GenerateNETCompatibleDefineConstants”(目标“AddImplicitDefineConstants”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“GenerateNETCompatibleDefineConstants”的操作。
       由于条件的计算结果为 false，已跳过目标“GeneratePlatformCompatibleDefineConstants”；( '$(DisableImplicitFrameworkDefines)' != 'true' and '$(TargetPlatformIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) )的计算结果为( '' != 'true' and 'Windows' != '' and '.NETStandard' == '.NETCoreApp' and False )。
       由于条件的计算结果为 false，已跳过目标“_DisableDiagnosticTracing”；('$(DisableDiagnosticTracing)' == 'true')的计算结果为('' == 'true')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.BeforeCommon.targets”中的目标“AddImplicitDefineConstants”(目标“CoreCompile”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“AddImplicitDefineConstants”的操作。
       由于条件的计算结果为 false，已跳过目标“ShimReferencePathsWhenCommonTargetsDoesNotUnderstandReferenceAssemblies”；('@(ReferencePathWithRefAssemblies)' == '')的计算结果为('F:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll;F:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll;C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\Microsoft.Win32.Primitives.dll;...' == '')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“_ComputeSkipAnalyzers”(目标“CoreCompile”依赖于它):
       由于 false 条件，已跳过任务“ShowMessageForImplicitlySkipAnalyzers”；('$(_ImplicitlySkipAnalyzers)' == 'true')计算为('' == 'true')。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_ComputeSkipAnalyzers”的操作。
       由于条件的计算结果为 false，已跳过目标“_SetPathMapFromSourceRoots”；('$(DeterministicSourcePaths)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“CreateCompilerGeneratedFilesOutputPath”；('$(EmitCompilerGeneratedFiles)' == 'true' and !('$(DesignTimeBuild)' == 'true' OR '$(BuildingProject)' != 'true'))的计算结果为('false' == 'true' and !('' == 'true' OR 'true' != 'true'))。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.ServiceModel.targets”中的目标“PreXsdCodeGen”(目标“CoreCompile”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“CallTarget”任务。
       任务“CallTarget”
       已跳过目标“CleanXsdCodeGen”。以前的生成已成功。
       已完成执行任务“CallTarget”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“PreXsdCodeGen”的操作。
       由于条件的计算结果为 false，已跳过目标“XsdCodeGen”；( '$(XsdCodeGenPreCondition)' == 'True' )的计算结果为( 'False' == 'True' )。
       已跳过目标“BeforeCompile”。以前的生成已成功。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.Build.Tasks.Git\build\Microsoft.Build.Tasks.Git.targets”中的目标“InitializeSourceControlInformationFromSourceControlManager”(目标“SetEmbeddedFilesFromSourceControlManagerUntrackedFiles”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.Build.Tasks.Git\build\..\tools\net472\Microsoft.Build.Tasks.Git.dll”中的“Microsoft.Build.Tasks.Git.LocateRepository”任务。
       任务“Microsoft.Build.Tasks.Git.LocateRepository”
         SourceLink: Repository instance not found in cache: '*:F:\GitHub\GameDemo\.git'
       已完成执行任务“Microsoft.Build.Tasks.Git.LocateRepository”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“InitializeSourceControlInformationFromSourceControlManager”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.Build.Tasks.Git\build\Microsoft.Build.Tasks.Git.targets”中的目标“SetEmbeddedFilesFromSourceControlManagerUntrackedFiles”(目标“_SetEmbeddedFilesFromSourceControlManagerUntrackedFiles”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.Build.Tasks.Git\build\..\tools\net472\Microsoft.Build.Tasks.Git.dll”中的“Microsoft.Build.Tasks.Git.GetUntrackedFiles”任务。
       任务“Microsoft.Build.Tasks.Git.GetUntrackedFiles”
         SourceLink: Reusing cached git repository information.
       已完成执行任务“Microsoft.Build.Tasks.Git.GetUntrackedFiles”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“SetEmbeddedFilesFromSourceControlManagerUntrackedFiles”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\Microsoft.SourceLink.Common.targets”中的目标“_SetEmbeddedFilesFromSourceControlManagerUntrackedFiles”(目标“CoreCompile”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_SetEmbeddedFilesFromSourceControlManagerUntrackedFiles”的操作。
       已跳过目标“InitializeSourceControlInformationFromSourceControlManager”。以前的生成已成功。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\InitializeSourceControlInformation.targets”中的目标“_SourceLinkHasSingleProvider”(目标“_InitializeSourceControlInformationFromSourceControlManager”依赖于它):
       程序集加载期间 TaskRun: Microsoft.SourceLink.Common, Version=8.0.9.11501, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\tools\net472\Microsoft.SourceLink.Common.dll, MVID: 19921414-9bda-46be-bf07-0ee6adeb63bb, AppDomain: [Default])
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\..\tools\net472\Microsoft.SourceLink.Common.dll”中的“Microsoft.SourceLink.Common.SourceLinkHasSingleProvider”任务。
       任务“Microsoft.SourceLink.Common.SourceLinkHasSingleProvider”
       已完成执行任务“Microsoft.SourceLink.Common.SourceLinkHasSingleProvider”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_SourceLinkHasSingleProvider”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\build\Microsoft.SourceLink.GitHub.targets”中的目标“TranslateGitHubUrlsInSourceControlInformation”(目标“_InitializeSourceControlInformationFromSourceControlManager”依赖于它):
       程序集加载期间 TaskRun: Microsoft.SourceLink.GitHub, Version=8.0.9.11501, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\tools\net472\Microsoft.SourceLink.GitHub.dll, MVID: 203a1e0c-0f5a-417b-a1e2-8344aa340e04, AppDomain: [Default])
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\build\..\tools\net472\Microsoft.SourceLink.GitHub.dll”中的“Microsoft.SourceLink.GitHub.TranslateRepositoryUrls”任务。
       任务“Microsoft.SourceLink.GitHub.TranslateRepositoryUrls”
       已完成执行任务“Microsoft.SourceLink.GitHub.TranslateRepositoryUrls”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“TranslateGitHubUrlsInSourceControlInformation”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\Microsoft.SourceLink.GitLab.targets”中的目标“TranslateGitLabUrlsInSourceControlInformation”(目标“_InitializeSourceControlInformationFromSourceControlManager”依赖于它):
       程序集加载期间 TaskRun: Microsoft.SourceLink.GitLab, Version=8.0.9.11501, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\tools\net472\Microsoft.SourceLink.GitLab.dll, MVID: f8dee646-600e-46ce-b44a-470829b6446c, AppDomain: [Default])
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\..\tools\net472\Microsoft.SourceLink.GitLab.dll”中的“Microsoft.SourceLink.GitLab.TranslateRepositoryUrls”任务。
       任务“Microsoft.SourceLink.GitLab.TranslateRepositoryUrls”
       已完成执行任务“Microsoft.SourceLink.GitLab.TranslateRepositoryUrls”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“TranslateGitLabUrlsInSourceControlInformation”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\Microsoft.SourceLink.AzureRepos.Git.targets”中的目标“TranslateAzureReposGitUrlsInSourceControlInformation”(目标“_InitializeSourceControlInformationFromSourceControlManager”依赖于它):
       程序集加载期间 TaskRun: Microsoft.SourceLink.AzureRepos.Git, Version=8.0.9.11501, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\tools\net472\Microsoft.SourceLink.AzureRepos.Git.dll, MVID: bccb3889-f2b8-42f3-ac1f-8ab21c0eaf2a, AppDomain: [Default])
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\..\tools\net472\Microsoft.SourceLink.AzureRepos.Git.dll”中的“Microsoft.SourceLink.AzureRepos.Git.TranslateRepositoryUrls”任务。
       任务“Microsoft.SourceLink.AzureRepos.Git.TranslateRepositoryUrls”
       已完成执行任务“Microsoft.SourceLink.AzureRepos.Git.TranslateRepositoryUrls”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“TranslateAzureReposGitUrlsInSourceControlInformation”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\Microsoft.SourceLink.Bitbucket.Git.targets”中的目标“TranslateBitbucketGitUrlsInSourceControlInformation”(目标“_InitializeSourceControlInformationFromSourceControlManager”依赖于它):
       程序集加载期间 TaskRun: Microsoft.SourceLink.Bitbucket.Git, Version=8.0.9.11501, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\tools\net472\Microsoft.SourceLink.Bitbucket.Git.dll, MVID: 680dfc21-12ea-4be8-ab51-4f6ef7f5d016, AppDomain: [Default])
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\..\tools\net472\Microsoft.SourceLink.Bitbucket.Git.dll”中的“Microsoft.SourceLink.Bitbucket.Git.TranslateRepositoryUrls”任务。
       任务“Microsoft.SourceLink.Bitbucket.Git.TranslateRepositoryUrls”
       已完成执行任务“Microsoft.SourceLink.Bitbucket.Git.TranslateRepositoryUrls”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“TranslateBitbucketGitUrlsInSourceControlInformation”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\InitializeSourceControlInformation.targets”中的目标“SourceControlManagerPublishTranslatedUrls”(目标“_InitializeSourceControlInformationFromSourceControlManager”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“SourceControlManagerPublishTranslatedUrls”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\InitializeSourceControlInformation.targets”中的目标“_InitializeSourceControlInformationFromSourceControlManager”(目标“InitializeSourceControlInformation”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_InitializeSourceControlInformationFromSourceControlManager”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“InitializeSourceControlInformation”(目标“GenerateSourceLinkFile”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“InitializeSourceControlInformation”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\Microsoft.SourceLink.Common.targets”中的目标“_SetSourceLinkFilePath”(目标“_GenerateSourceLinkFile”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_SetSourceLinkFilePath”的操作。
       已跳过目标“InitializeSourceControlInformation”。以前的生成已成功。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“_InitializeSourceRootMappedPathsFromSourceControl”(目标“InitializeSourceRootMappedPaths”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_InitializeSourceRootMappedPathsFromSourceControl”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“InitializeSourceRootMappedPaths”(目标“_InitializeSourceRootMappedPathsOpt”依赖于它):
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Build.Tasks.CodeAnalysis.dll”中的“Microsoft.CodeAnalysis.BuildTasks.MapSourceRoots”任务。
       任务“Microsoft.CodeAnalysis.BuildTasks.MapSourceRoots”
       已完成执行任务“Microsoft.CodeAnalysis.BuildTasks.MapSourceRoots”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“InitializeSourceRootMappedPaths”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\Microsoft.SourceLink.Common.targets”中的目标“_InitializeSourceRootMappedPathsOpt”(目标“_GenerateSourceLinkFile”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_InitializeSourceRootMappedPathsOpt”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\build\Microsoft.SourceLink.GitHub.targets”中的目标“_InitializeGitHubSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeGitHubSourceLinkUrl”。
       未指定输入文件。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\build\..\tools\net472\Microsoft.SourceLink.GitHub.dll”中的“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”任务。
       任务“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_InitializeGitHubSourceLinkUrl”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\build\Microsoft.SourceLink.GitHub.targets”中的目标“_InitializeGitHubSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeGitHubSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_InitializeGitHubSourceLinkUrl”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\build\Microsoft.SourceLink.GitHub.targets”中的目标“_InitializeGitHubSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeGitHubSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_InitializeGitHubSourceLinkUrl”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\Microsoft.SourceLink.GitLab.targets”中的目标“_InitializeGitLabSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeGitLabSourceLinkUrl”。
       未指定输入文件。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\..\tools\net472\Microsoft.SourceLink.GitLab.dll”中的“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”任务。
       任务“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_InitializeGitLabSourceLinkUrl”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\Microsoft.SourceLink.GitLab.targets”中的目标“_InitializeGitLabSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeGitLabSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_InitializeGitLabSourceLinkUrl”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\Microsoft.SourceLink.GitLab.targets”中的目标“_InitializeGitLabSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeGitLabSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_InitializeGitLabSourceLinkUrl”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\Microsoft.SourceLink.AzureRepos.Git.targets”中的目标“_InitializeAzureReposGitSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeAzureReposGitSourceLinkUrl”。
       未指定输入文件。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\..\tools\net472\Microsoft.SourceLink.AzureRepos.Git.dll”中的“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”任务。
       任务“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_InitializeAzureReposGitSourceLinkUrl”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\Microsoft.SourceLink.AzureRepos.Git.targets”中的目标“_InitializeAzureReposGitSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeAzureReposGitSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_InitializeAzureReposGitSourceLinkUrl”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\Microsoft.SourceLink.AzureRepos.Git.targets”中的目标“_InitializeAzureReposGitSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeAzureReposGitSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_InitializeAzureReposGitSourceLinkUrl”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\Microsoft.SourceLink.Bitbucket.Git.targets”中的目标“_InitializeBitbucketGitSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeBitbucketGitSourceLinkUrl”。
       未指定输入文件。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\..\tools\net472\Microsoft.SourceLink.Bitbucket.Git.dll”中的“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”任务。
       任务“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_InitializeBitbucketGitSourceLinkUrl”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\Microsoft.SourceLink.Bitbucket.Git.targets”中的目标“_InitializeBitbucketGitSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeBitbucketGitSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_InitializeBitbucketGitSourceLinkUrl”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\Microsoft.SourceLink.Bitbucket.Git.targets”中的目标“_InitializeBitbucketGitSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeBitbucketGitSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_InitializeBitbucketGitSourceLinkUrl”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\Microsoft.SourceLink.Common.targets”中的目标“_GenerateSourceLinkFile”(目标“GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_GenerateSourceLinkFile”。
       未指定输入文件。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\..\tools\net472\Microsoft.SourceLink.Common.dll”中的“Microsoft.SourceLink.Common.GenerateSourceLinkFile”任务。
       任务“Microsoft.SourceLink.Common.GenerateSourceLinkFile”
         程序集加载期间 TaskRun (Microsoft.SourceLink.Common.GenerateSourceLinkFile): Microsoft.SourceLink.Common.resources, Version=8.0.9.11501, Culture=zh-Hans, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\tools\net472\zh-Hans\Microsoft.SourceLink.Common.resources.dll, MVID: af6eee06-2914-419d-9f5c-aa83bd20bbb6, AppDomain: [Default])
         正在更新 Source Link 文件 "obj\Debug\netstandard2.1\StoryScript.sourcelink.json"。
       已完成执行任务“Microsoft.SourceLink.Common.GenerateSourceLinkFile”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_GenerateSourceLinkFile”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\Microsoft.SourceLink.Common.targets”中的目标“GenerateSourceLinkFile”(目标“CoreCompile”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“GenerateSourceLinkFile”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateAssemblyInfo”；('$(GenerateAssemblyInfo)' == 'true')的计算结果为('false' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateGlobalUsings”；(@(Using->Count()) != 0)的计算结果为(0 != 0)。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets”中的目标“CoreCompile”(目标“Compile”依赖于它):
       正在完全生成目标“CoreCompile”。
       输出文件“obj\Debug\netstandard2.1\StoryScript.dll”不存在。
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Build.Tasks.CodeAnalysis.dll”中的“Csc”任务。
       任务“Csc”
         C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\csc.exe /noconfig /unsafe+ /checked- /nowarn:1701,1702,1701,1702 /fullpaths /nostdlib+ /errorreport:prompt /define:TRACE;DEBUG;NETSTANDARD;NETSTANDARD2_1;NETSTANDARD1_0_OR_GREATER;NETSTANDARD1_1_OR_GREATER;NETSTANDARD1_2_OR_GREATER;NETSTANDARD1_3_OR_GREATER;NETSTANDARD1_4_OR_GREATER;NETSTANDARD1_5_OR_GREATER;NETSTANDARD1_6_OR_GREATER;NETSTANDARD2_0_OR_GREATER;NETSTANDARD2_1_OR_GREATER /highentropyva+ /reference:F:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll /reference:F:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\Microsoft.Win32.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\mscorlib.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\netstandard.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.AppContext.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Buffers.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.Concurrent.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.NonGeneric.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.Specialized.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.Composition.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.EventBasedAsync.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.TypeConverter.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Console.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Core.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Data.Common.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Data.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Contracts.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Debug.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.FileVersionInfo.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Process.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.StackTrace.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.TextWriterTraceListener.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Tools.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.TraceSource.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Tracing.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Drawing.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Drawing.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Dynamic.Runtime.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.Calendars.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.Extensions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.FileSystem.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.ZipFile.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.DriveInfo.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.Watcher.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.IsolatedStorage.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.MemoryMappedFiles.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Pipes.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.UnmanagedMemoryStream.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Expressions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Parallel.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Queryable.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Memory.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Http.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.NameResolution.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.NetworkInformation.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Ping.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Requests.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Security.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Sockets.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebHeaderCollection.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebSockets.Client.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebSockets.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Numerics.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Numerics.Vectors.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ObjectModel.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.DispatchProxy.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.ILGeneration.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.Lightweight.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Extensions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.Reader.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.ResourceManager.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.Writer.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.CompilerServices.VisualC.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Extensions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Handles.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.InteropServices.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.InteropServices.RuntimeInformation.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Numerics.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Formatters.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Json.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Xml.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Claims.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Algorithms.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Csp.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Encoding.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.X509Certificates.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Principal.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.SecureString.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ServiceModel.Web.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.Encoding.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.Encoding.Extensions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.RegularExpressions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Overlapped.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.Extensions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.Parallel.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Thread.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.ThreadPool.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Timer.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Transactions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ValueTuple.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Web.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Windows.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.Linq.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.ReaderWriter.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.Serialization.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XDocument.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XmlDocument.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XmlSerializer.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XPath.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XPath.XDocument.dll" /reference:F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll /debug+ /debug:portable /filealign:512 /optimize- /out:obj\Debug\netstandard2.1\StoryScript.dll /ruleset:"C:\Program Files\Microsoft Visual Studio\2022\Community\Team Tools\Static Analysis Tools\\Rule Sets\MinimumRecommendedRules.ruleset" /target:library /warnaserror- /utf8output /deterministic+ /sourcelink:obj\Debug\netstandard2.1\StoryScript.sourcelink.json /langversion:8.0 /analyzerconfig:obj\Debug\netstandard2.1\StoryScript.GeneratedMSBuildEditorConfig.editorconfig CommonCommands\Assign.cs CommonCommands\Composite.cs CommonCommands\Foreach.cs CommonCommands\Hashtable.cs CommonCommands\IfElse.cs CommonCommands\LocalMessage.cs CommonCommands\Log.cs CommonCommands\ReflectionCommand.cs CommonCommands\Terminate.cs CommonCommands\Wait.cs CommonCommands\While.cs CommonFunctions\Arithmetic.cs CommonFunctions\Compare.cs CommonFunctions\Composite.cs CommonFunctions\GeneralFunctions.cs CommonFunctions\Hashtable.cs CommonFunctions\Linq.cs CommonFunctions\Logic.cs CommonFunctions\ReflectionFunctions.cs CommonFunctions\String.cs CommonFunctions\Time.cs CustomCommandFunctionParser.cs DslCalculator.cs IStoryCommand.cs IStoryCommandFactory.cs IStoryFunction.cs Log\LogSystem.cs Properties\AssemblyInfo.cs StoryCommandHelper.cs StoryCommandManager.cs StoryConfigManager.cs StoryDefine.cs StoryFunctionManager.cs StoryInstance.cs StoryValueHelper.cs Util\Converter.cs Util\GenericUtility.cs Util\SimpleObjectPool.cs Util\StoryHelper.cs Util\StringLower.cs Util\TimeUtility.cs /warnaserror+:NU1605
         Microsoft(R) Visual C# 编译器 版本 4.9.0-3.24121.1 (a98c90d5)
         版权所有(C) Microsoft Corporation。保留所有权利。
         CompilerServer: server - server processed compilation - 0c7d8724-4a2c-4f98-8230-f9396e8a8908
       已完成执行任务“Csc”的操作。
       由于 false 条件，已跳过任务“CallTarget”；('$(TargetsTriggeredByCompilation)' != '')计算为('' != '')。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“CoreCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“_TouchLastBuildWithSkipAnalyzers”；('$(_SkipAnalyzers)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_TimeStampAfterCompile”；('$(RunPostBuildEvent)'=='OnOutputUpdated' or ('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library'))的计算结果为(''=='OnOutputUpdated' or (''=='true' and 'Library'=='library'))。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterCompile”(目标“Compile”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“AfterCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“_CreateAppHost”；('$(ComputeNETCoreBuildOutputFiles)' == 'true' and
                            '$(AppHostSourcePath)' != '' and
                            Exists('@(IntermediateAssembly)') and
                            Exists('$(AppHostSourcePath)'))的计算结果为('' == 'true' and
                            '' != '' and
                            Exists('obj\Debug\netstandard2.1\StoryScript.dll') and
                            Exists(''))。
       由于条件的计算结果为 false，已跳过目标“_CreateComHost”；('$(ComputeNETCoreBuildOutputFiles)' == 'true' and
                            '$(ComHostIntermediatePath)' != '' and
                            Exists('@(IntermediateAssembly)') and
                            Exists('$(ComHostSourcePath)'))的计算结果为('' == 'true' and
                            '' != '' and
                            Exists('obj\Debug\netstandard2.1\StoryScript.dll') and
                            Exists(''))。
       由于条件的计算结果为 false，已跳过目标“_GetIjwHostPaths”；('$(UseIJWHost)' == 'true')的计算结果为('' == 'true')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Compile”(目标“CoreBuild”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“Compile”的操作。
       由于条件的计算结果为 false，已跳过目标“DeferredValidation”；('$(SkipWorkflowValidation)' != 'true' and ('@(XamlPage)' != '' or '@(XamlAppDef)' != ''))的计算结果为('' != 'true' and ('' != '' or '' != ''))。
       由于条件的计算结果为 false，已跳过目标“ExportWindowsMDFile”；('$(ExportWinMDFile)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“UnmanagedUnregistration”；((('$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)' or '$(RegisterForComInterop)' != 'true' or '$(OutputType)' != 'library') or
                           ('$(_AssemblyTimestampBeforeCompile)' == '')) and
                          Exists('@(_UnmanagedRegistrationCache)'))的计算结果为((('' != '' or '' != 'true' or 'Library' != 'library') or
                           ('' == '')) and
                          Exists('obj\StoryScript.csproj.UnmanagedRegistration.cache'))。
       由于条件的计算结果为 false，已跳过目标“GenerateSerializationAssemblies”；('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))的计算结果为('Off' == 'On' or (''!='' and 'Off' == 'Auto'))。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GenerateSatelliteAssemblyInputs”(目标“CreateSatelliteAssemblies”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ManifestResourceWithCulture)'!='' and '%(ManifestResourceWithCulture.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
       由于 false 条件，已跳过任务“Warning”；('@(ManifestNonResxWithCultureOnDisk)'!='' and '%(ManifestNonResxWithCultureOnDisk.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_GenerateSatelliteAssemblyInputs”的操作。
       由于条件的计算结果为 false，已跳过目标“ComputeIntermediateSatelliteAssemblies”；(@(EmbeddedResource->'%(WithCulture)') != '')的计算结果为( != '')。
       由于条件的计算结果为 false，已跳过目标“GenerateSatelliteAssemblies”；('@(_SatelliteAssemblyResourceInputs)' != '' and '$(GenerateSatelliteAssembliesForCore)' != 'true')的计算结果为('' != '' and '' != 'true')。
       由于条件的计算结果为 false，已跳过目标“CoreGenerateSatelliteAssemblies”；('@(_SatelliteAssemblyResourceInputs)' != ''  and '$(GenerateSatelliteAssembliesForCore)' == 'true' )的计算结果为('' != ''  and '' == 'true' )。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CreateSatelliteAssemblies”(目标“CoreBuild”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“CreateSatelliteAssemblies”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateManifests”；('$(GenerateClickOnceManifests)'=='true' or '@(NativeReference)'!='' or '@(ResolvedIsolatedComModules)'!='' or '$(GenerateAppxManifest)' == 'true')的计算结果为(''=='true' or ''!='' or ''!='' or '' == 'true')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetPathWithTargetPlatformMoniker”(目标“GetTargetPath”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“GetTargetPathWithTargetPlatformMoniker”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetPath”(目标“CoreBuild”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“GetTargetPath”的操作。
       由于条件的计算结果为 false，已跳过目标“ComputeIntermediateSatelliteAssemblies”；(@(EmbeddedResource->'%(WithCulture)') != '')的计算结果为( != '')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CopyFilesMarkedCopyLocal”(目标“CopyFilesToOutputDirectory”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Copy”任务。
       任务“Copy”
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll”复制到“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\UnityEngine.dll”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll”复制到“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\Dsl.dll”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.pdb”复制到“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\Dsl.pdb”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll”复制到“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\LitJson.dll”。
       已完成执行任务“Copy”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Touch”任务。
       任务“Touch”
         正在创建“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\StoryScr.5BC802E4.Up2Date”，因为已指定“AlwaysCreate”。
         正在对“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\StoryScr.5BC802E4.Up2Date”执行 Touch 任务。
       已完成执行任务“Touch”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_CopyFilesMarkedCopyLocal”的操作。
       已跳过目标“AssignTargetPaths”。以前的生成已成功。
       已跳过目标“AssignProjectConfiguration”。以前的生成已成功。
       已跳过目标“_SplitProjectReferencesByFileExistence”。以前的生成已成功。
       已跳过目标“_GetProjectReferenceTargetFrameworkProperties”。以前的生成已成功。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”(目标“GetCopyToOutputDirectoryItems”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets”中的目标“GetCopyToOutputDirectoryXamlAppDefs”(目标“GetCopyToOutputDirectoryItems”依赖于它):
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“GetCopyToOutputDirectoryXamlAppDefs”的操作。
       由于条件的计算结果为 false，已跳过目标“AddDepsJsonAndRuntimeConfigToCopyItemsForReferencingProjects”；('$(HasRuntimeOutput)' == 'true')的计算结果为('' == 'true')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetCopyToOutputDirectoryItems”(目标“_CopySourceItemsToOutputDirectory”依赖于它):
       任务“CallTarget”
       已跳过目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”。以前的生成已成功。
       已跳过目标“_AddOutputPathToGlobalPropertiesToRemove”。以前的生成已成功。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences”(目标“GetCopyToOutputDirectoryItems”依赖于它):
       由于 false 条件，已跳过任务“MSBuild”；('@(_MSBuildProjectReferenceExistent)' != '' and '$(_GetChildProjectCopyToOutputDirectoryItems)' == 'true' and '%(_MSBuildProjectReferenceExistent.Private)' != 'false' and '$(UseCommonOutputDirectory)' != 'true')计算为('' != '' and 'true' == 'true' and '' != 'false' and 'false' != 'true')。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences”的操作。
       已完成执行任务“CallTarget”的操作。
       任务“CallTarget”
       已跳过目标“AssignTargetPaths”。以前的生成已成功。
       已跳过目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“AddDepsJsonAndRuntimeConfigToCopyItemsForReferencingProjects”；('$(HasRuntimeOutput)' == 'true')的计算结果为('' == 'true')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GetCopyToOutputDirectoryItemsFromThisProject”(目标“GetCopyToOutputDirectoryItems”依赖于它):
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_GetCopyToOutputDirectoryItemsFromThisProject”的操作。
       已完成执行任务“CallTarget”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“GetCopyToOutputDirectoryItems”的操作。
       由于条件的计算结果为 false，已跳过目标“_CopyOutOfDateSourceItemsToOutputDirectory”；( '@(_SourceItemsToCopyToOutputDirectory)' != '' )的计算结果为( '' != '' )。
       由于条件的计算结果为 false，已跳过目标“_CopyOutOfDateSourceItemsToOutputDirectoryAlways”；( '@(_SourceItemsToCopyToOutputDirectoryAlways)' != '' )的计算结果为( '' != '' )。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CopySourceItemsToOutputDirectory”(目标“CopyFilesToOutputDirectory”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_CopySourceItemsToOutputDirectory”的操作。
       由于条件的计算结果为 false，已跳过目标“_CopyAppConfigFile”；( '@(AppConfigWithTargetPath)' != '' )的计算结果为( '' != '' )。
       由于条件的计算结果为 false，已跳过目标“_CopyManifestFiles”；( '$(_DeploymentCopyApplicationManifest)'=='true' or '$(GenerateClickOnceManifests)'=='true' )的计算结果为( ''=='true' or ''=='true' )。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CheckForCompileOutputs”(目标“CopyFilesToOutputDirectory”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_CheckForCompileOutputs”的操作。
       由于条件的计算结果为 false，已跳过目标“_SGenCheckForOutputs”；('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))的计算结果为('Off' == 'On' or (''!='' and 'Off' == 'Auto'))。
       已跳过目标“_DefaultMicrosoftNETPlatformLibrary”。以前的生成已成功。
       已跳过目标“_HandlePackageFileConflicts”。以前的生成已成功。
       已跳过目标“ResolveAssemblyReferences”。以前的生成已成功。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“_ComputeReferenceAssemblies”(目标“GenerateBuildDependencyFile”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_ComputeReferenceAssemblies”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“_ComputeUserRuntimeAssemblies”(目标“GenerateBuildDependencyFile”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_ComputeUserRuntimeAssemblies”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveRuntimePackAssets”；('@(RuntimePack)' != '')的计算结果为('' != '')。
       已跳过目标“_ComputePackageReferencePublish”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“ComputeDependencyFileCompilerOptions”；('$(PreserveCompilationContext)' == 'true')的计算结果为('' == 'true')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“GenerateBuildDependencyFile”(目标“CopyFilesToOutputDirectory”依赖于它):
       正在完全生成目标“GenerateBuildDependencyFile”。
       输出文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.deps.json”不存在。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“GenerateDepsFile”任务。
       任务“GenerateDepsFile”
       已完成执行任务“GenerateDepsFile”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“GenerateBuildDependencyFile”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateBuildRuntimeConfigurationFiles”；( '$(GenerateRuntimeConfigurationFiles)' == 'true')的计算结果为( '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateShimsAssets”；('$(PackAsTool)' == 'true' and $(PackAsToolShimRuntimeIdentifiers) != '' )的计算结果为('' == 'true' and  != '' )。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CopyFilesToOutputDirectory”(目标“PrepareForRun”依赖于它):
       任务“Copy”
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\StoryScript.dll”复制到“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”。
       已完成执行任务“Copy”的操作。
       由于 false 条件，已跳过任务“CopyRefAssembly”；('$(ProduceReferenceAssembly)' == 'true' and '$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true')计算为('false' == 'true' and 'true' == 'true' and '' != 'true')。
       任务“Message”
         StoryScript -> F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll
       已完成执行任务“Message”的操作。
       由于 false 条件，已跳过任务“Copy”；('@(AddModules)' != '')计算为('' != '')。
       由于 false 条件，已跳过任务“Copy”；('$(_SGenDllCreated)'=='true')计算为('false'=='true')。
       任务“Copy”
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\obj\Debug\netstandard2.1\StoryScript.pdb”复制到“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.pdb”。
       已完成执行任务“Copy”的操作。
       由于 false 条件，已跳过任务“Copy”；('$(_DocumentationFileProduced)'=='true' and '$(CopyDocumentationFileToOutputDirectory)'=='true')计算为('false'=='true' and 'true'=='true')。
       由于 false 条件，已跳过任务“Copy”；('@(IntermediateSatelliteAssembliesWithTargetPath)' != '')计算为('' != '')。
       由于 false 条件，已跳过任务“Copy”；('@(ReferenceComWrappersToCopyLocal)' != '' or '@(ResolvedIsolatedComModules)' != '' or '@(_DeploymentLooseManifestFile)' != '' or '@(NativeReferenceFile)' != '' )计算为('' != '' or '' != '' or '' != '' or '' != '' )。
       由于 false 条件，已跳过任务“Copy”；('$(SkipCopyWinMDArtifact)' != 'true' and '@(WinMDExpArtifacts)' != '')计算为('' != 'true' and '' != '')。
       由于 false 条件，已跳过任务“Message”；('$(SkipCopyWinMDArtifact)' != 'true' and '$(_WindowsMetadataOutputPath)' != '')计算为('' != 'true' and '' != '')。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“CopyFilesToOutputDirectory”的操作。
       由于条件的计算结果为 false，已跳过目标“_CopyReferenceOnlyAssembliesForBuild”；('$(PreserveCompilationReferences)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“RunCodeAnalysis”；('$(RunCodeAnalysisOnThisProject)'=='true')的计算结果为(''=='true')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareForRun”(目标“CoreBuild”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“PrepareForRun”的操作。
       由于条件的计算结果为 false，已跳过目标“UnmanagedRegistration”；('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library')的计算结果为(''=='true' and 'Library'=='library')。
       已跳过目标“_CheckForCompileOutputs”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“_SGenCheckForOutputs”；('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))的计算结果为('Off' == 'On' or (''!='' and 'Off' == 'Auto'))。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CleanGetCurrentAndPriorFileWrites”(目标“IncrementalClean”依赖于它):
       任务“ReadLinesFromFile”
       已完成执行任务“ReadLinesFromFile”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ConvertToAbsolutePath”任务。
       任务“ConvertToAbsolutePath”
       已完成执行任务“ConvertToAbsolutePath”的操作。
       任务“FindUnderPath”
         比较路径为“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“bin\Debug\netstandard2.1\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“obj\Debug\netstandard2.1\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“RemoveDuplicates”
       已完成执行任务“RemoveDuplicates”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_CleanGetCurrentAndPriorFileWrites”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“IncrementalClean”(目标“CoreBuild”依赖于它):
       任务“FindUnderPath”
         比较路径为“bin\Debug\netstandard2.1\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“obj\Debug\netstandard2.1\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“Delete”
       已完成执行任务“Delete”的操作。
       任务“RemoveDuplicates”
       已完成执行任务“RemoveDuplicates”的操作。
       任务“WriteLinesToFile”
       已完成执行任务“WriteLinesToFile”的操作。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“IncrementalClean”的操作。
       由于条件的计算结果为 false，已跳过目标“PostBuildEvent”；('$(PostBuildEvent)' != '' and ('$(RunPostBuildEvent)' != 'OnOutputUpdated' or '$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)'))的计算结果为('' != '' and ('' != 'OnOutputUpdated' or '' != ''))。
       已跳过目标“GenerateBuildDependencyFile”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“GenerateBuildRuntimeConfigurationFiles”；( '$(GenerateRuntimeConfigurationFiles)' == 'true')的计算结果为( '' == 'true')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CoreBuild”(目标“Build”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“CoreBuild”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterBuild”(目标“Build”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“AfterBuild”的操作。
       由于条件的计算结果为 false，已跳过目标“_CheckBrowserWorkloadNeededButNotAvailable”；('$(RuntimeIdentifier)' == 'browser-wasm' and '$(_BrowserWorkloadDisabled)' != 'true' and '$(WasmNativeWorkloadAvailable)' != 'true')的计算结果为('' == 'browser-wasm' and '' != 'true' and '' != 'true')。
       由于条件的计算结果为 false，已跳过目标“_ErrorWorkloadDisabledForTFMLessThan6”；('$(_BrowserWorkloadNotSupportedForTFM)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_ErrorDualWasmThreadPropsOn7”；('$(TargetsNet7)' == 'true' and '$(RuntimeIdentifier)' == 'browser-wasm' and
           '$(BrowserWorkloadDisabled)' != 'true' and '$(WasmEnableThreads)' == 'true' and '$(WasmEnablePerfTrace)' == 'true')的计算结果为('' == 'true' and '' == 'browser-wasm' and
           '' != 'true' and '' == 'true' and '' == 'true')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Build”(目标“Rebuild”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“Build”的操作。
       由于条件的计算结果为 false，已跳过目标“_PackAsBuildAfterTarget”；('$(GeneratePackageOnBuild)' == 'true' AND '$(IsInnerBuild)' != 'true')的计算结果为('false' == 'true' AND '' != 'true')。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Containers\build\Microsoft.NET.Build.Containers.targets”中的目标“_CheckContainersPackage”(目标“Rebuild”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ContainersPackage)' != '')计算为('' != '')。
   4:6>已完成在项目“StoryScript.csproj”中生成目标“_CheckContainersPackage”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterRebuild”(目标“Rebuild”依赖于它):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“AfterRebuild”的操作。
   4:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Rebuild”(入口点):
   4:6>已完成在项目“StoryScript.csproj”中生成目标“Rebuild”的操作。
   4:6>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(Rebuild 个目标)的操作。
   3:4>项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(3:4)正在节点 3 上生成“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(4:7) (默认目标)。
   4:7>已跳过目标“Build”。以前的生成已成功。
   4:7>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(默认目标)的操作。
   2:2>项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”(2:2)正在节点 3 上生成“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(4:8) (默认目标)。
   4:8>已跳过目标“Build”。以前的生成已成功。
   4:8>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(默认目标)的操作。
   3:4>已完成执行任务“MSBuild”的操作。
       任务“MSBuild”
         全局属性:
           Configuration=Debug
           Platform=AnyCPU
         移除项目“..\StoryScript\StoryScript.csproj”的属性:
           TargetFramework
           RuntimeIdentifier
           SelfContained
   3:4>项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(3:4)正在节点 3 上生成“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(4:9) (GetNativeManifest 个目标)。
   4:9>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetNativeManifest”(入口点):
   4:9>已完成在项目“StoryScript.csproj”中生成目标“GetNativeManifest”的操作。
   4:9>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(GetNativeManifest 个目标)的操作。
   3:4>已完成执行任务“MSBuild”的操作。
       由于 false 条件，已跳过任务“Warning”；('@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceNonexistent)' != '')计算为('..\StoryScript\StoryScript.csproj' != '' and '' != '')。
   3:4>已完成在项目“Common.csproj”中生成目标“ResolveProjectReferences”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Windows.targets”中的目标“RemoveManagedWinRTComponentWinMDReferences”(目标“ResolveReferences”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“RemoveManagedWinRTComponentWinMDReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“AddWinRTComponentImplementationReference”；('@(ManagedWinRTComponentImplementations)' != '')的计算结果为('' != '')。
       由于条件的计算结果为 false，已跳过目标“FindInvalidProjectReferences”；('$(FindInvalidProjectReferences)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“ResolveNativeReferences”；('@(NativeReference)'!='')的计算结果为(''!='')。
       已跳过目标“ResolveProjectReferences”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“FindInvalidProjectReferences”；('$(FindInvalidProjectReferences)' == 'true')的计算结果为('' == 'true')。
       已跳过目标“GetFrameworkPaths”。以前的生成已成功。
       已跳过目标“GetReferenceAssemblyPaths”。以前的生成已成功。
       已跳过目标“PrepareForBuild”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“GetInstalledSDKLocations”；('@(SDKReference)' != '')的计算结果为('' != '')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveSDKReferences”(目标“ResolveAssemblyReferences”依赖于它):
       由于 false 条件，已跳过任务“ResolveSDKReference”；('@(SDKReference)'!='')计算为(''!='')。
   3:4>已完成在项目“Common.csproj”中生成目标“ResolveSDKReferences”的操作。
       已跳过目标“ResolveSDKReferences”。以前的生成已成功。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ExpandSDKReferences”(目标“ResolveAssemblyReferences”依赖于它):
       由于 false 条件，已跳过任务“GetSDKReferenceFiles”；('@(ResolvedSDKReference)'!='')计算为(''!='')。
   3:4>已完成在项目“Common.csproj”中生成目标“ExpandSDKReferences”的操作。
       已跳过目标“ResolvePackageDependenciesForBuild”。以前的生成已成功。
       已跳过目标“GetFrameworkPaths”。以前的生成已成功。
       已跳过目标“GetReferenceAssemblyPaths”。以前的生成已成功。
       已跳过目标“ProcessFrameworkReferences”。以前的生成已成功。
       已跳过目标“ResolvePackageAssets”。以前的生成已成功。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets”中的目标“ResolveFrameworkReferences”(目标“ResolveTargetingPackAssets”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“GetPackageDirectory”任务。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ResolveFrameworkReferences”任务。
       任务“ResolveFrameworkReferences”
       已完成执行任务“ResolveFrameworkReferences”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“ResolveFrameworkReferences”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets”中的目标“ResolveTargetingPackAssets”(目标“_HandlePackageFileConflicts”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ResolveTargetingPackAssets”任务。
       任务“ResolveTargetingPackAssets”
       已完成执行任务“ResolveTargetingPackAssets”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“ResolveTargetingPackAssets”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets”中的目标“ResolveOffByDefaultAnalyzers”(目标“_HandlePackageFileConflicts”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“ResolveOffByDefaultAnalyzers”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.ConflictResolution.targets”中的目标“_HandlePackageFileConflicts”(目标“ResolveAssemblyReferences”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ResolvePackageFileConflicts”任务。
       任务“ResolvePackageFileConflicts”
       已完成执行任务“ResolvePackageFileConflicts”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_HandlePackageFileConflicts”的操作。
       已跳过目标“ResolveTargetingPackAssets”。以前的生成已成功。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveAssemblyReferences”(目标“ResolveReferences”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ResolveAssemblyReference”任务。
       任务“ResolveAssemblyReference”
         TargetFrameworkMoniker:
             .NETStandard,Version=v2.1
         TargetFrameworkMonikerDisplayName:
             .NET Standard 2.1
         TargetedRuntimeVersion:
             
         Assemblies:
             UnityEngine
                 HintPath =“..\..\ExternLibrary\UnityEngine.dll”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\Microsoft.Win32.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.AppContext.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Buffers.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.Concurrent.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.NonGeneric.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.Specialized.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.Composition.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.EventBasedAsync.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.TypeConverter.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Console.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Core.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Data.Common.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Data.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Contracts.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Debug.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.FileVersionInfo.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Process.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.StackTrace.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.TextWriterTraceListener.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Tools.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.TraceSource.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Tracing.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Drawing.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Drawing.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Dynamic.Runtime.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.Calendars.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.Extensions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.FileSystem.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.ZipFile.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.DriveInfo.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.Watcher.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.IsolatedStorage.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.MemoryMappedFiles.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Pipes.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.UnmanagedMemoryStream.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Expressions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Parallel.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Queryable.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Memory.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Http.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.NameResolution.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.NetworkInformation.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Ping.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Requests.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Security.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Sockets.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebHeaderCollection.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebSockets.Client.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebSockets.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Numerics.Vectors.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Numerics.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ObjectModel.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.DispatchProxy.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.ILGeneration.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.Lightweight.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Extensions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.Reader.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.ResourceManager.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.Writer.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.CompilerServices.VisualC.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Extensions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Handles.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.InteropServices.RuntimeInformation.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.InteropServices.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Numerics.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Formatters.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Json.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Xml.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Claims.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Algorithms.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Csp.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Encoding.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.X509Certificates.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Principal.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.SecureString.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ServiceModel.Web.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.Encoding.Extensions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.Encoding.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.RegularExpressions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Overlapped.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.Extensions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.Parallel.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Thread.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.ThreadPool.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Timer.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Transactions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ValueTuple.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Web.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Windows.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.Linq.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.ReaderWriter.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.Serialization.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XDocument.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XPath.XDocument.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XPath.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XmlDocument.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XmlSerializer.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\mscorlib.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\netstandard.dll
                 Private =“false”
         AssemblyFiles:
             F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll
         CandidateAssemblyFiles:
         TargetFrameworkDirectories:
             
         InstalledAssemblyTables:
         IgnoreInstalledAssemblyTable:
             False
         SearchPaths:
             {CandidateAssemblyFiles}
             {HintPathFromItem}
             {TargetFrameworkDirectory}
             {RawFileName}
         AllowedAssemblyExtensions:
             .winmd
             .dll
             .exe
         AllowedRelatedFileExtensions:
             .pdb
             .xml
             .pri
             .dll.config
             .exe.config
         AppConfigFile:
             
         AutoUnify:
             True
         CopyLocalDependenciesWhenParentReferenceInGac:
             True
         FindDependencies:
             True
         TargetProcessorArchitecture:
             msil
         StateFile:
             obj\Debug\netstandard2.1\Common.csproj.AssemblyReference.cache
         InstalledAssemblySubsetTables:
         IgnoreInstalledAssemblySubsetTable:
             False
         TargetFrameworkSubsets:
         FullTargetFrameworkSubsetNames:
             Full
         ProfileName:
             
         FullFrameworkFolders:
         LatestTargetFrameworkDirectories:
         ProfileTablesLocation:
         主引用“StoryScript, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”。
             在搜索路径位置“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”找到引用。
             找到相关文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.pdb”。
         主引用“UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
         主引用“Microsoft.Win32.Primitives, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\Microsoft.Win32.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.AppContext, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.AppContext.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Buffers, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Buffers.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Collections.Concurrent, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.Concurrent.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Collections.NonGeneric, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.NonGeneric.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Collections.Specialized, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.Specialized.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Collections, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ComponentModel.Composition, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.Composition.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ComponentModel.EventBasedAsync, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.EventBasedAsync.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ComponentModel.Primitives, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ComponentModel.TypeConverter, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.TypeConverter.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ComponentModel, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Console, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Console.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Core.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Data.Common, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Data.Common.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Data.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.Contracts, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Contracts.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.Debug, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Debug.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.FileVersionInfo, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.FileVersionInfo.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.Process, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Process.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.StackTrace, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.StackTrace.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.TextWriterTraceListener, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.TextWriterTraceListener.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.Tools, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Tools.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.TraceSource, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.TraceSource.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.Tracing, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Tracing.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Drawing.Primitives, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Drawing.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Drawing.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Dynamic.Runtime, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Dynamic.Runtime.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Globalization.Calendars, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.Calendars.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Globalization.Extensions, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.Extensions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Globalization, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.Compression.FileSystem, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.FileSystem.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.Compression.ZipFile, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.ZipFile.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.Compression, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.FileSystem.DriveInfo, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.DriveInfo.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.FileSystem.Primitives, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.FileSystem.Watcher, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.Watcher.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.FileSystem, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.IsolatedStorage, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.IsolatedStorage.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.MemoryMappedFiles, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.MemoryMappedFiles.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.Pipes, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Pipes.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.UnmanagedMemoryStream, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.UnmanagedMemoryStream.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Linq.Expressions, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Expressions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Linq.Parallel, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Parallel.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Linq.Queryable, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Queryable.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Linq, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Memory, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Memory.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.Http, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Http.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.NameResolution, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.NameResolution.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.NetworkInformation, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.NetworkInformation.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.Ping, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Ping.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.Primitives, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.Requests, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Requests.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.Security, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Security.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.Sockets, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Sockets.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.WebHeaderCollection, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebHeaderCollection.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.WebSockets.Client, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebSockets.Client.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.WebSockets, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebSockets.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Numerics.Vectors, Version=4.1.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Numerics.Vectors.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Numerics.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ObjectModel, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ObjectModel.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection.DispatchProxy, Version=4.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.DispatchProxy.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection.Emit.ILGeneration, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.ILGeneration.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection.Emit.Lightweight, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.Lightweight.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection.Emit, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection.Extensions, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Extensions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection.Primitives, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Resources.Reader, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.Reader.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Resources.ResourceManager, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.ResourceManager.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Resources.Writer, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.Writer.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.CompilerServices.VisualC, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.CompilerServices.VisualC.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Extensions, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Extensions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Handles, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Handles.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.InteropServices.RuntimeInformation, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.InteropServices.RuntimeInformation.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.InteropServices, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.InteropServices.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Numerics, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Numerics.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Serialization.Formatters, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Formatters.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Serialization.Json, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Json.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Serialization.Primitives, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Serialization.Xml, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Xml.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Claims, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Claims.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Cryptography.Algorithms, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Algorithms.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Cryptography.Csp, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Csp.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Cryptography.Encoding, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Encoding.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Cryptography.Primitives, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Cryptography.X509Certificates, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.X509Certificates.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Principal, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Principal.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.SecureString, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.SecureString.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ServiceModel.Web.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Text.Encoding.Extensions, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.Encoding.Extensions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Text.Encoding, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.Encoding.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Text.RegularExpressions, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.RegularExpressions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.Overlapped, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Overlapped.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.Tasks.Extensions, Version=4.2.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.Extensions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.Tasks.Parallel, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.Parallel.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.Tasks, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.Thread, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Thread.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.ThreadPool, Version=4.0.12.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.ThreadPool.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.Timer, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Timer.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Transactions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Transactions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ValueTuple, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ValueTuple.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Web.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Windows, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Windows.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.Linq.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.ReaderWriter, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.ReaderWriter.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.Serialization.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.XDocument, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XDocument.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.XPath.XDocument, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XPath.XDocument.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.XPath, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XPath.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.XmlDocument, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XmlDocument.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.XmlSerializer, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XmlSerializer.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         统一主引用“System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             使用此版本而不是“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\LitJson.dll”中的原始版本“2.0.0.0”，因为 AutoUnify 为“true”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         统一主引用“mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             使用此版本而不是“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\LitJson.dll”中的原始版本“2.0.0.0”，因为 AutoUnify 为“true”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\mscorlib.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         统一主引用“netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”。
             使用此版本而不是“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\Dsl.dll”中的原始版本“2.0.0.0”，因为 AutoUnify 为“true”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\netstandard.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         依赖项“Dsl, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\Dsl.dll”。
             在搜索路径位置“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1”找到引用。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\Dsl.winmd”，但它不存在。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
             找到相关文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\Dsl.pdb”。
         依赖项“LitJson, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\LitJson.dll”。
             在搜索路径位置“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1”找到引用。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\LitJson.winmd”，但它不存在。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
             此引用的 ImageRuntimeVersion 是“v2.0.50727”。
       已完成执行任务“ResolveAssemblyReference”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“ResolveAssemblyReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“_ErrorOnUnresolvedWindowsSDKAssemblyConflict”；( '@(ResolveAssemblyReferenceUnresolvedAssemblyConflicts)' != '' )的计算结果为( '' != '' )。
       由于条件的计算结果为 false，已跳过目标“GenerateBindingRedirects”；('$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true' and '@(SuggestedBindingRedirects)' != '' and '$(DesignTimeBuild)' != 'true' and '$(BuildingProject)' == 'true')的计算结果为('' == 'true' and '' == 'true' and 'System, Culture=neutral, PublicKeyToken=b77a5c561934e089;mscorlib, Culture=neutral, PublicKeyToken=b77a5c561934e089;netstandard, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' != '' and '' != 'true' and 'true' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateSupportedRuntime”；('$(GenerateSupportedRuntime)' != 'false' and '$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(HasRuntimeOutput)' == 'true')的计算结果为('' != 'false' and '.NETStandard' == '.NETFramework' and '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateBindingRedirectsUpdateAppConfig”；('$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true')的计算结果为('' == 'true' and '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“ResolveComReferences”；('@(COMReference)'!='' or '@(COMFileReference)'!='')的计算结果为(''!='' or ''!='')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterResolveReferences”(目标“ResolveReferences”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“AfterResolveReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveTestReferences”；('@(Shadow)'!='')的计算结果为(''!='')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveReferences”(目标“CoreBuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“ResolveReferences”的操作。
       已跳过目标“ResolvePackageDependenciesForBuild”。以前的生成已成功。
       已跳过目标“_HandlePackageFileConflicts”。以前的生成已成功。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets”中的目标“ValidationExtension”(目标“PrepareResources”依赖于它):
       由于 false 条件，已跳过任务“WorkflowBuildMessageTask”；('$(SkipWorkflowValidation)'!='' and '$(SkipWorkflowValidation)'!='true' and '$(SkipWorkflowValidation)'!='false')计算为(''!='' and ''!='true' and ''!='false')。
   3:4>已完成在项目“Common.csproj”中生成目标“ValidationExtension”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets”中的目标“ExpressionBuildExtension”(目标“PrepareResources”依赖于它):
       由于 false 条件，已跳过任务“WorkflowBuildMessageTask”；('$(DisableWorkflowCompiledExpressions)'!='' and '$(DisableWorkflowCompiledExpressions)'!='true' and '$(DisableWorkflowCompiledExpressions)'!='false')计算为(''!='' and ''!='true' and ''!='false')。
   3:4>已完成在项目“Common.csproj”中生成目标“ExpressionBuildExtension”的操作。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompilePass1”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileReadGeneratedFileList”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileAddFilesGenerated”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompilePass2”；('$(XamlRequiresCompilationPass2)' == 'true' )的计算结果为('false' == 'true' )。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileReadPass2Flag”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileAddExtensionFilesGenerated”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“AddDeferredValidationErrorsFileToFileWrites”；(Exists('$(DeferredValidationErrorsFileName)'))的计算结果为(Exists('obj\Debug\netstandard2.1\\AC2C1ABA-CCF6-44D4-8127-588FD4D0A860-DeferredValidationErrors.xml'))。
       由于条件的计算结果为 false，已跳过目标“ReportValidationBuildExtensionErrors”；('$(SkipWorkflowValidation)' != 'true' and ('@(XamlPage)' != '' or '@(XamlAppDef)' != ''))的计算结果为('' != 'true' and ('' != '' or '' != ''))。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“CopyAdditionalFiles”(目标“AssignTargetPaths”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“CopyAdditionalFiles”的操作。
       由于条件的计算结果为 false，已跳过目标“_ComputeNETCoreBuildOutputFiles”；('$(ComputeNETCoreBuildOutputFiles)' == 'true')的计算结果为('' == 'true')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AssignTargetPaths”(目标“PrepareResourceNames”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“AssignTargetPath”任务。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       由于 false 条件，已跳过任务“AssignTargetPath”；('@(_DeploymentBaseManifestWithTargetPath)'=='' and '%(None.Extension)'=='.manifest')计算为(''=='' and ''=='.manifest')。
   3:4>已完成在项目“Common.csproj”中生成目标“AssignTargetPaths”的操作。
       已跳过目标“AssignTargetPaths”。以前的生成已成功。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“SplitResourcesByCulture”(目标“PrepareResourceNames”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ResxWithNoCulture)'!='')计算为(''!='')。
       由于 false 条件，已跳过任务“Warning”；('@(ResxWithCulture)'!='')计算为(''!='')。
       由于 false 条件，已跳过任务“Warning”；('@(NonResxWithCulture)'!='')计算为(''!='')。
       由于 false 条件，已跳过任务“Warning”；('@(NonResxWithNoCulture)'!='')计算为(''!='')。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“AssignCulture”任务。
       任务“AssignCulture”
       已完成执行任务“AssignCulture”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“SplitResourcesByCulture”的操作。
       由于条件的计算结果为 false，已跳过目标“CreateManifestResourceNames”；('@(EmbeddedResource)' != '')的计算结果为('' != '')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CreateCustomManifestResourceNames”(目标“PrepareResourceNames”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“CreateCustomManifestResourceNames”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareResourceNames”(目标“PrepareResources”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“PrepareResourceNames”的操作。
       已跳过目标“ResolveAssemblyReferences”。以前的生成已成功。
       已跳过目标“SplitResourcesByCulture”。以前的生成已成功。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeResGen”(目标“ResGen”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“BeforeResGen”的操作。
       已跳过目标“ResolveReferences”。以前的生成已成功。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“FindReferenceAssembliesForReferences”(目标“CoreResGen”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“FindReferenceAssembliesForReferences”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CoreResGen”(目标“ResGen”依赖于它):
       由于 false 条件，已跳过任务“GenerateResource”；('%(EmbeddedResource.Type)' == 'Resx' and '%(EmbeddedResource.GenerateResource)' != 'false' and '$(GenerateResourceMSBuildRuntime)' != 'CLR2')计算为('' == 'Resx' and '' != 'false' and 'CurrentRuntime' != 'CLR2')。
       由于 false 条件，已跳过任务“GenerateResource”；('%(EmbeddedResource.Type)' == 'Resx' and '%(EmbeddedResource.GenerateResource)' != 'false' and '$(GenerateResourceMSBuildRuntime)' == 'CLR2')计算为('' == 'Resx' and '' != 'false' and 'CurrentRuntime' == 'CLR2')。
   3:4>已完成在项目“Common.csproj”中生成目标“CoreResGen”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterResGen”(目标“ResGen”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“AfterResGen”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResGen”(目标“PrepareResources”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“ResGen”的操作。
       由于条件的计算结果为 false，已跳过目标“CompileLicxFiles”；('@(_LicxFile)'!='')的计算结果为(''!='')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareResources”(目标“CoreBuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“PrepareResources”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveKeySource”；($(SignManifests) == 'true' or $(SignAssembly) == 'true')的计算结果为( == 'true' or false == 'true')。
       已跳过目标“ResolveReferences”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“ResolveKeySource”；($(SignManifests) == 'true' or $(SignAssembly) == 'true')的计算结果为( == 'true' or false == 'true')。
       由于条件的计算结果为 false，已跳过目标“ResolveComReferences”；('@(COMReference)'!='' or '@(COMFileReference)'!='')的计算结果为(''!='' or ''!='')。
       由于条件的计算结果为 false，已跳过目标“ResolveNativeReferences”；('@(NativeReference)'!='')的计算结果为(''!='')。
       由于条件的计算结果为 false，已跳过目标“_SetExternalWin32ManifestProperties”；('$(GenerateClickOnceManifests)'=='true' or '@(NativeReference)'!='' or '@(ResolvedIsolatedComModules)'!='')的计算结果为(''=='true' or ''!='' or ''!='')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_SetEmbeddedWin32ManifestProperties”(目标“SetWin32ManifestProperties”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“GetFrameworkPath”任务。
       任务“GetFrameworkPath”
       已完成执行任务“GetFrameworkPath”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_SetEmbeddedWin32ManifestProperties”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“SetWin32ManifestProperties”(目标“Compile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“SetWin32ManifestProperties”的操作。
       已跳过目标“FindReferenceAssembliesForReferences”。以前的生成已成功。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GenerateCompileInputs”(目标“Compile”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ManifestResourceWithNoCulture)'!='' and '%(ManifestResourceWithNoCulture.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
       由于 false 条件，已跳过任务“Warning”；('@(ManifestNonResxWithNoCultureOnDisk)'!='' and '%(ManifestNonResxWithNoCultureOnDisk.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
   3:4>已完成在项目“Common.csproj”中生成目标“_GenerateCompileInputs”的操作。
       已跳过目标“PrepareForBuild”。以前的生成已成功。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“GenerateMSBuildEditorConfigFileShouldRun”(目标“GenerateMSBuildEditorConfigFile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“GenerateMSBuildEditorConfigFileShouldRun”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“GenerateMSBuildEditorConfigFileCore”(目标“GenerateMSBuildEditorConfigFile”依赖于它):
       正在完全生成目标“GenerateMSBuildEditorConfigFileCore”。
       未指定输入文件。
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Build.Tasks.CodeAnalysis.dll”中的“GenerateMSBuildEditorConfig”任务。
       任务“GenerateMSBuildEditorConfig”
       已完成执行任务“GenerateMSBuildEditorConfig”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“GenerateMSBuildEditorConfigFileCore”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“GenerateMSBuildEditorConfigFile”(目标“BeforeCompile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“GenerateMSBuildEditorConfigFile”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateTargetFrameworkMonikerAttribute”；('@(Compile)' != '' and '$(GenerateTargetFrameworkAttribute)' == 'true')的计算结果为('ClientConcurrent\ClientConcurrentActionProcessor.cs;ClientConcurrent\ClientConcurrentCommandProcessor.cs;ClientConcurrent\ClientConcurrentDictionary.cs;...' != '' and 'False' == 'true')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.CSharp.CurrentVersion.targets”中的目标“_SetTargetFrameworkMonikerAttribute”(目标“GenerateTargetFrameworkMonikerAttribute”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_SetTargetFrameworkMonikerAttribute”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateAdditionalSources”；('@(AssemblyAttributes)' != '' and '$(GenerateAdditionalSources)' == 'true')的计算结果为('' != '' and '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateAssemblyInfo”；('$(GenerateAssemblyInfo)' == 'true')的计算结果为('false' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateGlobalUsings”；(@(Using->Count()) != 0)的计算结果为(0 != 0)。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeCompile”(目标“Compile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“BeforeCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“_TimeStampBeforeCompile”；('$(RunPostBuildEvent)'=='OnOutputUpdated' or ('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library'))的计算结果为(''=='OnOutputUpdated' or (''=='true' and 'Library'=='library'))。
       已跳过目标“ResolveAssemblyReferences”。以前的生成已成功。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GenerateCompileDependencyCache”(目标“Compile”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Hash”任务。
       任务“Hash”
       已完成执行任务“Hash”的操作。
       任务“WriteLinesToFile”
       已完成执行任务“WriteLinesToFile”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_GenerateCompileDependencyCache”的操作。
       由于条件的计算结果为 false，已跳过目标“_ComputeNonExistentFileProperty”；(('$(BuildingInsideVisualStudio)' == 'true') and ('$(BuildingOutOfProcess)' != 'true') and (('$(BuildingProject)' == 'false') or ('$(UseHostCompilerIfAvailable)' == 'true')))的计算结果为(('' == 'true') and ('' != 'true') and (('true' == 'false') or ('true' == 'true')))。
       由于条件的计算结果为 false，已跳过目标“ResolveCodeAnalysisRuleSet”；('$(CodeAnalysisRuleSet)' != '')的计算结果为('' != '')。
       由于条件的计算结果为 false，已跳过目标“ShimReferencePathsWhenCommonTargetsDoesNotUnderstandReferenceAssemblies”；('@(ReferencePathWithRefAssemblies)' == '')的计算结果为('C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\Microsoft.Win32.Primitives.dll;C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\mscorlib.dll;C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\netstandard.dll;...' == '')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“_BeforeVBCSCoreCompile”(目标“CoreCompile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_BeforeVBCSCoreCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“AdjustDefaultPlatformTargetForNetFrameworkExeWithNoNativeCopyLocalItems”；('$(_UsingDefaultPlatformTarget)' == 'true' and
                            '$(_UsingDefaultRuntimeIdentifier)' == 'true')的计算结果为('true' == 'true' and
                            '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_DisableDiagnosticTracing”；('$(DisableDiagnosticTracing)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateTargetPlatformDefineConstants”；( '$(DisableImplicitFrameworkDefines)' != 'true' and '$(TargetPlatformIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) )的计算结果为( '' != 'true' and 'Windows' != '' and '.NETStandard' == '.NETCoreApp' and False )。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.BeforeCommon.targets”中的目标“GenerateNETCompatibleDefineConstants”(目标“AddImplicitDefineConstants”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“GenerateNETCompatibleDefineConstants”的操作。
       由于条件的计算结果为 false，已跳过目标“GeneratePlatformCompatibleDefineConstants”；( '$(DisableImplicitFrameworkDefines)' != 'true' and '$(TargetPlatformIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) )的计算结果为( '' != 'true' and 'Windows' != '' and '.NETStandard' == '.NETCoreApp' and False )。
       由于条件的计算结果为 false，已跳过目标“_DisableDiagnosticTracing”；('$(DisableDiagnosticTracing)' == 'true')的计算结果为('' == 'true')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.BeforeCommon.targets”中的目标“AddImplicitDefineConstants”(目标“CoreCompile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“AddImplicitDefineConstants”的操作。
       由于条件的计算结果为 false，已跳过目标“ShimReferencePathsWhenCommonTargetsDoesNotUnderstandReferenceAssemblies”；('@(ReferencePathWithRefAssemblies)' == '')的计算结果为('C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\Microsoft.Win32.Primitives.dll;C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\mscorlib.dll;C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\netstandard.dll;...' == '')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“_ComputeSkipAnalyzers”(目标“CoreCompile”依赖于它):
       由于 false 条件，已跳过任务“ShowMessageForImplicitlySkipAnalyzers”；('$(_ImplicitlySkipAnalyzers)' == 'true')计算为('' == 'true')。
   3:4>已完成在项目“Common.csproj”中生成目标“_ComputeSkipAnalyzers”的操作。
       由于条件的计算结果为 false，已跳过目标“_SetPathMapFromSourceRoots”；('$(DeterministicSourcePaths)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“CreateCompilerGeneratedFilesOutputPath”；('$(EmitCompilerGeneratedFiles)' == 'true' and !('$(DesignTimeBuild)' == 'true' OR '$(BuildingProject)' != 'true'))的计算结果为('false' == 'true' and !('' == 'true' OR 'true' != 'true'))。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.ServiceModel.targets”中的目标“PreXsdCodeGen”(目标“CoreCompile”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“CallTarget”任务。
       任务“CallTarget”
       已跳过目标“CleanXsdCodeGen”。以前的生成已成功。
       已完成执行任务“CallTarget”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“PreXsdCodeGen”的操作。
       由于条件的计算结果为 false，已跳过目标“XsdCodeGen”；( '$(XsdCodeGenPreCondition)' == 'True' )的计算结果为( 'False' == 'True' )。
       已跳过目标“BeforeCompile”。以前的生成已成功。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.Build.Tasks.Git\build\Microsoft.Build.Tasks.Git.targets”中的目标“InitializeSourceControlInformationFromSourceControlManager”(目标“SetEmbeddedFilesFromSourceControlManagerUntrackedFiles”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.Build.Tasks.Git\build\..\tools\net472\Microsoft.Build.Tasks.Git.dll”中的“Microsoft.Build.Tasks.Git.LocateRepository”任务。
       任务“Microsoft.Build.Tasks.Git.LocateRepository”
         SourceLink: Repository instance not found in cache: '*:F:\GitHub\GameDemo\.git'
       已完成执行任务“Microsoft.Build.Tasks.Git.LocateRepository”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“InitializeSourceControlInformationFromSourceControlManager”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.Build.Tasks.Git\build\Microsoft.Build.Tasks.Git.targets”中的目标“SetEmbeddedFilesFromSourceControlManagerUntrackedFiles”(目标“_SetEmbeddedFilesFromSourceControlManagerUntrackedFiles”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.Build.Tasks.Git\build\..\tools\net472\Microsoft.Build.Tasks.Git.dll”中的“Microsoft.Build.Tasks.Git.GetUntrackedFiles”任务。
       任务“Microsoft.Build.Tasks.Git.GetUntrackedFiles”
         SourceLink: Reusing cached git repository information.
       已完成执行任务“Microsoft.Build.Tasks.Git.GetUntrackedFiles”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“SetEmbeddedFilesFromSourceControlManagerUntrackedFiles”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\Microsoft.SourceLink.Common.targets”中的目标“_SetEmbeddedFilesFromSourceControlManagerUntrackedFiles”(目标“CoreCompile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_SetEmbeddedFilesFromSourceControlManagerUntrackedFiles”的操作。
       已跳过目标“InitializeSourceControlInformationFromSourceControlManager”。以前的生成已成功。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\InitializeSourceControlInformation.targets”中的目标“_SourceLinkHasSingleProvider”(目标“_InitializeSourceControlInformationFromSourceControlManager”依赖于它):
       程序集加载期间 TaskRun: Microsoft.SourceLink.Common, Version=8.0.9.11501, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\tools\net472\Microsoft.SourceLink.Common.dll, MVID: 19921414-9bda-46be-bf07-0ee6adeb63bb, AppDomain: [Default])
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\..\tools\net472\Microsoft.SourceLink.Common.dll”中的“Microsoft.SourceLink.Common.SourceLinkHasSingleProvider”任务。
       任务“Microsoft.SourceLink.Common.SourceLinkHasSingleProvider”
       已完成执行任务“Microsoft.SourceLink.Common.SourceLinkHasSingleProvider”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_SourceLinkHasSingleProvider”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\build\Microsoft.SourceLink.GitHub.targets”中的目标“TranslateGitHubUrlsInSourceControlInformation”(目标“_InitializeSourceControlInformationFromSourceControlManager”依赖于它):
       程序集加载期间 TaskRun: Microsoft.SourceLink.GitHub, Version=8.0.9.11501, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\tools\net472\Microsoft.SourceLink.GitHub.dll, MVID: 203a1e0c-0f5a-417b-a1e2-8344aa340e04, AppDomain: [Default])
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\build\..\tools\net472\Microsoft.SourceLink.GitHub.dll”中的“Microsoft.SourceLink.GitHub.TranslateRepositoryUrls”任务。
       任务“Microsoft.SourceLink.GitHub.TranslateRepositoryUrls”
       已完成执行任务“Microsoft.SourceLink.GitHub.TranslateRepositoryUrls”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“TranslateGitHubUrlsInSourceControlInformation”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\Microsoft.SourceLink.GitLab.targets”中的目标“TranslateGitLabUrlsInSourceControlInformation”(目标“_InitializeSourceControlInformationFromSourceControlManager”依赖于它):
       程序集加载期间 TaskRun: Microsoft.SourceLink.GitLab, Version=8.0.9.11501, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\tools\net472\Microsoft.SourceLink.GitLab.dll, MVID: f8dee646-600e-46ce-b44a-470829b6446c, AppDomain: [Default])
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\..\tools\net472\Microsoft.SourceLink.GitLab.dll”中的“Microsoft.SourceLink.GitLab.TranslateRepositoryUrls”任务。
       任务“Microsoft.SourceLink.GitLab.TranslateRepositoryUrls”
       已完成执行任务“Microsoft.SourceLink.GitLab.TranslateRepositoryUrls”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“TranslateGitLabUrlsInSourceControlInformation”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\Microsoft.SourceLink.AzureRepos.Git.targets”中的目标“TranslateAzureReposGitUrlsInSourceControlInformation”(目标“_InitializeSourceControlInformationFromSourceControlManager”依赖于它):
       程序集加载期间 TaskRun: Microsoft.SourceLink.AzureRepos.Git, Version=8.0.9.11501, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\tools\net472\Microsoft.SourceLink.AzureRepos.Git.dll, MVID: bccb3889-f2b8-42f3-ac1f-8ab21c0eaf2a, AppDomain: [Default])
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\..\tools\net472\Microsoft.SourceLink.AzureRepos.Git.dll”中的“Microsoft.SourceLink.AzureRepos.Git.TranslateRepositoryUrls”任务。
       任务“Microsoft.SourceLink.AzureRepos.Git.TranslateRepositoryUrls”
       已完成执行任务“Microsoft.SourceLink.AzureRepos.Git.TranslateRepositoryUrls”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“TranslateAzureReposGitUrlsInSourceControlInformation”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\Microsoft.SourceLink.Bitbucket.Git.targets”中的目标“TranslateBitbucketGitUrlsInSourceControlInformation”(目标“_InitializeSourceControlInformationFromSourceControlManager”依赖于它):
       程序集加载期间 TaskRun: Microsoft.SourceLink.Bitbucket.Git, Version=8.0.9.11501, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\tools\net472\Microsoft.SourceLink.Bitbucket.Git.dll, MVID: 680dfc21-12ea-4be8-ab51-4f6ef7f5d016, AppDomain: [Default])
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\..\tools\net472\Microsoft.SourceLink.Bitbucket.Git.dll”中的“Microsoft.SourceLink.Bitbucket.Git.TranslateRepositoryUrls”任务。
       任务“Microsoft.SourceLink.Bitbucket.Git.TranslateRepositoryUrls”
       已完成执行任务“Microsoft.SourceLink.Bitbucket.Git.TranslateRepositoryUrls”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“TranslateBitbucketGitUrlsInSourceControlInformation”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\InitializeSourceControlInformation.targets”中的目标“SourceControlManagerPublishTranslatedUrls”(目标“_InitializeSourceControlInformationFromSourceControlManager”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“SourceControlManagerPublishTranslatedUrls”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\InitializeSourceControlInformation.targets”中的目标“_InitializeSourceControlInformationFromSourceControlManager”(目标“InitializeSourceControlInformation”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_InitializeSourceControlInformationFromSourceControlManager”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“InitializeSourceControlInformation”(目标“GenerateSourceLinkFile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“InitializeSourceControlInformation”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\Microsoft.SourceLink.Common.targets”中的目标“_SetSourceLinkFilePath”(目标“_GenerateSourceLinkFile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_SetSourceLinkFilePath”的操作。
       已跳过目标“InitializeSourceControlInformation”。以前的生成已成功。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“_InitializeSourceRootMappedPathsFromSourceControl”(目标“InitializeSourceRootMappedPaths”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_InitializeSourceRootMappedPathsFromSourceControl”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“InitializeSourceRootMappedPaths”(目标“_InitializeSourceRootMappedPathsOpt”依赖于它):
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Build.Tasks.CodeAnalysis.dll”中的“Microsoft.CodeAnalysis.BuildTasks.MapSourceRoots”任务。
       任务“Microsoft.CodeAnalysis.BuildTasks.MapSourceRoots”
       已完成执行任务“Microsoft.CodeAnalysis.BuildTasks.MapSourceRoots”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“InitializeSourceRootMappedPaths”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\Microsoft.SourceLink.Common.targets”中的目标“_InitializeSourceRootMappedPathsOpt”(目标“_GenerateSourceLinkFile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_InitializeSourceRootMappedPathsOpt”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\build\Microsoft.SourceLink.GitHub.targets”中的目标“_InitializeGitHubSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeGitHubSourceLinkUrl”。
       未指定输入文件。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\build\..\tools\net472\Microsoft.SourceLink.GitHub.dll”中的“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”任务。
       任务“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_InitializeGitHubSourceLinkUrl”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\build\Microsoft.SourceLink.GitHub.targets”中的目标“_InitializeGitHubSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeGitHubSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_InitializeGitHubSourceLinkUrl”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\build\Microsoft.SourceLink.GitHub.targets”中的目标“_InitializeGitHubSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeGitHubSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_InitializeGitHubSourceLinkUrl”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\Microsoft.SourceLink.GitLab.targets”中的目标“_InitializeGitLabSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeGitLabSourceLinkUrl”。
       未指定输入文件。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\..\tools\net472\Microsoft.SourceLink.GitLab.dll”中的“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”任务。
       任务“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_InitializeGitLabSourceLinkUrl”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\Microsoft.SourceLink.GitLab.targets”中的目标“_InitializeGitLabSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeGitLabSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_InitializeGitLabSourceLinkUrl”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\Microsoft.SourceLink.GitLab.targets”中的目标“_InitializeGitLabSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeGitLabSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_InitializeGitLabSourceLinkUrl”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\Microsoft.SourceLink.AzureRepos.Git.targets”中的目标“_InitializeAzureReposGitSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeAzureReposGitSourceLinkUrl”。
       未指定输入文件。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\..\tools\net472\Microsoft.SourceLink.AzureRepos.Git.dll”中的“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”任务。
       任务“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_InitializeAzureReposGitSourceLinkUrl”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\Microsoft.SourceLink.AzureRepos.Git.targets”中的目标“_InitializeAzureReposGitSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeAzureReposGitSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_InitializeAzureReposGitSourceLinkUrl”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\Microsoft.SourceLink.AzureRepos.Git.targets”中的目标“_InitializeAzureReposGitSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeAzureReposGitSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_InitializeAzureReposGitSourceLinkUrl”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\Microsoft.SourceLink.Bitbucket.Git.targets”中的目标“_InitializeBitbucketGitSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeBitbucketGitSourceLinkUrl”。
       未指定输入文件。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\..\tools\net472\Microsoft.SourceLink.Bitbucket.Git.dll”中的“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”任务。
       任务“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_InitializeBitbucketGitSourceLinkUrl”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\Microsoft.SourceLink.Bitbucket.Git.targets”中的目标“_InitializeBitbucketGitSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeBitbucketGitSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_InitializeBitbucketGitSourceLinkUrl”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\Microsoft.SourceLink.Bitbucket.Git.targets”中的目标“_InitializeBitbucketGitSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeBitbucketGitSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_InitializeBitbucketGitSourceLinkUrl”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\Microsoft.SourceLink.Common.targets”中的目标“_GenerateSourceLinkFile”(目标“GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_GenerateSourceLinkFile”。
       未指定输入文件。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\..\tools\net472\Microsoft.SourceLink.Common.dll”中的“Microsoft.SourceLink.Common.GenerateSourceLinkFile”任务。
       任务“Microsoft.SourceLink.Common.GenerateSourceLinkFile”
         程序集加载期间 TaskRun (Microsoft.SourceLink.Common.GenerateSourceLinkFile): Microsoft.SourceLink.Common.resources, Version=8.0.9.11501, Culture=zh-Hans, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\tools\net472\zh-Hans\Microsoft.SourceLink.Common.resources.dll, MVID: af6eee06-2914-419d-9f5c-aa83bd20bbb6, AppDomain: [Default])
         正在更新 Source Link 文件 "obj\Debug\netstandard2.1\Common.sourcelink.json"。
       已完成执行任务“Microsoft.SourceLink.Common.GenerateSourceLinkFile”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_GenerateSourceLinkFile”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\Microsoft.SourceLink.Common.targets”中的目标“GenerateSourceLinkFile”(目标“CoreCompile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“GenerateSourceLinkFile”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateAssemblyInfo”；('$(GenerateAssemblyInfo)' == 'true')的计算结果为('false' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateGlobalUsings”；(@(Using->Count()) != 0)的计算结果为(0 != 0)。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets”中的目标“CoreCompile”(目标“Compile”依赖于它):
       正在完全生成目标“CoreCompile”。
       输出文件“obj\Debug\netstandard2.1\Common.dll”不存在。
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Build.Tasks.CodeAnalysis.dll”中的“Csc”任务。
       任务“Csc”
         C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\csc.exe /noconfig /unsafe- /checked- /nowarn:1701,1702,1701,1702 /fullpaths /nostdlib+ /errorreport:prompt /define:TRACE;DEBUG;ENABLE_ERROR_LOG;ENABLE_LOG;DEBUG;NETSTANDARD;NETSTANDARD2_1;NETSTANDARD1_0_OR_GREATER;NETSTANDARD1_1_OR_GREATER;NETSTANDARD1_2_OR_GREATER;NETSTANDARD1_3_OR_GREATER;NETSTANDARD1_4_OR_GREATER;NETSTANDARD1_5_OR_GREATER;NETSTANDARD1_6_OR_GREATER;NETSTANDARD2_0_OR_GREATER;NETSTANDARD2_1_OR_GREATER /highentropyva+ /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\Microsoft.Win32.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\mscorlib.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\netstandard.dll" /reference:F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.AppContext.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Buffers.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.Concurrent.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.NonGeneric.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.Specialized.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.Composition.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.EventBasedAsync.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.TypeConverter.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Console.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Core.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Data.Common.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Data.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Contracts.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Debug.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.FileVersionInfo.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Process.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.StackTrace.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.TextWriterTraceListener.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Tools.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.TraceSource.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Tracing.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Drawing.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Drawing.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Dynamic.Runtime.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.Calendars.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.Extensions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.FileSystem.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.ZipFile.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.DriveInfo.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.Watcher.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.IsolatedStorage.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.MemoryMappedFiles.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Pipes.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.UnmanagedMemoryStream.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Expressions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Parallel.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Queryable.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Memory.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Http.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.NameResolution.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.NetworkInformation.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Ping.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Requests.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Security.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Sockets.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebHeaderCollection.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebSockets.Client.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebSockets.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Numerics.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Numerics.Vectors.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ObjectModel.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.DispatchProxy.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.ILGeneration.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.Lightweight.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Extensions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.Reader.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.ResourceManager.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.Writer.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.CompilerServices.VisualC.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Extensions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Handles.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.InteropServices.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.InteropServices.RuntimeInformation.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Numerics.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Formatters.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Json.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Xml.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Claims.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Algorithms.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Csp.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Encoding.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.X509Certificates.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Principal.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.SecureString.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ServiceModel.Web.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.Encoding.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.Encoding.Extensions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.RegularExpressions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Overlapped.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.Extensions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.Parallel.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Thread.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.ThreadPool.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Timer.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Transactions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ValueTuple.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Web.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Windows.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.Linq.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.ReaderWriter.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.Serialization.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XDocument.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XmlDocument.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XmlSerializer.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XPath.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XPath.XDocument.dll" /reference:F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll /debug+ /debug:portable /filealign:512 /optimize- /out:obj\Debug\netstandard2.1\Common.dll /target:library /warnaserror- /utf8output /deterministic+ /sourcelink:obj\Debug\netstandard2.1\Common.sourcelink.json /langversion:8.0 /analyzerconfig:obj\Debug\netstandard2.1\Common.GeneratedMSBuildEditorConfig.editorconfig ClientConcurrent\ClientConcurrentActionProcessor.cs ClientConcurrent\ClientConcurrentCommandProcessor.cs ClientConcurrent\ClientConcurrentDictionary.cs ClientConcurrent\ClientConcurrentObjectPool.cs ClientConcurrent\ClientConcurrentOrderedList.cs ClientConcurrent\ClientConcurrentPoolAllocatedAction.cs ClientConcurrent\ClientConcurrentQueue.cs ClientConcurrent\ClientConcurrentStack.cs ClientConcurrent\ClientConcurrentTypedDataCollection.cs ClientConcurrent\ClientInterlocked.cs ClientConcurrent\ClientSpinLock.cs ClientConcurrent\ClientSpinWait.cs ClientConcurrent\ClientWatch.cs ClientConcurrent\MyThread.cs Geometry\Geometry.cs Geometry\Geometry3D.cs GlobalVariables.cs HomePath.cs Log\LogSystem.cs Properties\AssemblyInfo.cs PublishSubscribe\PublishSubscribeSystem.cs Util\Heap.cs Util\Helper.cs Util\IActionQueue.cs Util\LinkedListDictionary.cs Util\MyActionAndFunc.cs Util\ObjectPool.cs Util\PoolAllocatedAction.cs Util\RandomTable.cs Util\TypedDataCollection.cs /warnaserror+:NU1605
         Microsoft(R) Visual C# 编译器 版本 4.9.0-3.24121.1 (a98c90d5)
         版权所有(C) Microsoft Corporation。保留所有权利。
         CompilerServer: server - server processed compilation - ac7cf305-5bd7-4ff1-b2f1-656e5de59d99
       已完成执行任务“Csc”的操作。
       由于 false 条件，已跳过任务“CallTarget”；('$(TargetsTriggeredByCompilation)' != '')计算为('' != '')。
   3:4>已完成在项目“Common.csproj”中生成目标“CoreCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“_TouchLastBuildWithSkipAnalyzers”；('$(_SkipAnalyzers)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_TimeStampAfterCompile”；('$(RunPostBuildEvent)'=='OnOutputUpdated' or ('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library'))的计算结果为(''=='OnOutputUpdated' or (''=='true' and 'Library'=='library'))。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterCompile”(目标“Compile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“AfterCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“_CreateAppHost”；('$(ComputeNETCoreBuildOutputFiles)' == 'true' and
                            '$(AppHostSourcePath)' != '' and
                            Exists('@(IntermediateAssembly)') and
                            Exists('$(AppHostSourcePath)'))的计算结果为('' == 'true' and
                            '' != '' and
                            Exists('obj\Debug\netstandard2.1\Common.dll') and
                            Exists(''))。
       由于条件的计算结果为 false，已跳过目标“_CreateComHost”；('$(ComputeNETCoreBuildOutputFiles)' == 'true' and
                            '$(ComHostIntermediatePath)' != '' and
                            Exists('@(IntermediateAssembly)') and
                            Exists('$(ComHostSourcePath)'))的计算结果为('' == 'true' and
                            '' != '' and
                            Exists('obj\Debug\netstandard2.1\Common.dll') and
                            Exists(''))。
       由于条件的计算结果为 false，已跳过目标“_GetIjwHostPaths”；('$(UseIJWHost)' == 'true')的计算结果为('' == 'true')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Compile”(目标“CoreBuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“Compile”的操作。
       由于条件的计算结果为 false，已跳过目标“DeferredValidation”；('$(SkipWorkflowValidation)' != 'true' and ('@(XamlPage)' != '' or '@(XamlAppDef)' != ''))的计算结果为('' != 'true' and ('' != '' or '' != ''))。
       由于条件的计算结果为 false，已跳过目标“ExportWindowsMDFile”；('$(ExportWinMDFile)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“UnmanagedUnregistration”；((('$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)' or '$(RegisterForComInterop)' != 'true' or '$(OutputType)' != 'library') or
                           ('$(_AssemblyTimestampBeforeCompile)' == '')) and
                          Exists('@(_UnmanagedRegistrationCache)'))的计算结果为((('' != '' or '' != 'true' or 'Library' != 'library') or
                           ('' == '')) and
                          Exists('obj\Common.csproj.UnmanagedRegistration.cache'))。
       由于条件的计算结果为 false，已跳过目标“GenerateSerializationAssemblies”；('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))的计算结果为('Off' == 'On' or (''!='' and 'Off' == 'Auto'))。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GenerateSatelliteAssemblyInputs”(目标“CreateSatelliteAssemblies”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ManifestResourceWithCulture)'!='' and '%(ManifestResourceWithCulture.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
       由于 false 条件，已跳过任务“Warning”；('@(ManifestNonResxWithCultureOnDisk)'!='' and '%(ManifestNonResxWithCultureOnDisk.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
   3:4>已完成在项目“Common.csproj”中生成目标“_GenerateSatelliteAssemblyInputs”的操作。
       由于条件的计算结果为 false，已跳过目标“ComputeIntermediateSatelliteAssemblies”；(@(EmbeddedResource->'%(WithCulture)') != '')的计算结果为( != '')。
       由于条件的计算结果为 false，已跳过目标“GenerateSatelliteAssemblies”；('@(_SatelliteAssemblyResourceInputs)' != '' and '$(GenerateSatelliteAssembliesForCore)' != 'true')的计算结果为('' != '' and '' != 'true')。
       由于条件的计算结果为 false，已跳过目标“CoreGenerateSatelliteAssemblies”；('@(_SatelliteAssemblyResourceInputs)' != ''  and '$(GenerateSatelliteAssembliesForCore)' == 'true' )的计算结果为('' != ''  and '' == 'true' )。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CreateSatelliteAssemblies”(目标“CoreBuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“CreateSatelliteAssemblies”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateManifests”；('$(GenerateClickOnceManifests)'=='true' or '@(NativeReference)'!='' or '@(ResolvedIsolatedComModules)'!='' or '$(GenerateAppxManifest)' == 'true')的计算结果为(''=='true' or ''!='' or ''!='' or '' == 'true')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetPathWithTargetPlatformMoniker”(目标“GetTargetPath”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“GetTargetPathWithTargetPlatformMoniker”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetPath”(目标“CoreBuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“GetTargetPath”的操作。
       由于条件的计算结果为 false，已跳过目标“ComputeIntermediateSatelliteAssemblies”；(@(EmbeddedResource->'%(WithCulture)') != '')的计算结果为( != '')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CopyFilesMarkedCopyLocal”(目标“CopyFilesToOutputDirectory”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Copy”任务。
       任务“Copy”
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\Dsl.dll”复制到“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Dsl.dll”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”复制到“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\StoryScript.dll”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\LitJson.dll”复制到“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\LitJson.dll”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\Dsl.pdb”复制到“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Dsl.pdb”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.pdb”复制到“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\StoryScript.pdb”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.dll”复制到“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\UnityEngine.dll”。
       已完成执行任务“Copy”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Touch”任务。
       任务“Touch”
         正在创建“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\Common.csproj.Up2Date”，因为已指定“AlwaysCreate”。
         正在对“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\Common.csproj.Up2Date”执行 Touch 任务。
       已完成执行任务“Touch”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_CopyFilesMarkedCopyLocal”的操作。
       已跳过目标“AssignTargetPaths”。以前的生成已成功。
       已跳过目标“AssignProjectConfiguration”。以前的生成已成功。
       已跳过目标“_SplitProjectReferencesByFileExistence”。以前的生成已成功。
       已跳过目标“_GetProjectReferenceTargetFrameworkProperties”。以前的生成已成功。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”(目标“GetCopyToOutputDirectoryItems”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets”中的目标“GetCopyToOutputDirectoryXamlAppDefs”(目标“GetCopyToOutputDirectoryItems”依赖于它):
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“GetCopyToOutputDirectoryXamlAppDefs”的操作。
       由于条件的计算结果为 false，已跳过目标“AddDepsJsonAndRuntimeConfigToCopyItemsForReferencingProjects”；('$(HasRuntimeOutput)' == 'true')的计算结果为('' == 'true')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetCopyToOutputDirectoryItems”(目标“_CopySourceItemsToOutputDirectory”依赖于它):
       任务“CallTarget”
       已跳过目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”。以前的生成已成功。
       已跳过目标“_AddOutputPathToGlobalPropertiesToRemove”。以前的生成已成功。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences”(目标“GetCopyToOutputDirectoryItems”依赖于它):
       任务“MSBuild”
         全局属性:
           Configuration=Debug
           Platform=AnyCPU
         移除项目“..\StoryScript\StoryScript.csproj”的属性:
           TargetFramework
           RuntimeIdentifier
           SelfContained
   3:4>项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(3:4)正在节点 3 上生成“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(4:10) (GetCopyToOutputDirectoryItems 个目标)。
  4:10>已跳过目标“GetCopyToOutputDirectoryItems”。以前的生成已成功。
  4:10>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(GetCopyToOutputDirectoryItems 个目标)的操作。
   3:4>已完成执行任务“MSBuild”的操作。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences”的操作。
       已完成执行任务“CallTarget”的操作。
       任务“CallTarget”
       已跳过目标“AssignTargetPaths”。以前的生成已成功。
       已跳过目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“AddDepsJsonAndRuntimeConfigToCopyItemsForReferencingProjects”；('$(HasRuntimeOutput)' == 'true')的计算结果为('' == 'true')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GetCopyToOutputDirectoryItemsFromThisProject”(目标“GetCopyToOutputDirectoryItems”依赖于它):
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_GetCopyToOutputDirectoryItemsFromThisProject”的操作。
       已完成执行任务“CallTarget”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“GetCopyToOutputDirectoryItems”的操作。
       由于条件的计算结果为 false，已跳过目标“_CopyOutOfDateSourceItemsToOutputDirectory”；( '@(_SourceItemsToCopyToOutputDirectory)' != '' )的计算结果为( '' != '' )。
       由于条件的计算结果为 false，已跳过目标“_CopyOutOfDateSourceItemsToOutputDirectoryAlways”；( '@(_SourceItemsToCopyToOutputDirectoryAlways)' != '' )的计算结果为( '' != '' )。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CopySourceItemsToOutputDirectory”(目标“CopyFilesToOutputDirectory”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_CopySourceItemsToOutputDirectory”的操作。
       由于条件的计算结果为 false，已跳过目标“_CopyAppConfigFile”；( '@(AppConfigWithTargetPath)' != '' )的计算结果为( '' != '' )。
       由于条件的计算结果为 false，已跳过目标“_CopyManifestFiles”；( '$(_DeploymentCopyApplicationManifest)'=='true' or '$(GenerateClickOnceManifests)'=='true' )的计算结果为( ''=='true' or ''=='true' )。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CheckForCompileOutputs”(目标“CopyFilesToOutputDirectory”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_CheckForCompileOutputs”的操作。
       由于条件的计算结果为 false，已跳过目标“_SGenCheckForOutputs”；('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))的计算结果为('Off' == 'On' or (''!='' and 'Off' == 'Auto'))。
       已跳过目标“_DefaultMicrosoftNETPlatformLibrary”。以前的生成已成功。
       已跳过目标“_HandlePackageFileConflicts”。以前的生成已成功。
       已跳过目标“ResolveAssemblyReferences”。以前的生成已成功。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“_ComputeReferenceAssemblies”(目标“GenerateBuildDependencyFile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_ComputeReferenceAssemblies”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“_ComputeUserRuntimeAssemblies”(目标“GenerateBuildDependencyFile”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“_ComputeUserRuntimeAssemblies”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveRuntimePackAssets”；('@(RuntimePack)' != '')的计算结果为('' != '')。
       已跳过目标“_ComputePackageReferencePublish”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“ComputeDependencyFileCompilerOptions”；('$(PreserveCompilationContext)' == 'true')的计算结果为('' == 'true')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“GenerateBuildDependencyFile”(目标“CopyFilesToOutputDirectory”依赖于它):
       正在完全生成目标“GenerateBuildDependencyFile”。
       输出文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.deps.json”不存在。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“GenerateDepsFile”任务。
       任务“GenerateDepsFile”
       已完成执行任务“GenerateDepsFile”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“GenerateBuildDependencyFile”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateBuildRuntimeConfigurationFiles”；( '$(GenerateRuntimeConfigurationFiles)' == 'true')的计算结果为( '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateShimsAssets”；('$(PackAsTool)' == 'true' and $(PackAsToolShimRuntimeIdentifiers) != '' )的计算结果为('' == 'true' and  != '' )。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CopyFilesToOutputDirectory”(目标“PrepareForRun”依赖于它):
       任务“Copy”
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\Common.dll”复制到“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”。
       已完成执行任务“Copy”的操作。
       由于 false 条件，已跳过任务“CopyRefAssembly”；('$(ProduceReferenceAssembly)' == 'true' and '$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true')计算为('false' == 'true' and 'true' == 'true' and '' != 'true')。
       任务“Message”
         Common -> F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll
       已完成执行任务“Message”的操作。
       由于 false 条件，已跳过任务“Copy”；('@(AddModules)' != '')计算为('' != '')。
       由于 false 条件，已跳过任务“Copy”；('$(_SGenDllCreated)'=='true')计算为('false'=='true')。
       任务“Copy”
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\obj\Debug\netstandard2.1\Common.pdb”复制到“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.pdb”。
       已完成执行任务“Copy”的操作。
       由于 false 条件，已跳过任务“Copy”；('$(_DocumentationFileProduced)'=='true' and '$(CopyDocumentationFileToOutputDirectory)'=='true')计算为('false'=='true' and 'true'=='true')。
       由于 false 条件，已跳过任务“Copy”；('@(IntermediateSatelliteAssembliesWithTargetPath)' != '')计算为('' != '')。
       由于 false 条件，已跳过任务“Copy”；('@(ReferenceComWrappersToCopyLocal)' != '' or '@(ResolvedIsolatedComModules)' != '' or '@(_DeploymentLooseManifestFile)' != '' or '@(NativeReferenceFile)' != '' )计算为('' != '' or '' != '' or '' != '' or '' != '' )。
       由于 false 条件，已跳过任务“Copy”；('$(SkipCopyWinMDArtifact)' != 'true' and '@(WinMDExpArtifacts)' != '')计算为('' != 'true' and '' != '')。
       由于 false 条件，已跳过任务“Message”；('$(SkipCopyWinMDArtifact)' != 'true' and '$(_WindowsMetadataOutputPath)' != '')计算为('' != 'true' and '' != '')。
   3:4>已完成在项目“Common.csproj”中生成目标“CopyFilesToOutputDirectory”的操作。
       由于条件的计算结果为 false，已跳过目标“_CopyReferenceOnlyAssembliesForBuild”；('$(PreserveCompilationReferences)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“RunCodeAnalysis”；('$(RunCodeAnalysisOnThisProject)'=='true')的计算结果为(''=='true')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareForRun”(目标“CoreBuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“PrepareForRun”的操作。
       由于条件的计算结果为 false，已跳过目标“UnmanagedRegistration”；('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library')的计算结果为(''=='true' and 'Library'=='library')。
       已跳过目标“_CheckForCompileOutputs”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“_SGenCheckForOutputs”；('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))的计算结果为('Off' == 'On' or (''!='' and 'Off' == 'Auto'))。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CleanGetCurrentAndPriorFileWrites”(目标“IncrementalClean”依赖于它):
       任务“ReadLinesFromFile”
       已完成执行任务“ReadLinesFromFile”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ConvertToAbsolutePath”任务。
       任务“ConvertToAbsolutePath”
       已完成执行任务“ConvertToAbsolutePath”的操作。
       任务“FindUnderPath”
         比较路径为“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“bin\Debug\netstandard2.1\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“obj\Debug\netstandard2.1\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“RemoveDuplicates”
       已完成执行任务“RemoveDuplicates”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“_CleanGetCurrentAndPriorFileWrites”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“IncrementalClean”(目标“CoreBuild”依赖于它):
       任务“FindUnderPath”
         比较路径为“bin\Debug\netstandard2.1\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“obj\Debug\netstandard2.1\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“Delete”
       已完成执行任务“Delete”的操作。
       任务“RemoveDuplicates”
       已完成执行任务“RemoveDuplicates”的操作。
       任务“WriteLinesToFile”
       已完成执行任务“WriteLinesToFile”的操作。
   3:4>已完成在项目“Common.csproj”中生成目标“IncrementalClean”的操作。
       由于条件的计算结果为 false，已跳过目标“PostBuildEvent”；('$(PostBuildEvent)' != '' and ('$(RunPostBuildEvent)' != 'OnOutputUpdated' or '$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)'))的计算结果为('' != '' and ('' != 'OnOutputUpdated' or '' != ''))。
       已跳过目标“GenerateBuildDependencyFile”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“GenerateBuildRuntimeConfigurationFiles”；( '$(GenerateRuntimeConfigurationFiles)' == 'true')的计算结果为( '' == 'true')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CoreBuild”(目标“Build”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“CoreBuild”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterBuild”(目标“Build”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“AfterBuild”的操作。
       由于条件的计算结果为 false，已跳过目标“_CheckBrowserWorkloadNeededButNotAvailable”；('$(RuntimeIdentifier)' == 'browser-wasm' and '$(_BrowserWorkloadDisabled)' != 'true' and '$(WasmNativeWorkloadAvailable)' != 'true')的计算结果为('' == 'browser-wasm' and '' != 'true' and '' != 'true')。
       由于条件的计算结果为 false，已跳过目标“_ErrorWorkloadDisabledForTFMLessThan6”；('$(_BrowserWorkloadNotSupportedForTFM)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_ErrorDualWasmThreadPropsOn7”；('$(TargetsNet7)' == 'true' and '$(RuntimeIdentifier)' == 'browser-wasm' and
           '$(BrowserWorkloadDisabled)' != 'true' and '$(WasmEnableThreads)' == 'true' and '$(WasmEnablePerfTrace)' == 'true')的计算结果为('' == 'true' and '' == 'browser-wasm' and
           '' != 'true' and '' == 'true' and '' == 'true')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Build”(目标“Rebuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“Build”的操作。
       由于条件的计算结果为 false，已跳过目标“_PackAsBuildAfterTarget”；('$(GeneratePackageOnBuild)' == 'true' AND '$(IsInnerBuild)' != 'true')的计算结果为('false' == 'true' AND '' != 'true')。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Containers\build\Microsoft.NET.Build.Containers.targets”中的目标“_CheckContainersPackage”(目标“Rebuild”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ContainersPackage)' != '')计算为('' != '')。
   3:4>已完成在项目“Common.csproj”中生成目标“_CheckContainersPackage”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterRebuild”(目标“Rebuild”依赖于它):
   3:4>已完成在项目“Common.csproj”中生成目标“AfterRebuild”的操作。
   3:4>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Rebuild”(入口点):
   3:4>已完成在项目“Common.csproj”中生成目标“Rebuild”的操作。
   3:4>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(Rebuild 个目标)的操作。
   3:5>已跳过目标“BeforeResolveReferences”。以前的生成已成功。
       已跳过目标“AssignProjectConfiguration”。以前的生成已成功。
       已跳过目标“ResolveProjectReferences”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“FindInvalidProjectReferences”；('$(FindInvalidProjectReferences)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“ResolveNativeReferences”；('@(NativeReference)'!='')的计算结果为(''!='')。
       已跳过目标“ResolveAssemblyReferences”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“GenerateBindingRedirects”；('$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true' and '@(SuggestedBindingRedirects)' != '' and '$(DesignTimeBuild)' != 'true' and '$(BuildingProject)' == 'true')的计算结果为('' == 'true' and '' == 'true' and 'System, Culture=neutral, PublicKeyToken=b77a5c561934e089;mscorlib, Culture=neutral, PublicKeyToken=b77a5c561934e089;netstandard, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' != '' and '' != 'true' and 'true' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateSupportedRuntime”；('$(GenerateSupportedRuntime)' != 'false' and '$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(HasRuntimeOutput)' == 'true')的计算结果为('' != 'false' and '.NETStandard' == '.NETFramework' and '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateBindingRedirectsUpdateAppConfig”；('$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true')的计算结果为('' == 'true' and '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“ResolveComReferences”；('@(COMReference)'!='' or '@(COMFileReference)'!='')的计算结果为(''!='' or ''!='')。
       已跳过目标“AfterResolveReferences”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“ResolveTestReferences”；('@(Shadow)'!='')的计算结果为(''!='')。
       已跳过目标“ResolveReferences”。以前的生成已成功。
       已跳过目标“PrepareResources”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“ResolveKeySource”；($(SignManifests) == 'true' or $(SignAssembly) == 'true')的计算结果为( == 'true' or false == 'true')。
       已跳过目标“Compile”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“ExportWindowsMDFile”；('$(ExportWinMDFile)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“UnmanagedUnregistration”；((('$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)' or '$(RegisterForComInterop)' != 'true' or '$(OutputType)' != 'library') or
                           ('$(_AssemblyTimestampBeforeCompile)' == '')) and
                          Exists('@(_UnmanagedRegistrationCache)'))的计算结果为((('' != '' or '' != 'true' or 'Library' != 'library') or
                           ('' == '')) and
                          Exists('obj\Common.csproj.UnmanagedRegistration.cache'))。
       由于条件的计算结果为 false，已跳过目标“GenerateSerializationAssemblies”；('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))的计算结果为('Off' == 'On' or (''!='' and 'Off' == 'Auto'))。
       已跳过目标“CreateSatelliteAssemblies”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“GenerateManifests”；('$(GenerateClickOnceManifests)'=='true' or '@(NativeReference)'!='' or '@(ResolvedIsolatedComModules)'!='' or '$(GenerateAppxManifest)' == 'true')的计算结果为(''=='true' or ''!='' or ''!='' or '' == 'true')。
       已跳过目标“GetTargetPath”。以前的生成已成功。
       已跳过目标“PrepareForRun”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“UnmanagedRegistration”；('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library')的计算结果为(''=='true' and 'Library'=='library')。
       已跳过目标“IncrementalClean”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“PostBuildEvent”；('$(PostBuildEvent)' != '' and ('$(RunPostBuildEvent)' != 'OnOutputUpdated' or '$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)'))的计算结果为('' != '' and ('' != 'OnOutputUpdated' or '' != ''))。
       已跳过目标“GenerateBuildDependencyFile”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“GenerateBuildRuntimeConfigurationFiles”；( '$(GenerateRuntimeConfigurationFiles)' == 'true')的计算结果为( '' == 'true')。
       已跳过目标“CoreBuild”。以前的生成已成功。
       已跳过目标“AfterBuild”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“_CheckBrowserWorkloadNeededButNotAvailable”；('$(RuntimeIdentifier)' == 'browser-wasm' and '$(_BrowserWorkloadDisabled)' != 'true' and '$(WasmNativeWorkloadAvailable)' != 'true')的计算结果为('' == 'browser-wasm' and '' != 'true' and '' != 'true')。
       由于条件的计算结果为 false，已跳过目标“_ErrorWorkloadDisabledForTFMLessThan6”；('$(_BrowserWorkloadNotSupportedForTFM)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_ErrorDualWasmThreadPropsOn7”；('$(TargetsNet7)' == 'true' and '$(RuntimeIdentifier)' == 'browser-wasm' and
           '$(BrowserWorkloadDisabled)' != 'true' and '$(WasmEnableThreads)' == 'true' and '$(WasmEnablePerfTrace)' == 'true')的计算结果为('' == 'true' and '' == 'browser-wasm' and
           '' != 'true' and '' == 'true' and '' == 'true')。
       已跳过目标“Build”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“_PackAsBuildAfterTarget”；('$(GeneratePackageOnBuild)' == 'true' AND '$(IsInnerBuild)' != 'true')的计算结果为('false' == 'true' AND '' != 'true')。
       已跳过目标“_CheckContainersPackage”。以前的生成已成功。
   3:5>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(默认目标)的操作。
   2:2>已完成执行任务“MSBuild”的操作。
       任务“MSBuild”
         全局属性:
           Configuration=Debug
           Platform=AnyCPU
         移除项目“..\..\Infrastructure\Common\Common.csproj”的属性:
           TargetFramework
           RuntimeIdentifier
           SelfContained
         移除项目“..\..\Infrastructure\StoryScript\StoryScript.csproj”的属性:
           TargetFramework
           RuntimeIdentifier
           SelfContained
   2:2>项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”(2:2)正在节点 1 上生成“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(4:11) (GetNativeManifest 个目标)。
  4:11>已跳过目标“GetNativeManifest”。以前的生成已成功。
  4:11>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(GetNativeManifest 个目标)的操作。
   2:2>项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”(2:2)正在节点 2 上生成“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(3:6) (GetNativeManifest 个目标)。
   3:6>来自项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetNativeManifest”(入口点):
   3:6>已完成在项目“Common.csproj”中生成目标“GetNativeManifest”的操作。
   3:6>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(GetNativeManifest 个目标)的操作。
   2:2>已完成执行任务“MSBuild”的操作。
       由于 false 条件，已跳过任务“Warning”；('@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceNonexistent)' != '')计算为('..\..\Infrastructure\Common\Common.csproj;..\..\Infrastructure\StoryScript\StoryScript.csproj' != '' and '' != '')。
   2:2>已完成在项目“GameCore.csproj”中生成目标“ResolveProjectReferences”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Windows.targets”中的目标“RemoveManagedWinRTComponentWinMDReferences”(目标“ResolveReferences”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“RemoveManagedWinRTComponentWinMDReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“AddWinRTComponentImplementationReference”；('@(ManagedWinRTComponentImplementations)' != '')的计算结果为('' != '')。
       由于条件的计算结果为 false，已跳过目标“FindInvalidProjectReferences”；('$(FindInvalidProjectReferences)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“ResolveNativeReferences”；('@(NativeReference)'!='')的计算结果为(''!='')。
       已跳过目标“ResolveProjectReferences”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“FindInvalidProjectReferences”；('$(FindInvalidProjectReferences)' == 'true')的计算结果为('' == 'true')。
       已跳过目标“GetFrameworkPaths”。以前的生成已成功。
       已跳过目标“GetReferenceAssemblyPaths”。以前的生成已成功。
       已跳过目标“PrepareForBuild”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“GetInstalledSDKLocations”；('@(SDKReference)' != '')的计算结果为('' != '')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveSDKReferences”(目标“ResolveAssemblyReferences”依赖于它):
       由于 false 条件，已跳过任务“ResolveSDKReference”；('@(SDKReference)'!='')计算为(''!='')。
   2:2>已完成在项目“GameCore.csproj”中生成目标“ResolveSDKReferences”的操作。
       已跳过目标“ResolveSDKReferences”。以前的生成已成功。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ExpandSDKReferences”(目标“ResolveAssemblyReferences”依赖于它):
       由于 false 条件，已跳过任务“GetSDKReferenceFiles”；('@(ResolvedSDKReference)'!='')计算为(''!='')。
   2:2>已完成在项目“GameCore.csproj”中生成目标“ExpandSDKReferences”的操作。
       已跳过目标“ResolvePackageDependenciesForBuild”。以前的生成已成功。
       已跳过目标“GetFrameworkPaths”。以前的生成已成功。
       已跳过目标“GetReferenceAssemblyPaths”。以前的生成已成功。
       已跳过目标“ProcessFrameworkReferences”。以前的生成已成功。
       已跳过目标“ResolvePackageAssets”。以前的生成已成功。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets”中的目标“ResolveFrameworkReferences”(目标“ResolveTargetingPackAssets”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“GetPackageDirectory”任务。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       任务“GetPackageDirectory”
       已完成执行任务“GetPackageDirectory”的操作。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ResolveFrameworkReferences”任务。
       任务“ResolveFrameworkReferences”
       已完成执行任务“ResolveFrameworkReferences”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“ResolveFrameworkReferences”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets”中的目标“ResolveTargetingPackAssets”(目标“_HandlePackageFileConflicts”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ResolveTargetingPackAssets”任务。
       任务“ResolveTargetingPackAssets”
       已完成执行任务“ResolveTargetingPackAssets”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“ResolveTargetingPackAssets”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets”中的目标“ResolveOffByDefaultAnalyzers”(目标“_HandlePackageFileConflicts”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“ResolveOffByDefaultAnalyzers”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.ConflictResolution.targets”中的目标“_HandlePackageFileConflicts”(目标“ResolveAssemblyReferences”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“ResolvePackageFileConflicts”任务。
       任务“ResolvePackageFileConflicts”
       已完成执行任务“ResolvePackageFileConflicts”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_HandlePackageFileConflicts”的操作。
       已跳过目标“ResolveTargetingPackAssets”。以前的生成已成功。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveAssemblyReferences”(目标“ResolveReferences”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ResolveAssemblyReference”任务。
       任务“ResolveAssemblyReference”
         TargetFrameworkMoniker:
             .NETStandard,Version=v2.1
         TargetFrameworkMonikerDisplayName:
             .NET Standard 2.1
         TargetedRuntimeVersion:
             
         Assemblies:
             Dsl
                 HintPath =“..\..\ExternLibrary\Dsl.dll”
             LitJson
                 HintPath =“..\..\ExternLibrary\LitJson.dll”
             UnityEngine
                 HintPath =“..\..\ExternLibrary\modules\UnityEngine.dll”
             UnityEngine.AIModule
                 HintPath =“..\..\ExternLibrary\modules\UnityEngine.AIModule.dll”
             UnityEngine.AndroidJNIModule
                 HintPath =“..\..\ExternLibrary\modules\UnityEngine.AndroidJNIModule.dll”
             UnityEngine.AnimationModule
                 HintPath =“..\..\ExternLibrary\modules\UnityEngine.AnimationModule.dll”
             UnityEngine.AudioModule
                 HintPath =“..\..\ExternLibrary\modules\UnityEngine.AudioModule.dll”
             UnityEngine.CoreModule
                 HintPath =“..\..\ExternLibrary\modules\UnityEngine.CoreModule.dll”
             UnityEngine.ParticleSystemModule
                 HintPath =“..\..\ExternLibrary\modules\UnityEngine.ParticleSystemModule.dll”
             UnityEngine.PhysicsModule
                 HintPath =“..\..\ExternLibrary\modules\UnityEngine.PhysicsModule.dll”
             UnityEngine.UI
                 HintPath =“..\..\ExternLibrary\UnityEngine.UI.dll”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\Microsoft.Win32.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.AppContext.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Buffers.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.Concurrent.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.NonGeneric.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.Specialized.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.Composition.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.EventBasedAsync.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.TypeConverter.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Console.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Core.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Data.Common.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Data.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Contracts.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Debug.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.FileVersionInfo.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Process.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.StackTrace.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.TextWriterTraceListener.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Tools.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.TraceSource.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Tracing.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Drawing.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Drawing.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Dynamic.Runtime.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.Calendars.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.Extensions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.FileSystem.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.ZipFile.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.DriveInfo.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.Watcher.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.IsolatedStorage.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.MemoryMappedFiles.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Pipes.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.UnmanagedMemoryStream.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Expressions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Parallel.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Queryable.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Memory.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Http.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.NameResolution.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.NetworkInformation.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Ping.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Requests.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Security.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Sockets.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebHeaderCollection.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebSockets.Client.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebSockets.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Numerics.Vectors.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Numerics.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ObjectModel.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.DispatchProxy.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.ILGeneration.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.Lightweight.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Extensions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.Reader.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.ResourceManager.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.Writer.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.CompilerServices.VisualC.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Extensions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Handles.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.InteropServices.RuntimeInformation.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.InteropServices.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Numerics.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Formatters.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Json.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Xml.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Claims.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Algorithms.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Csp.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Encoding.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Primitives.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.X509Certificates.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Principal.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.SecureString.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ServiceModel.Web.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.Encoding.Extensions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.Encoding.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.RegularExpressions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Overlapped.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.Extensions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.Parallel.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Thread.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.ThreadPool.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Timer.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Transactions.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ValueTuple.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Web.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Windows.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.Linq.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.ReaderWriter.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.Serialization.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XDocument.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XPath.XDocument.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XPath.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XmlDocument.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XmlSerializer.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\mscorlib.dll
                 Private =“false”
             C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\netstandard.dll
                 Private =“false”
         AssemblyFiles:
             F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll
             F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll
         CandidateAssemblyFiles:
         TargetFrameworkDirectories:
             
         InstalledAssemblyTables:
         IgnoreInstalledAssemblyTable:
             False
         SearchPaths:
             {CandidateAssemblyFiles}
             {HintPathFromItem}
             {TargetFrameworkDirectory}
             {RawFileName}
         AllowedAssemblyExtensions:
             .winmd
             .dll
             .exe
         AllowedRelatedFileExtensions:
             .pdb
             .xml
             .pri
             .dll.config
             .exe.config
         AppConfigFile:
             
         AutoUnify:
             True
         CopyLocalDependenciesWhenParentReferenceInGac:
             True
         FindDependencies:
             True
         TargetProcessorArchitecture:
             msil
         StateFile:
             obj\Debug\netstandard2.1\GameCore.csproj.AssemblyReference.cache
         InstalledAssemblySubsetTables:
         IgnoreInstalledAssemblySubsetTable:
             False
         TargetFrameworkSubsets:
         FullTargetFrameworkSubsetNames:
             Full
         ProfileName:
             
         FullFrameworkFolders:
         LatestTargetFrameworkDirectories:
         ProfileTablesLocation:
         主引用“Common, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”。
             在搜索路径位置“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”找到引用。
             找到相关文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.pdb”。
         主引用“StoryScript, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”。
             在搜索路径位置“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”找到引用。
             找到相关文件“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.pdb”。
         主引用“Dsl, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
             找到相关文件“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.pdb”。
         主引用“LitJson, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
             此引用的 ImageRuntimeVersion 是“v2.0.50727”。
         主引用“UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
         主引用“UnityEngine.AIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.AIModule.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
         主引用“UnityEngine.AndroidJNIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.AndroidJNIModule.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
         主引用“UnityEngine.AnimationModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.AnimationModule.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
         主引用“UnityEngine.AudioModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.AudioModule.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
         主引用“UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.CoreModule.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
         主引用“UnityEngine.ParticleSystemModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ParticleSystemModule.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
         主引用“UnityEngine.PhysicsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.PhysicsModule.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
         主引用“UnityEngine.UI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”。
             解析的文件路径为“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.UI.dll”。
             在搜索路径位置“{HintPathFromItem}”找到引用。
         主引用“Microsoft.Win32.Primitives, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\Microsoft.Win32.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.AppContext, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.AppContext.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Buffers, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Buffers.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Collections.Concurrent, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.Concurrent.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Collections.NonGeneric, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.NonGeneric.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Collections.Specialized, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.Specialized.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Collections, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ComponentModel.Composition, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.Composition.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ComponentModel.EventBasedAsync, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.EventBasedAsync.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ComponentModel.Primitives, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ComponentModel.TypeConverter, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.TypeConverter.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ComponentModel, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Console, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Console.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Core.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Data.Common, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Data.Common.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Data.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.Contracts, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Contracts.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.Debug, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Debug.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.FileVersionInfo, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.FileVersionInfo.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.Process, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Process.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.StackTrace, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.StackTrace.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.TextWriterTraceListener, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.TextWriterTraceListener.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.Tools, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Tools.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.TraceSource, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.TraceSource.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Diagnostics.Tracing, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Tracing.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Drawing.Primitives, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Drawing.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Drawing.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Dynamic.Runtime, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Dynamic.Runtime.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Globalization.Calendars, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.Calendars.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Globalization.Extensions, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.Extensions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Globalization, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.Compression.FileSystem, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.FileSystem.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.Compression.ZipFile, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.ZipFile.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.Compression, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.FileSystem.DriveInfo, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.DriveInfo.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.FileSystem.Primitives, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.FileSystem.Watcher, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.Watcher.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.FileSystem, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.IsolatedStorage, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.IsolatedStorage.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.MemoryMappedFiles, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.MemoryMappedFiles.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.Pipes, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Pipes.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO.UnmanagedMemoryStream, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.UnmanagedMemoryStream.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.IO, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Linq.Expressions, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Expressions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Linq.Parallel, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Parallel.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Linq.Queryable, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Queryable.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Linq, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Memory, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Memory.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.Http, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Http.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.NameResolution, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.NameResolution.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.NetworkInformation, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.NetworkInformation.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.Ping, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Ping.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.Primitives, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.Requests, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Requests.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.Security, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Security.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.Sockets, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Sockets.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.WebHeaderCollection, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebHeaderCollection.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.WebSockets.Client, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebSockets.Client.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net.WebSockets, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebSockets.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Net, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Numerics.Vectors, Version=4.1.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Numerics.Vectors.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Numerics.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ObjectModel, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ObjectModel.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection.DispatchProxy, Version=4.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.DispatchProxy.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection.Emit.ILGeneration, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.ILGeneration.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection.Emit.Lightweight, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.Lightweight.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection.Emit, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection.Extensions, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Extensions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection.Primitives, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Reflection, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Resources.Reader, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.Reader.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Resources.ResourceManager, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.ResourceManager.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Resources.Writer, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.Writer.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.CompilerServices.VisualC, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.CompilerServices.VisualC.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Extensions, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Extensions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Handles, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Handles.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.InteropServices.RuntimeInformation, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.InteropServices.RuntimeInformation.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.InteropServices, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.InteropServices.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Numerics, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Numerics.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Serialization.Formatters, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Formatters.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Serialization.Json, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Json.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Serialization.Primitives, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Serialization.Xml, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Xml.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Claims, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Claims.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Cryptography.Algorithms, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Algorithms.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Cryptography.Csp, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Csp.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Cryptography.Encoding, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Encoding.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Cryptography.Primitives, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Primitives.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Cryptography.X509Certificates, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.X509Certificates.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.Principal, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Principal.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Security.SecureString, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.SecureString.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ServiceModel.Web.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Text.Encoding.Extensions, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.Encoding.Extensions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Text.Encoding, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.Encoding.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Text.RegularExpressions, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.RegularExpressions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.Overlapped, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Overlapped.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.Tasks.Extensions, Version=4.2.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.Extensions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.Tasks.Parallel, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.Parallel.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.Tasks, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.Thread, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Thread.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.ThreadPool, Version=4.0.12.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.ThreadPool.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading.Timer, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Timer.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Threading, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Transactions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Transactions.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.ValueTuple, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ValueTuple.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Web.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Windows, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Windows.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.Linq.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.ReaderWriter, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.ReaderWriter.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.Serialization.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.XDocument, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XDocument.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.XPath.XDocument, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XPath.XDocument.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.XPath, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XPath.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.XmlDocument, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XmlDocument.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml.XmlSerializer, Version=4.0.11.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XmlSerializer.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         主引用“System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         统一主引用“System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             使用此版本而不是“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll”中的原始版本“2.0.0.0”，因为 AutoUnify 为“true”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         统一主引用“mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089”。
             使用此版本而不是“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll”中的原始版本“2.0.0.0”，因为 AutoUnify 为“true”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\mscorlib.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         统一主引用“netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51”。
             使用此版本而不是“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll”中的原始版本“2.0.0.0”，因为 AutoUnify 为“true”。
             解析的文件路径为“C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\netstandard.dll”。
             在搜索路径位置“{RawFileName}”找到引用。
             此引用不是“CopyLocal”，因为至少有一个源项将“Private”设置为“false”，而没有源项将“Private”设置为“true”。
         依赖项“UnityEngine.DSPGraphModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.DSPGraphModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.DSPGraphModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.DSPGraphModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.DSPGraphModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.UnityCurlModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.UnityCurlModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityCurlModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityCurlModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityCurlModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.ContentLoadModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.ContentLoadModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ContentLoadModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ContentLoadModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ContentLoadModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.PropertiesModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.PropertiesModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.PropertiesModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.PropertiesModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.PropertiesModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.TLSModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.TLSModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TLSModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TLSModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TLSModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.InputLegacyModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.InputLegacyModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.InputLegacyModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.InputLegacyModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.InputLegacyModule.exe”，但它不存在。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.InputLegacyModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.InputLegacyModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.InputLegacyModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
             “UnityEngine.UI”所必需的。
         依赖项“UnityEngine.AccessibilityModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.AccessibilityModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.AccessibilityModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.AccessibilityModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.AccessibilityModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.UIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.UIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UIModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UIModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UIModule.exe”，但它不存在。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.UIModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.UIModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.UIModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
             “UnityEngine.UI”所必需的。
         依赖项“UnityEngine.UnityConnectModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.UnityConnectModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityConnectModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityConnectModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityConnectModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.UnityAnalyticsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.UnityAnalyticsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityAnalyticsModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityAnalyticsModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityAnalyticsModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.UnityAnalyticsCommonModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.UnityAnalyticsCommonModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityAnalyticsCommonModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityAnalyticsCommonModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityAnalyticsCommonModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.PerformanceReportingModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.PerformanceReportingModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.PerformanceReportingModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.PerformanceReportingModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.PerformanceReportingModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.Physics2DModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.Physics2DModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.Physics2DModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.Physics2DModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.Physics2DModule.exe”，但它不存在。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.Physics2DModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.Physics2DModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.Physics2DModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
             “UnityEngine.UI”所必需的。
         依赖项“UnityEngine.AssetBundleModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.AssetBundleModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.AssetBundleModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.AssetBundleModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.AssetBundleModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.SharedInternalsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.SharedInternalsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.exe”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.exe”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.exe”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.exe”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.exe”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.exe”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.exe”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SharedInternalsModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
             “UnityEngine.AIModule”所必需的。
             “UnityEngine.AndroidJNIModule”所必需的。
             “UnityEngine.AnimationModule”所必需的。
             “UnityEngine.AudioModule”所必需的。
             “UnityEngine.CoreModule”所必需的。
             “UnityEngine.ParticleSystemModule”所必需的。
             “UnityEngine.PhysicsModule”所必需的。
             “UnityEngine.UI”所必需的。
         依赖项“UnityEngine.TextRenderingModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.TextRenderingModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TextRenderingModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TextRenderingModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TextRenderingModule.exe”，但它不存在。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.TextRenderingModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.TextRenderingModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.TextRenderingModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
             “UnityEngine.UI”所必需的。
         依赖项“UnityEngine.ClothModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.ClothModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ClothModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ClothModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ClothModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.ClusterInputModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.ClusterInputModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ClusterInputModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ClusterInputModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ClusterInputModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.ClusterRendererModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.ClusterRendererModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ClusterRendererModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ClusterRendererModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ClusterRendererModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.CrashReportingModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.CrashReportingModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.CrashReportingModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.CrashReportingModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.CrashReportingModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.TilemapModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.TilemapModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TilemapModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TilemapModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TilemapModule.exe”，但它不存在。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.TilemapModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.TilemapModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.TilemapModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
             “UnityEngine.UI”所必需的。
         依赖项“UnityEngine.TerrainModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.TerrainModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TerrainModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TerrainModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TerrainModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.IMGUIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.IMGUIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.IMGUIModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.IMGUIModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.IMGUIModule.exe”，但它不存在。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.IMGUIModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.IMGUIModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.IMGUIModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
             “UnityEngine.UI”所必需的。
         依赖项“UnityEngine.VFXModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.VFXModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.VFXModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.VFXModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.VFXModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.VideoModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.VideoModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.VideoModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.VideoModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.VideoModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.VRModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.VRModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.VRModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.VRModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.VRModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.GridModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.GridModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.GridModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.GridModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.GridModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.ImageConversionModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.ImageConversionModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ImageConversionModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ImageConversionModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ImageConversionModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.SubsystemsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.SubsystemsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SubsystemsModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SubsystemsModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SubsystemsModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.JSONSerializeModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.JSONSerializeModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.JSONSerializeModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.JSONSerializeModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.JSONSerializeModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.LocalizationModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.LocalizationModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.LocalizationModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.LocalizationModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.LocalizationModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.UnityWebRequestModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.UnityWebRequestModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityWebRequestModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityWebRequestModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityWebRequestModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.UnityWebRequestAssetBundleModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.UnityWebRequestAssetBundleModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityWebRequestAssetBundleModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityWebRequestAssetBundleModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityWebRequestAssetBundleModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.UnityWebRequestAudioModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.UnityWebRequestAudioModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityWebRequestAudioModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityWebRequestAudioModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityWebRequestAudioModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.UnityWebRequestTextureModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.UnityWebRequestTextureModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityWebRequestTextureModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityWebRequestTextureModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityWebRequestTextureModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.UnityWebRequestWWWModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.UnityWebRequestWWWModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityWebRequestWWWModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityWebRequestWWWModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UnityWebRequestWWWModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.NVIDIAModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.NVIDIAModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.NVIDIAModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.NVIDIAModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.NVIDIAModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.DirectorModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.DirectorModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.DirectorModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.DirectorModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.DirectorModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.VirtualTexturingModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.VirtualTexturingModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.VirtualTexturingModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.VirtualTexturingModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.VirtualTexturingModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.ScreenCaptureModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.ScreenCaptureModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ScreenCaptureModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ScreenCaptureModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ScreenCaptureModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.GameCenterModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.GameCenterModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.GameCenterModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.GameCenterModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.GameCenterModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.SpriteMaskModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.SpriteMaskModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SpriteMaskModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SpriteMaskModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SpriteMaskModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.StreamingModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.StreamingModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.StreamingModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.StreamingModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.StreamingModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.TerrainPhysicsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.TerrainPhysicsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TerrainPhysicsModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TerrainPhysicsModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TerrainPhysicsModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.TextCoreFontEngineModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.TextCoreFontEngineModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TextCoreFontEngineModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TextCoreFontEngineModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TextCoreFontEngineModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.TextCoreTextEngineModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.TextCoreTextEngineModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TextCoreTextEngineModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TextCoreTextEngineModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.TextCoreTextEngineModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.SpriteShapeModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.SpriteShapeModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SpriteShapeModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SpriteShapeModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.SpriteShapeModule.exe”，但它不存在。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.SpriteShapeModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.SpriteShapeModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.SpriteShapeModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
             “UnityEngine.UI”所必需的。
         依赖项“UnityEngine.UIElementsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.UIElementsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UIElementsModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UIElementsModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.UIElementsModule.exe”，但它不存在。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.UIElementsModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.UIElementsModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.UIElementsModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
             “UnityEngine.UI”所必需的。
         依赖项“UnityEngine.VehiclesModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.VehiclesModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.VehiclesModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.VehiclesModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.VehiclesModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.WindModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.WindModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.WindModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.WindModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.WindModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.XRModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.XRModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.XRModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.XRModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.XRModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.ARModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.ARModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ARModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ARModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ARModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEngine.InputModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEngine.InputModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.InputModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.InputModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.InputModule.exe”，但它不存在。
             “UnityEngine”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”所必需的。
             “F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”所必需的。
         依赖项“UnityEditor.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。
             未能解析此引用。未能找到程序集“UnityEditor.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。
                 用于 SearchPath“F:\GitHub\GameDemo\GameLibrary\ExternLibrary”。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEditor.CoreModule.winmd”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEditor.CoreModule.dll”，但它不存在。
                 已考虑使用“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEditor.CoreModule.exe”，但它不存在。
             “UnityEngine.UI”所必需的。
       已完成执行任务“ResolveAssemblyReference”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“ResolveAssemblyReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“_ErrorOnUnresolvedWindowsSDKAssemblyConflict”；( '@(ResolveAssemblyReferenceUnresolvedAssemblyConflicts)' != '' )的计算结果为( '' != '' )。
       由于条件的计算结果为 false，已跳过目标“GenerateBindingRedirects”；('$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true' and '@(SuggestedBindingRedirects)' != '' and '$(DesignTimeBuild)' != 'true' and '$(BuildingProject)' == 'true')的计算结果为('' == 'true' and '' == 'true' and 'System, Culture=neutral, PublicKeyToken=b77a5c561934e089;mscorlib, Culture=neutral, PublicKeyToken=b77a5c561934e089;netstandard, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' != '' and '' != 'true' and 'true' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateSupportedRuntime”；('$(GenerateSupportedRuntime)' != 'false' and '$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(HasRuntimeOutput)' == 'true')的计算结果为('' != 'false' and '.NETStandard' == '.NETFramework' and '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateBindingRedirectsUpdateAppConfig”；('$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true')的计算结果为('' == 'true' and '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“ResolveComReferences”；('@(COMReference)'!='' or '@(COMFileReference)'!='')的计算结果为(''!='' or ''!='')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterResolveReferences”(目标“ResolveReferences”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“AfterResolveReferences”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveTestReferences”；('@(Shadow)'!='')的计算结果为(''!='')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResolveReferences”(目标“CoreBuild”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“ResolveReferences”的操作。
       已跳过目标“ResolvePackageDependenciesForBuild”。以前的生成已成功。
       已跳过目标“_HandlePackageFileConflicts”。以前的生成已成功。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets”中的目标“ValidationExtension”(目标“PrepareResources”依赖于它):
       由于 false 条件，已跳过任务“WorkflowBuildMessageTask”；('$(SkipWorkflowValidation)'!='' and '$(SkipWorkflowValidation)'!='true' and '$(SkipWorkflowValidation)'!='false')计算为(''!='' and ''!='true' and ''!='false')。
   2:2>已完成在项目“GameCore.csproj”中生成目标“ValidationExtension”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WorkflowBuildExtensions.targets”中的目标“ExpressionBuildExtension”(目标“PrepareResources”依赖于它):
       由于 false 条件，已跳过任务“WorkflowBuildMessageTask”；('$(DisableWorkflowCompiledExpressions)'!='' and '$(DisableWorkflowCompiledExpressions)'!='true' and '$(DisableWorkflowCompiledExpressions)'!='false')计算为(''!='' and ''!='true' and ''!='false')。
   2:2>已完成在项目“GameCore.csproj”中生成目标“ExpressionBuildExtension”的操作。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompilePass1”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileReadGeneratedFileList”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileAddFilesGenerated”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompilePass2”；('$(XamlRequiresCompilationPass2)' == 'true' )的计算结果为('false' == 'true' )。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileReadPass2Flag”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“XamlMarkupCompileAddExtensionFilesGenerated”；('@(XamlPage)' != '' or '@(XamlAppDef)' != '')的计算结果为('' != '' or '' != '')。
       由于条件的计算结果为 false，已跳过目标“AddDeferredValidationErrorsFileToFileWrites”；(Exists('$(DeferredValidationErrorsFileName)'))的计算结果为(Exists('obj\Debug\netstandard2.1\\AC2C1ABA-CCF6-44D4-8127-588FD4D0A860-DeferredValidationErrors.xml'))。
       由于条件的计算结果为 false，已跳过目标“ReportValidationBuildExtensionErrors”；('$(SkipWorkflowValidation)' != 'true' and ('@(XamlPage)' != '' or '@(XamlAppDef)' != ''))的计算结果为('' != 'true' and ('' != '' or '' != ''))。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“CopyAdditionalFiles”(目标“AssignTargetPaths”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“CopyAdditionalFiles”的操作。
       由于条件的计算结果为 false，已跳过目标“_ComputeNETCoreBuildOutputFiles”；('$(ComputeNETCoreBuildOutputFiles)' == 'true')的计算结果为('' == 'true')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AssignTargetPaths”(目标“PrepareResourceNames”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“AssignTargetPath”任务。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
       由于 false 条件，已跳过任务“AssignTargetPath”；('@(_DeploymentBaseManifestWithTargetPath)'=='' and '%(None.Extension)'=='.manifest')计算为(''=='' and ''=='.manifest')。
   2:2>已完成在项目“GameCore.csproj”中生成目标“AssignTargetPaths”的操作。
       已跳过目标“AssignTargetPaths”。以前的生成已成功。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“SplitResourcesByCulture”(目标“PrepareResourceNames”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ResxWithNoCulture)'!='')计算为(''!='')。
       由于 false 条件，已跳过任务“Warning”；('@(ResxWithCulture)'!='')计算为(''!='')。
       由于 false 条件，已跳过任务“Warning”；('@(NonResxWithCulture)'!='')计算为(''!='')。
       由于 false 条件，已跳过任务“Warning”；('@(NonResxWithNoCulture)'!='')计算为(''!='')。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“AssignCulture”任务。
       任务“AssignCulture”
       已完成执行任务“AssignCulture”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“SplitResourcesByCulture”的操作。
       由于条件的计算结果为 false，已跳过目标“CreateManifestResourceNames”；('@(EmbeddedResource)' != '')的计算结果为('' != '')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CreateCustomManifestResourceNames”(目标“PrepareResourceNames”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“CreateCustomManifestResourceNames”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareResourceNames”(目标“PrepareResources”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“PrepareResourceNames”的操作。
       已跳过目标“ResolveAssemblyReferences”。以前的生成已成功。
       已跳过目标“SplitResourcesByCulture”。以前的生成已成功。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeResGen”(目标“ResGen”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“BeforeResGen”的操作。
       已跳过目标“ResolveReferences”。以前的生成已成功。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“FindReferenceAssembliesForReferences”(目标“CoreResGen”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“FindReferenceAssembliesForReferences”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CoreResGen”(目标“ResGen”依赖于它):
       由于 false 条件，已跳过任务“GenerateResource”；('%(EmbeddedResource.Type)' == 'Resx' and '%(EmbeddedResource.GenerateResource)' != 'false' and '$(GenerateResourceMSBuildRuntime)' != 'CLR2')计算为('' == 'Resx' and '' != 'false' and 'CurrentRuntime' != 'CLR2')。
       由于 false 条件，已跳过任务“GenerateResource”；('%(EmbeddedResource.Type)' == 'Resx' and '%(EmbeddedResource.GenerateResource)' != 'false' and '$(GenerateResourceMSBuildRuntime)' == 'CLR2')计算为('' == 'Resx' and '' != 'false' and 'CurrentRuntime' == 'CLR2')。
   2:2>已完成在项目“GameCore.csproj”中生成目标“CoreResGen”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterResGen”(目标“ResGen”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“AfterResGen”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“ResGen”(目标“PrepareResources”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“ResGen”的操作。
       由于条件的计算结果为 false，已跳过目标“CompileLicxFiles”；('@(_LicxFile)'!='')的计算结果为(''!='')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareResources”(目标“CoreBuild”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“PrepareResources”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveKeySource”；($(SignManifests) == 'true' or $(SignAssembly) == 'true')的计算结果为( == 'true' or false == 'true')。
       已跳过目标“ResolveReferences”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“ResolveKeySource”；($(SignManifests) == 'true' or $(SignAssembly) == 'true')的计算结果为( == 'true' or false == 'true')。
       由于条件的计算结果为 false，已跳过目标“ResolveComReferences”；('@(COMReference)'!='' or '@(COMFileReference)'!='')的计算结果为(''!='' or ''!='')。
       由于条件的计算结果为 false，已跳过目标“ResolveNativeReferences”；('@(NativeReference)'!='')的计算结果为(''!='')。
       由于条件的计算结果为 false，已跳过目标“_SetExternalWin32ManifestProperties”；('$(GenerateClickOnceManifests)'=='true' or '@(NativeReference)'!='' or '@(ResolvedIsolatedComModules)'!='')的计算结果为(''=='true' or ''!='' or ''!='')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_SetEmbeddedWin32ManifestProperties”(目标“SetWin32ManifestProperties”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“GetFrameworkPath”任务。
       任务“GetFrameworkPath”
       已完成执行任务“GetFrameworkPath”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_SetEmbeddedWin32ManifestProperties”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“SetWin32ManifestProperties”(目标“Compile”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“SetWin32ManifestProperties”的操作。
       已跳过目标“FindReferenceAssembliesForReferences”。以前的生成已成功。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GenerateCompileInputs”(目标“Compile”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ManifestResourceWithNoCulture)'!='' and '%(ManifestResourceWithNoCulture.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
       由于 false 条件，已跳过任务“Warning”；('@(ManifestNonResxWithNoCultureOnDisk)'!='' and '%(ManifestNonResxWithNoCultureOnDisk.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_GenerateCompileInputs”的操作。
       已跳过目标“PrepareForBuild”。以前的生成已成功。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“GenerateMSBuildEditorConfigFileShouldRun”(目标“GenerateMSBuildEditorConfigFile”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“GenerateMSBuildEditorConfigFileShouldRun”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“GenerateMSBuildEditorConfigFileCore”(目标“GenerateMSBuildEditorConfigFile”依赖于它):
       正在完全生成目标“GenerateMSBuildEditorConfigFileCore”。
       未指定输入文件。
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Build.Tasks.CodeAnalysis.dll”中的“GenerateMSBuildEditorConfig”任务。
       任务“GenerateMSBuildEditorConfig”
       已完成执行任务“GenerateMSBuildEditorConfig”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“GenerateMSBuildEditorConfigFileCore”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“GenerateMSBuildEditorConfigFile”(目标“BeforeCompile”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“GenerateMSBuildEditorConfigFile”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateTargetFrameworkMonikerAttribute”；('@(Compile)' != '' and '$(GenerateTargetFrameworkAttribute)' == 'true')的计算结果为('Ai\AiCommand.cs;Ai\AiCommand\AiChase.cs;Ai\AiCommand\AiGohome.cs;...' != '' and 'False' == 'true')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.CSharp.CurrentVersion.targets”中的目标“_SetTargetFrameworkMonikerAttribute”(目标“GenerateTargetFrameworkMonikerAttribute”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“_SetTargetFrameworkMonikerAttribute”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateAdditionalSources”；('@(AssemblyAttributes)' != '' and '$(GenerateAdditionalSources)' == 'true')的计算结果为('' != '' and '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateAssemblyInfo”；('$(GenerateAssemblyInfo)' == 'true')的计算结果为('false' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateGlobalUsings”；(@(Using->Count()) != 0)的计算结果为(0 != 0)。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“BeforeCompile”(目标“Compile”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“BeforeCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“_TimeStampBeforeCompile”；('$(RunPostBuildEvent)'=='OnOutputUpdated' or ('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library'))的计算结果为(''=='OnOutputUpdated' or (''=='true' and 'Library'=='library'))。
       已跳过目标“ResolveAssemblyReferences”。以前的生成已成功。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GenerateCompileDependencyCache”(目标“Compile”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Hash”任务。
       任务“Hash”
       已完成执行任务“Hash”的操作。
       任务“WriteLinesToFile”
       已完成执行任务“WriteLinesToFile”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_GenerateCompileDependencyCache”的操作。
       由于条件的计算结果为 false，已跳过目标“_ComputeNonExistentFileProperty”；(('$(BuildingInsideVisualStudio)' == 'true') and ('$(BuildingOutOfProcess)' != 'true') and (('$(BuildingProject)' == 'false') or ('$(UseHostCompilerIfAvailable)' == 'true')))的计算结果为(('' == 'true') and ('' != 'true') and (('true' == 'false') or ('true' == 'true')))。
       由于条件的计算结果为 false，已跳过目标“ResolveCodeAnalysisRuleSet”；('$(CodeAnalysisRuleSet)' != '')的计算结果为('' != '')。
       由于条件的计算结果为 false，已跳过目标“ShimReferencePathsWhenCommonTargetsDoesNotUnderstandReferenceAssemblies”；('@(ReferencePathWithRefAssemblies)' == '')的计算结果为('F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll;F:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll;F:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll;...' == '')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“_BeforeVBCSCoreCompile”(目标“CoreCompile”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“_BeforeVBCSCoreCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“AdjustDefaultPlatformTargetForNetFrameworkExeWithNoNativeCopyLocalItems”；('$(_UsingDefaultPlatformTarget)' == 'true' and
                            '$(_UsingDefaultRuntimeIdentifier)' == 'true')的计算结果为('true' == 'true' and
                            '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_DisableDiagnosticTracing”；('$(DisableDiagnosticTracing)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateTargetPlatformDefineConstants”；( '$(DisableImplicitFrameworkDefines)' != 'true' and '$(TargetPlatformIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) )的计算结果为( '' != 'true' and 'Windows' != '' and '.NETStandard' == '.NETCoreApp' and False )。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.BeforeCommon.targets”中的目标“GenerateNETCompatibleDefineConstants”(目标“AddImplicitDefineConstants”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“GenerateNETCompatibleDefineConstants”的操作。
       由于条件的计算结果为 false，已跳过目标“GeneratePlatformCompatibleDefineConstants”；( '$(DisableImplicitFrameworkDefines)' != 'true' and '$(TargetPlatformIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0)) )的计算结果为( '' != 'true' and 'Windows' != '' and '.NETStandard' == '.NETCoreApp' and False )。
       由于条件的计算结果为 false，已跳过目标“_DisableDiagnosticTracing”；('$(DisableDiagnosticTracing)' == 'true')的计算结果为('' == 'true')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.BeforeCommon.targets”中的目标“AddImplicitDefineConstants”(目标“CoreCompile”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“AddImplicitDefineConstants”的操作。
       由于条件的计算结果为 false，已跳过目标“ShimReferencePathsWhenCommonTargetsDoesNotUnderstandReferenceAssemblies”；('@(ReferencePathWithRefAssemblies)' == '')的计算结果为('F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll;F:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll;F:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll;...' == '')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“_ComputeSkipAnalyzers”(目标“CoreCompile”依赖于它):
       由于 false 条件，已跳过任务“ShowMessageForImplicitlySkipAnalyzers”；('$(_ImplicitlySkipAnalyzers)' == 'true')计算为('' == 'true')。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_ComputeSkipAnalyzers”的操作。
       由于条件的计算结果为 false，已跳过目标“_SetPathMapFromSourceRoots”；('$(DeterministicSourcePaths)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“CreateCompilerGeneratedFilesOutputPath”；('$(EmitCompilerGeneratedFiles)' == 'true' and !('$(DesignTimeBuild)' == 'true' OR '$(BuildingProject)' != 'true'))的计算结果为('false' == 'true' and !('' == 'true' OR 'true' != 'true'))。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.ServiceModel.targets”中的目标“PreXsdCodeGen”(目标“CoreCompile”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“CallTarget”任务。
       任务“CallTarget”
       已跳过目标“CleanXsdCodeGen”。以前的生成已成功。
       已完成执行任务“CallTarget”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“PreXsdCodeGen”的操作。
       由于条件的计算结果为 false，已跳过目标“XsdCodeGen”；( '$(XsdCodeGenPreCondition)' == 'True' )的计算结果为( 'False' == 'True' )。
       已跳过目标“BeforeCompile”。以前的生成已成功。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.Build.Tasks.Git\build\Microsoft.Build.Tasks.Git.targets”中的目标“InitializeSourceControlInformationFromSourceControlManager”(目标“SetEmbeddedFilesFromSourceControlManagerUntrackedFiles”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.Build.Tasks.Git\build\..\tools\net472\Microsoft.Build.Tasks.Git.dll”中的“Microsoft.Build.Tasks.Git.LocateRepository”任务。
       任务“Microsoft.Build.Tasks.Git.LocateRepository”
         SourceLink: Repository instance not found in cache: '*:F:\GitHub\GameDemo\.git'
       已完成执行任务“Microsoft.Build.Tasks.Git.LocateRepository”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“InitializeSourceControlInformationFromSourceControlManager”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.Build.Tasks.Git\build\Microsoft.Build.Tasks.Git.targets”中的目标“SetEmbeddedFilesFromSourceControlManagerUntrackedFiles”(目标“_SetEmbeddedFilesFromSourceControlManagerUntrackedFiles”依赖于它):
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.Build.Tasks.Git\build\..\tools\net472\Microsoft.Build.Tasks.Git.dll”中的“Microsoft.Build.Tasks.Git.GetUntrackedFiles”任务。
       任务“Microsoft.Build.Tasks.Git.GetUntrackedFiles”
         SourceLink: Reusing cached git repository information.
       已完成执行任务“Microsoft.Build.Tasks.Git.GetUntrackedFiles”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“SetEmbeddedFilesFromSourceControlManagerUntrackedFiles”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\Microsoft.SourceLink.Common.targets”中的目标“_SetEmbeddedFilesFromSourceControlManagerUntrackedFiles”(目标“CoreCompile”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“_SetEmbeddedFilesFromSourceControlManagerUntrackedFiles”的操作。
       已跳过目标“InitializeSourceControlInformationFromSourceControlManager”。以前的生成已成功。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\InitializeSourceControlInformation.targets”中的目标“_SourceLinkHasSingleProvider”(目标“_InitializeSourceControlInformationFromSourceControlManager”依赖于它):
       程序集加载期间 TaskRun: Microsoft.SourceLink.Common, Version=8.0.9.11501, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\tools\net472\Microsoft.SourceLink.Common.dll, MVID: 19921414-9bda-46be-bf07-0ee6adeb63bb, AppDomain: [Default])
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\..\tools\net472\Microsoft.SourceLink.Common.dll”中的“Microsoft.SourceLink.Common.SourceLinkHasSingleProvider”任务。
       任务“Microsoft.SourceLink.Common.SourceLinkHasSingleProvider”
       已完成执行任务“Microsoft.SourceLink.Common.SourceLinkHasSingleProvider”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_SourceLinkHasSingleProvider”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\build\Microsoft.SourceLink.GitHub.targets”中的目标“TranslateGitHubUrlsInSourceControlInformation”(目标“_InitializeSourceControlInformationFromSourceControlManager”依赖于它):
       程序集加载期间 TaskRun: Microsoft.SourceLink.GitHub, Version=8.0.9.11501, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\tools\net472\Microsoft.SourceLink.GitHub.dll, MVID: 203a1e0c-0f5a-417b-a1e2-8344aa340e04, AppDomain: [Default])
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\build\..\tools\net472\Microsoft.SourceLink.GitHub.dll”中的“Microsoft.SourceLink.GitHub.TranslateRepositoryUrls”任务。
       任务“Microsoft.SourceLink.GitHub.TranslateRepositoryUrls”
       已完成执行任务“Microsoft.SourceLink.GitHub.TranslateRepositoryUrls”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“TranslateGitHubUrlsInSourceControlInformation”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\Microsoft.SourceLink.GitLab.targets”中的目标“TranslateGitLabUrlsInSourceControlInformation”(目标“_InitializeSourceControlInformationFromSourceControlManager”依赖于它):
       程序集加载期间 TaskRun: Microsoft.SourceLink.GitLab, Version=8.0.9.11501, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\tools\net472\Microsoft.SourceLink.GitLab.dll, MVID: f8dee646-600e-46ce-b44a-470829b6446c, AppDomain: [Default])
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\..\tools\net472\Microsoft.SourceLink.GitLab.dll”中的“Microsoft.SourceLink.GitLab.TranslateRepositoryUrls”任务。
       任务“Microsoft.SourceLink.GitLab.TranslateRepositoryUrls”
       已完成执行任务“Microsoft.SourceLink.GitLab.TranslateRepositoryUrls”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“TranslateGitLabUrlsInSourceControlInformation”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\Microsoft.SourceLink.AzureRepos.Git.targets”中的目标“TranslateAzureReposGitUrlsInSourceControlInformation”(目标“_InitializeSourceControlInformationFromSourceControlManager”依赖于它):
       程序集加载期间 TaskRun: Microsoft.SourceLink.AzureRepos.Git, Version=8.0.9.11501, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\tools\net472\Microsoft.SourceLink.AzureRepos.Git.dll, MVID: bccb3889-f2b8-42f3-ac1f-8ab21c0eaf2a, AppDomain: [Default])
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\..\tools\net472\Microsoft.SourceLink.AzureRepos.Git.dll”中的“Microsoft.SourceLink.AzureRepos.Git.TranslateRepositoryUrls”任务。
       任务“Microsoft.SourceLink.AzureRepos.Git.TranslateRepositoryUrls”
       已完成执行任务“Microsoft.SourceLink.AzureRepos.Git.TranslateRepositoryUrls”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“TranslateAzureReposGitUrlsInSourceControlInformation”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\Microsoft.SourceLink.Bitbucket.Git.targets”中的目标“TranslateBitbucketGitUrlsInSourceControlInformation”(目标“_InitializeSourceControlInformationFromSourceControlManager”依赖于它):
       程序集加载期间 TaskRun: Microsoft.SourceLink.Bitbucket.Git, Version=8.0.9.11501, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\tools\net472\Microsoft.SourceLink.Bitbucket.Git.dll, MVID: 680dfc21-12ea-4be8-ab51-4f6ef7f5d016, AppDomain: [Default])
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\..\tools\net472\Microsoft.SourceLink.Bitbucket.Git.dll”中的“Microsoft.SourceLink.Bitbucket.Git.TranslateRepositoryUrls”任务。
       任务“Microsoft.SourceLink.Bitbucket.Git.TranslateRepositoryUrls”
       已完成执行任务“Microsoft.SourceLink.Bitbucket.Git.TranslateRepositoryUrls”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“TranslateBitbucketGitUrlsInSourceControlInformation”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\InitializeSourceControlInformation.targets”中的目标“SourceControlManagerPublishTranslatedUrls”(目标“_InitializeSourceControlInformationFromSourceControlManager”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“SourceControlManagerPublishTranslatedUrls”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\InitializeSourceControlInformation.targets”中的目标“_InitializeSourceControlInformationFromSourceControlManager”(目标“InitializeSourceControlInformation”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“_InitializeSourceControlInformationFromSourceControlManager”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“InitializeSourceControlInformation”(目标“GenerateSourceLinkFile”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“InitializeSourceControlInformation”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\Microsoft.SourceLink.Common.targets”中的目标“_SetSourceLinkFilePath”(目标“_GenerateSourceLinkFile”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“_SetSourceLinkFilePath”的操作。
       已跳过目标“InitializeSourceControlInformation”。以前的生成已成功。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“_InitializeSourceRootMappedPathsFromSourceControl”(目标“InitializeSourceRootMappedPaths”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“_InitializeSourceRootMappedPathsFromSourceControl”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets”中的目标“InitializeSourceRootMappedPaths”(目标“_InitializeSourceRootMappedPathsOpt”依赖于它):
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Build.Tasks.CodeAnalysis.dll”中的“Microsoft.CodeAnalysis.BuildTasks.MapSourceRoots”任务。
       任务“Microsoft.CodeAnalysis.BuildTasks.MapSourceRoots”
       已完成执行任务“Microsoft.CodeAnalysis.BuildTasks.MapSourceRoots”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“InitializeSourceRootMappedPaths”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\Microsoft.SourceLink.Common.targets”中的目标“_InitializeSourceRootMappedPathsOpt”(目标“_GenerateSourceLinkFile”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“_InitializeSourceRootMappedPathsOpt”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\build\Microsoft.SourceLink.GitHub.targets”中的目标“_InitializeGitHubSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeGitHubSourceLinkUrl”。
       未指定输入文件。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\build\..\tools\net472\Microsoft.SourceLink.GitHub.dll”中的“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”任务。
       任务“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_InitializeGitHubSourceLinkUrl”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\build\Microsoft.SourceLink.GitHub.targets”中的目标“_InitializeGitHubSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeGitHubSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_InitializeGitHubSourceLinkUrl”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitHub\build\Microsoft.SourceLink.GitHub.targets”中的目标“_InitializeGitHubSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeGitHubSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.GitHub.GetSourceLinkUrl”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_InitializeGitHubSourceLinkUrl”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\Microsoft.SourceLink.GitLab.targets”中的目标“_InitializeGitLabSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeGitLabSourceLinkUrl”。
       未指定输入文件。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\..\tools\net472\Microsoft.SourceLink.GitLab.dll”中的“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”任务。
       任务“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_InitializeGitLabSourceLinkUrl”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\Microsoft.SourceLink.GitLab.targets”中的目标“_InitializeGitLabSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeGitLabSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_InitializeGitLabSourceLinkUrl”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.GitLab\build\Microsoft.SourceLink.GitLab.targets”中的目标“_InitializeGitLabSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeGitLabSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.GitLab.GetSourceLinkUrl”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_InitializeGitLabSourceLinkUrl”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\Microsoft.SourceLink.AzureRepos.Git.targets”中的目标“_InitializeAzureReposGitSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeAzureReposGitSourceLinkUrl”。
       未指定输入文件。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\..\tools\net472\Microsoft.SourceLink.AzureRepos.Git.dll”中的“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”任务。
       任务“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_InitializeAzureReposGitSourceLinkUrl”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\Microsoft.SourceLink.AzureRepos.Git.targets”中的目标“_InitializeAzureReposGitSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeAzureReposGitSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_InitializeAzureReposGitSourceLinkUrl”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.AzureRepos.Git\build\Microsoft.SourceLink.AzureRepos.Git.targets”中的目标“_InitializeAzureReposGitSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeAzureReposGitSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_InitializeAzureReposGitSourceLinkUrl”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\Microsoft.SourceLink.Bitbucket.Git.targets”中的目标“_InitializeBitbucketGitSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeBitbucketGitSourceLinkUrl”。
       未指定输入文件。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\..\tools\net472\Microsoft.SourceLink.Bitbucket.Git.dll”中的“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”任务。
       任务“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_InitializeBitbucketGitSourceLinkUrl”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\Microsoft.SourceLink.Bitbucket.Git.targets”中的目标“_InitializeBitbucketGitSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeBitbucketGitSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_InitializeBitbucketGitSourceLinkUrl”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Bitbucket.Git\build\Microsoft.SourceLink.Bitbucket.Git.targets”中的目标“_InitializeBitbucketGitSourceLinkUrl”(目标“_GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_InitializeBitbucketGitSourceLinkUrl”。
       未指定输入文件。
       任务“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”
       已完成执行任务“Microsoft.SourceLink.Bitbucket.Git.GetSourceLinkUrl”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_InitializeBitbucketGitSourceLinkUrl”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\Microsoft.SourceLink.Common.targets”中的目标“_GenerateSourceLinkFile”(目标“GenerateSourceLinkFile”依赖于它):
       正在完全生成目标“_GenerateSourceLinkFile”。
       未指定输入文件。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\..\tools\net472\Microsoft.SourceLink.Common.dll”中的“Microsoft.SourceLink.Common.GenerateSourceLinkFile”任务。
       任务“Microsoft.SourceLink.Common.GenerateSourceLinkFile”
         程序集加载期间 TaskRun (Microsoft.SourceLink.Common.GenerateSourceLinkFile): Microsoft.SourceLink.Common.resources, Version=8.0.9.11501, Culture=zh-Hans, PublicKeyToken=31bf3856ad364e35 (位置: C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\tools\net472\zh-Hans\Microsoft.SourceLink.Common.resources.dll, MVID: af6eee06-2914-419d-9f5c-aa83bd20bbb6, AppDomain: [Default])
         正在更新 Source Link 文件 "obj\Debug\netstandard2.1\GameCore.sourcelink.json"。
       已完成执行任务“Microsoft.SourceLink.Common.GenerateSourceLinkFile”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_GenerateSourceLinkFile”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.SourceLink.Common\build\Microsoft.SourceLink.Common.targets”中的目标“GenerateSourceLinkFile”(目标“CoreCompile”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“GenerateSourceLinkFile”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateAssemblyInfo”；('$(GenerateAssemblyInfo)' == 'true')的计算结果为('false' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateGlobalUsings”；(@(Using->Count()) != 0)的计算结果为(0 != 0)。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets”中的目标“CoreCompile”(目标“Compile”依赖于它):
       正在完全生成目标“CoreCompile”。
       输出文件“obj\Debug\netstandard2.1\GameCore.dll”不存在。
       正在使用程序集“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\Microsoft.Build.Tasks.CodeAnalysis.dll”中的“Csc”任务。
       任务“Csc”
         C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\csc.exe /noconfig /unsafe+ /checked- /nowarn:1701,1702,1701,1702 /fullpaths /nostdlib+ /errorreport:prompt /define:TRACE;DEBUG;ROBOT;DEBUG;NETSTANDARD;NETSTANDARD2_1;NETSTANDARD1_0_OR_GREATER;NETSTANDARD1_1_OR_GREATER;NETSTANDARD1_2_OR_GREATER;NETSTANDARD1_3_OR_GREATER;NETSTANDARD1_4_OR_GREATER;NETSTANDARD1_5_OR_GREATER;NETSTANDARD1_6_OR_GREATER;NETSTANDARD2_0_OR_GREATER;NETSTANDARD2_1_OR_GREATER /highentropyva+ /reference:F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll /reference:F:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll /reference:F:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\Microsoft.Win32.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\mscorlib.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\netstandard.dll" /reference:F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.AppContext.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Buffers.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.Concurrent.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.NonGeneric.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Collections.Specialized.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.Composition.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.EventBasedAsync.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ComponentModel.TypeConverter.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Console.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Core.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Data.Common.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Data.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Contracts.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Debug.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.FileVersionInfo.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Process.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.StackTrace.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.TextWriterTraceListener.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Tools.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.TraceSource.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Diagnostics.Tracing.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Drawing.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Drawing.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Dynamic.Runtime.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.Calendars.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Globalization.Extensions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.FileSystem.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Compression.ZipFile.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.DriveInfo.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.FileSystem.Watcher.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.IsolatedStorage.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.MemoryMappedFiles.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.Pipes.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.IO.UnmanagedMemoryStream.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Expressions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Parallel.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Linq.Queryable.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Memory.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Http.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.NameResolution.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.NetworkInformation.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Ping.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Requests.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Security.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.Sockets.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebHeaderCollection.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebSockets.Client.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Net.WebSockets.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Numerics.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Numerics.Vectors.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ObjectModel.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.DispatchProxy.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.ILGeneration.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Emit.Lightweight.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Extensions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Reflection.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.Reader.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.ResourceManager.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Resources.Writer.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.CompilerServices.VisualC.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Extensions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Handles.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.InteropServices.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.InteropServices.RuntimeInformation.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Numerics.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Formatters.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Json.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Runtime.Serialization.Xml.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Claims.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Algorithms.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Csp.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Encoding.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.Primitives.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Cryptography.X509Certificates.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.Principal.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Security.SecureString.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ServiceModel.Web.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.Encoding.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.Encoding.Extensions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Text.RegularExpressions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Overlapped.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.Extensions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Tasks.Parallel.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Thread.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.ThreadPool.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Threading.Timer.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Transactions.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.ValueTuple.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Web.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Windows.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.Linq.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.ReaderWriter.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.Serialization.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XDocument.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XmlDocument.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XmlSerializer.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XPath.dll" /reference:"C:\Program Files\dotnet\packs\NETStandard.Library.Ref\2.1.0\ref\netstandard2.1\System.Xml.XPath.XDocument.dll" /reference:F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.AIModule.dll /reference:F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.AndroidJNIModule.dll /reference:F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.AnimationModule.dll /reference:F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.AudioModule.dll /reference:F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.CoreModule.dll /reference:F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.dll /reference:F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ParticleSystemModule.dll /reference:F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.PhysicsModule.dll /reference:F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.UI.dll /debug+ /debug:portable /filealign:512 /optimize- /out:obj\Debug\netstandard2.1\GameCore.dll /target:library /warnaserror- /utf8output /deterministic+ /sourcelink:obj\Debug\netstandard2.1\GameCore.sourcelink.json /langversion:8.0 /analyzerconfig:obj\Debug\netstandard2.1\GameCore.GeneratedMSBuildEditorConfig.editorconfig Ai\AiCommand.cs Ai\AiCommand\AiChase.cs Ai\AiCommand\AiGohome.cs Ai\AiCommand\AiKeepAway.cs Ai\AiCommand\AiRandMove.cs Ai\AiLogicUtility.cs Ai\AiRegister.cs Ai\AiValue\AiGetTarget.cs Ai\AiValue\AiNeedChase.cs Ai\AiValue\AiNeedKeepAway.cs Ai\AiValue\AiQuey.cs Ai\AiValue\AiSelectTarget.cs GameController.cs GameObjects\AiInfo\AiInfo.cs GameObjects\AiInfo\NpcAiData.cs GameObjects\EntityInfoDictionary.cs GameObjects\EntityKdTree.cs GameObjects\EntityManager.cs GameObjects\MovementInfo\MovementInfo.cs GameObjects\ObjectInfo\CharacterDefines.cs GameObjects\ObjectInfo\CharacterProperty.cs GameObjects\ObjectInfo\Entity_Base.cs GameObjects\ObjectInfo\Entity_Npc.cs GameObjects\ObjectInfo\Entity_NpcType.cs GameObjects\SceneSharedData\BlackBoard.cs GameObjectViews\EntityViewModelManager.cs GameObjectViews\EntityViewModel_Base.cs GameObjectViews\EntityViewModel_Npc.cs GmCommands\ClientGmStorySystem.cs GmCommands\GmCommands.cs Properties\AssemblyInfo.cs Resource\AbstractScriptBehavior.cs Resource\ResourceSystem.cs Scene\ObjectKdTree.cs Scene\SceneSystem.cs Scene\SceneSystem_Ai.cs Scene\SceneSystem_Entity.cs Story\ClientStorySystem.cs Story\Commands\GameLogicCommands.cs Story\Commands\GeneralCommands.cs Story\Commands\NpcCommands.cs Story\Commands\ObjectCommands.cs Story\Functions\GameLogicFunctions.cs Story\Functions\GeneralFunctions.cs Story\Functions\NpcFunctions.cs Story\Functions\ObjectFunctions.cs Story\UiStoryEventHandler.cs Story\UiStoryInitializer.cs UtilityForClient\Logger.cs UtilityForClient\Utility.cs /warnaserror+:NU1605
         Microsoft(R) Visual C# 编译器 版本 4.9.0-3.24121.1 (a98c90d5)
         版权所有(C) Microsoft Corporation。保留所有权利。
         CompilerServer: server - server processed compilation - d4271a5d-5991-4f2b-bf83-3e9bc62660cf
       已完成执行任务“Csc”的操作。
       由于 false 条件，已跳过任务“CallTarget”；('$(TargetsTriggeredByCompilation)' != '')计算为('' != '')。
   2:2>已完成在项目“GameCore.csproj”中生成目标“CoreCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“_TouchLastBuildWithSkipAnalyzers”；('$(_SkipAnalyzers)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_TimeStampAfterCompile”；('$(RunPostBuildEvent)'=='OnOutputUpdated' or ('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library'))的计算结果为(''=='OnOutputUpdated' or (''=='true' and 'Library'=='library'))。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterCompile”(目标“Compile”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“AfterCompile”的操作。
       由于条件的计算结果为 false，已跳过目标“_CreateAppHost”；('$(ComputeNETCoreBuildOutputFiles)' == 'true' and
                            '$(AppHostSourcePath)' != '' and
                            Exists('@(IntermediateAssembly)') and
                            Exists('$(AppHostSourcePath)'))的计算结果为('' == 'true' and
                            '' != '' and
                            Exists('obj\Debug\netstandard2.1\GameCore.dll') and
                            Exists(''))。
       由于条件的计算结果为 false，已跳过目标“_CreateComHost”；('$(ComputeNETCoreBuildOutputFiles)' == 'true' and
                            '$(ComHostIntermediatePath)' != '' and
                            Exists('@(IntermediateAssembly)') and
                            Exists('$(ComHostSourcePath)'))的计算结果为('' == 'true' and
                            '' != '' and
                            Exists('obj\Debug\netstandard2.1\GameCore.dll') and
                            Exists(''))。
       由于条件的计算结果为 false，已跳过目标“_GetIjwHostPaths”；('$(UseIJWHost)' == 'true')的计算结果为('' == 'true')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Compile”(目标“CoreBuild”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“Compile”的操作。
       由于条件的计算结果为 false，已跳过目标“DeferredValidation”；('$(SkipWorkflowValidation)' != 'true' and ('@(XamlPage)' != '' or '@(XamlAppDef)' != ''))的计算结果为('' != 'true' and ('' != '' or '' != ''))。
       由于条件的计算结果为 false，已跳过目标“ExportWindowsMDFile”；('$(ExportWinMDFile)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“UnmanagedUnregistration”；((('$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)' or '$(RegisterForComInterop)' != 'true' or '$(OutputType)' != 'library') or
                           ('$(_AssemblyTimestampBeforeCompile)' == '')) and
                          Exists('@(_UnmanagedRegistrationCache)'))的计算结果为((('' != '' or '' != 'true' or 'Library' != 'library') or
                           ('' == '')) and
                          Exists('obj\GameCore.csproj.UnmanagedRegistration.cache'))。
       由于条件的计算结果为 false，已跳过目标“GenerateSerializationAssemblies”；('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))的计算结果为('Off' == 'On' or (''!='' and 'Off' == 'Auto'))。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GenerateSatelliteAssemblyInputs”(目标“CreateSatelliteAssemblies”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ManifestResourceWithCulture)'!='' and '%(ManifestResourceWithCulture.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
       由于 false 条件，已跳过任务“Warning”；('@(ManifestNonResxWithCultureOnDisk)'!='' and '%(ManifestNonResxWithCultureOnDisk.EmittedForCompatibilityOnly)'=='')计算为(''!='' and ''=='')。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_GenerateSatelliteAssemblyInputs”的操作。
       由于条件的计算结果为 false，已跳过目标“ComputeIntermediateSatelliteAssemblies”；(@(EmbeddedResource->'%(WithCulture)') != '')的计算结果为( != '')。
       由于条件的计算结果为 false，已跳过目标“GenerateSatelliteAssemblies”；('@(_SatelliteAssemblyResourceInputs)' != '' and '$(GenerateSatelliteAssembliesForCore)' != 'true')的计算结果为('' != '' and '' != 'true')。
       由于条件的计算结果为 false，已跳过目标“CoreGenerateSatelliteAssemblies”；('@(_SatelliteAssemblyResourceInputs)' != ''  and '$(GenerateSatelliteAssembliesForCore)' == 'true' )的计算结果为('' != ''  and '' == 'true' )。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CreateSatelliteAssemblies”(目标“CoreBuild”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“CreateSatelliteAssemblies”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateManifests”；('$(GenerateClickOnceManifests)'=='true' or '@(NativeReference)'!='' or '@(ResolvedIsolatedComModules)'!='' or '$(GenerateAppxManifest)' == 'true')的计算结果为(''=='true' or ''!='' or ''!='' or '' == 'true')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetPathWithTargetPlatformMoniker”(目标“GetTargetPath”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“GetTargetPathWithTargetPlatformMoniker”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetTargetPath”(目标“CoreBuild”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“GetTargetPath”的操作。
       由于条件的计算结果为 false，已跳过目标“ComputeIntermediateSatelliteAssemblies”；(@(EmbeddedResource->'%(WithCulture)') != '')的计算结果为( != '')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CopyFilesMarkedCopyLocal”(目标“CopyFilesToOutputDirectory”依赖于它):
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Copy”任务。
       任务“Copy”
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\LitJson.dll”复制到“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\LitJson.dll”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.AndroidJNIModule.dll”复制到“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\UnityEngine.AndroidJNIModule.dll”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.dll”复制到“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\Dsl.dll”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.dll”复制到“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\StoryScript.dll”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.AIModule.dll”复制到“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\UnityEngine.AIModule.dll”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.dll”复制到“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\Common.dll”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.AnimationModule.dll”复制到“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\UnityEngine.AnimationModule.dll”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.AudioModule.dll”复制到“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\UnityEngine.AudioModule.dll”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.CoreModule.dll”复制到“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\UnityEngine.CoreModule.dll”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.dll”复制到“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\UnityEngine.dll”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.ParticleSystemModule.dll”复制到“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\UnityEngine.ParticleSystemModule.dll”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\modules\UnityEngine.PhysicsModule.dll”复制到“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\UnityEngine.PhysicsModule.dll”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\UnityEngine.UI.dll”复制到“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\UnityEngine.UI.dll”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\bin\Debug\netstandard2.1\Common.pdb”复制到“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\Common.pdb”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\bin\Debug\netstandard2.1\StoryScript.pdb”复制到“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\StoryScript.pdb”。
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\ExternLibrary\Dsl.pdb”复制到“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\Dsl.pdb”。
       已完成执行任务“Copy”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“Touch”任务。
       任务“Touch”
         正在创建“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\GameCore.csproj.Up2Date”，因为已指定“AlwaysCreate”。
         正在对“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\GameCore.csproj.Up2Date”执行 Touch 任务。
       已完成执行任务“Touch”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_CopyFilesMarkedCopyLocal”的操作。
       已跳过目标“AssignTargetPaths”。以前的生成已成功。
       已跳过目标“AssignProjectConfiguration”。以前的生成已成功。
       已跳过目标“_SplitProjectReferencesByFileExistence”。以前的生成已成功。
       已跳过目标“_GetProjectReferenceTargetFrameworkProperties”。以前的生成已成功。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”(目标“GetCopyToOutputDirectoryItems”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets”中的目标“GetCopyToOutputDirectoryXamlAppDefs”(目标“GetCopyToOutputDirectoryItems”依赖于它):
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“GetCopyToOutputDirectoryXamlAppDefs”的操作。
       由于条件的计算结果为 false，已跳过目标“AddDepsJsonAndRuntimeConfigToCopyItemsForReferencingProjects”；('$(HasRuntimeOutput)' == 'true')的计算结果为('' == 'true')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“GetCopyToOutputDirectoryItems”(目标“_CopySourceItemsToOutputDirectory”依赖于它):
       任务“CallTarget”
       已跳过目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”。以前的生成已成功。
       已跳过目标“_AddOutputPathToGlobalPropertiesToRemove”。以前的生成已成功。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences”(目标“GetCopyToOutputDirectoryItems”依赖于它):
       任务“MSBuild”
         全局属性:
           Configuration=Debug
           Platform=AnyCPU
         移除项目“..\..\Infrastructure\Common\Common.csproj”的属性:
           TargetFramework
           RuntimeIdentifier
           SelfContained
         移除项目“..\..\Infrastructure\StoryScript\StoryScript.csproj”的属性:
           TargetFramework
           RuntimeIdentifier
           SelfContained
   2:2>项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”(2:2)正在节点 1 上生成“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(4:12) (GetCopyToOutputDirectoryItems 个目标)。
  4:12>已跳过目标“GetCopyToOutputDirectoryItems”。以前的生成已成功。
  4:12>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\StoryScript\StoryScript.csproj”(GetCopyToOutputDirectoryItems 个目标)的操作。
   2:2>项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”(2:2)正在节点 2 上生成“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(3:7) (GetCopyToOutputDirectoryItems 个目标)。
   3:7>已跳过目标“GetCopyToOutputDirectoryItems”。以前的生成已成功。
   3:7>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\Infrastructure\Common\Common.csproj”(GetCopyToOutputDirectoryItems 个目标)的操作。
   2:2>已完成执行任务“MSBuild”的操作。
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences”的操作。
       已完成执行任务“CallTarget”的操作。
       任务“CallTarget”
       已跳过目标“AssignTargetPaths”。以前的生成已成功。
       已跳过目标“_PopulateCommonStateForGetCopyToOutputDirectoryItems”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“AddDepsJsonAndRuntimeConfigToCopyItemsForReferencingProjects”；('$(HasRuntimeOutput)' == 'true')的计算结果为('' == 'true')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_GetCopyToOutputDirectoryItemsFromThisProject”(目标“GetCopyToOutputDirectoryItems”依赖于它):
       任务“AssignTargetPath”
       已完成执行任务“AssignTargetPath”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_GetCopyToOutputDirectoryItemsFromThisProject”的操作。
       已完成执行任务“CallTarget”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“GetCopyToOutputDirectoryItems”的操作。
       由于条件的计算结果为 false，已跳过目标“_CopyOutOfDateSourceItemsToOutputDirectory”；( '@(_SourceItemsToCopyToOutputDirectory)' != '' )的计算结果为( '' != '' )。
       由于条件的计算结果为 false，已跳过目标“_CopyOutOfDateSourceItemsToOutputDirectoryAlways”；( '@(_SourceItemsToCopyToOutputDirectoryAlways)' != '' )的计算结果为( '' != '' )。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CopySourceItemsToOutputDirectory”(目标“CopyFilesToOutputDirectory”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“_CopySourceItemsToOutputDirectory”的操作。
       由于条件的计算结果为 false，已跳过目标“_CopyAppConfigFile”；( '@(AppConfigWithTargetPath)' != '' )的计算结果为( '' != '' )。
       由于条件的计算结果为 false，已跳过目标“_CopyManifestFiles”；( '$(_DeploymentCopyApplicationManifest)'=='true' or '$(GenerateClickOnceManifests)'=='true' )的计算结果为( ''=='true' or ''=='true' )。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CheckForCompileOutputs”(目标“CopyFilesToOutputDirectory”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“_CheckForCompileOutputs”的操作。
       由于条件的计算结果为 false，已跳过目标“_SGenCheckForOutputs”；('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))的计算结果为('Off' == 'On' or (''!='' and 'Off' == 'Auto'))。
       已跳过目标“_DefaultMicrosoftNETPlatformLibrary”。以前的生成已成功。
       已跳过目标“_HandlePackageFileConflicts”。以前的生成已成功。
       已跳过目标“ResolveAssemblyReferences”。以前的生成已成功。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“_ComputeReferenceAssemblies”(目标“GenerateBuildDependencyFile”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“_ComputeReferenceAssemblies”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“_ComputeUserRuntimeAssemblies”(目标“GenerateBuildDependencyFile”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“_ComputeUserRuntimeAssemblies”的操作。
       由于条件的计算结果为 false，已跳过目标“ResolveRuntimePackAssets”；('@(RuntimePack)' != '')的计算结果为('' != '')。
       已跳过目标“_ComputePackageReferencePublish”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“ComputeDependencyFileCompilerOptions”；('$(PreserveCompilationContext)' == 'true')的计算结果为('' == 'true')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets”中的目标“GenerateBuildDependencyFile”(目标“CopyFilesToOutputDirectory”依赖于它):
       正在完全生成目标“GenerateBuildDependencyFile”。
       输出文件“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\GameCore.deps.json”不存在。
       正在使用程序集“C:\Program Files\dotnet\sdk\8.0.204\Sdks\Microsoft.NET.Sdk\targets\..\tools\net472\Microsoft.NET.Build.Tasks.dll”中的“GenerateDepsFile”任务。
       任务“GenerateDepsFile”
       已完成执行任务“GenerateDepsFile”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“GenerateBuildDependencyFile”的操作。
       由于条件的计算结果为 false，已跳过目标“GenerateBuildRuntimeConfigurationFiles”；( '$(GenerateRuntimeConfigurationFiles)' == 'true')的计算结果为( '' == 'true')。
       由于条件的计算结果为 false，已跳过目标“GenerateShimsAssets”；('$(PackAsTool)' == 'true' and $(PackAsToolShimRuntimeIdentifiers) != '' )的计算结果为('' == 'true' and  != '' )。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CopyFilesToOutputDirectory”(目标“PrepareForRun”依赖于它):
       任务“Copy”
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\GameCore.dll”复制到“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\GameCore.dll”。
       已完成执行任务“Copy”的操作。
       由于 false 条件，已跳过任务“CopyRefAssembly”；('$(ProduceReferenceAssembly)' == 'true' and '$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true')计算为('false' == 'true' and 'true' == 'true' and '' != 'true')。
       任务“Message”
         GameCore -> F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\GameCore.dll
       已完成执行任务“Message”的操作。
       由于 false 条件，已跳过任务“Copy”；('@(AddModules)' != '')计算为('' != '')。
       由于 false 条件，已跳过任务“Copy”；('$(_SGenDllCreated)'=='true')计算为('false'=='true')。
       任务“Copy”
         正在将文件从“F:\GitHub\GameDemo\GameLibrary\App\GameCore\obj\Debug\netstandard2.1\GameCore.pdb”复制到“F:\GitHub\GameDemo\GameLibrary\App\GameCore\bin\Debug\netstandard2.1\GameCore.pdb”。
       已完成执行任务“Copy”的操作。
       由于 false 条件，已跳过任务“Copy”；('$(_DocumentationFileProduced)'=='true' and '$(CopyDocumentationFileToOutputDirectory)'=='true')计算为('false'=='true' and 'true'=='true')。
       由于 false 条件，已跳过任务“Copy”；('@(IntermediateSatelliteAssembliesWithTargetPath)' != '')计算为('' != '')。
       由于 false 条件，已跳过任务“Copy”；('@(ReferenceComWrappersToCopyLocal)' != '' or '@(ResolvedIsolatedComModules)' != '' or '@(_DeploymentLooseManifestFile)' != '' or '@(NativeReferenceFile)' != '' )计算为('' != '' or '' != '' or '' != '' or '' != '' )。
       由于 false 条件，已跳过任务“Copy”；('$(SkipCopyWinMDArtifact)' != 'true' and '@(WinMDExpArtifacts)' != '')计算为('' != 'true' and '' != '')。
       由于 false 条件，已跳过任务“Message”；('$(SkipCopyWinMDArtifact)' != 'true' and '$(_WindowsMetadataOutputPath)' != '')计算为('' != 'true' and '' != '')。
   2:2>已完成在项目“GameCore.csproj”中生成目标“CopyFilesToOutputDirectory”的操作。
       由于条件的计算结果为 false，已跳过目标“_CopyReferenceOnlyAssembliesForBuild”；('$(PreserveCompilationReferences)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“RunCodeAnalysis”；('$(RunCodeAnalysisOnThisProject)'=='true')的计算结果为(''=='true')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“PrepareForRun”(目标“CoreBuild”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“PrepareForRun”的操作。
       由于条件的计算结果为 false，已跳过目标“UnmanagedRegistration”；('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library')的计算结果为(''=='true' and 'Library'=='library')。
       已跳过目标“_CheckForCompileOutputs”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“_SGenCheckForOutputs”；('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))的计算结果为('Off' == 'On' or (''!='' and 'Off' == 'Auto'))。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“_CleanGetCurrentAndPriorFileWrites”(目标“IncrementalClean”依赖于它):
       任务“ReadLinesFromFile”
       已完成执行任务“ReadLinesFromFile”的操作。
       正在使用程序集“Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a”中的“ConvertToAbsolutePath”任务。
       任务“ConvertToAbsolutePath”
       已完成执行任务“ConvertToAbsolutePath”的操作。
       任务“FindUnderPath”
         比较路径为“F:\GitHub\GameDemo\GameLibrary\App\GameCore”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“bin\Debug\netstandard2.1\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“obj\Debug\netstandard2.1\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“RemoveDuplicates”
       已完成执行任务“RemoveDuplicates”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_CleanGetCurrentAndPriorFileWrites”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“IncrementalClean”(目标“CoreBuild”依赖于它):
       任务“FindUnderPath”
         比较路径为“bin\Debug\netstandard2.1\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“FindUnderPath”
         比较路径为“obj\Debug\netstandard2.1\”。
       已完成执行任务“FindUnderPath”的操作。
       任务“Delete”
       已完成执行任务“Delete”的操作。
       任务“RemoveDuplicates”
       已完成执行任务“RemoveDuplicates”的操作。
       任务“WriteLinesToFile”
       已完成执行任务“WriteLinesToFile”的操作。
   2:2>已完成在项目“GameCore.csproj”中生成目标“IncrementalClean”的操作。
       由于条件的计算结果为 false，已跳过目标“PostBuildEvent”；('$(PostBuildEvent)' != '' and ('$(RunPostBuildEvent)' != 'OnOutputUpdated' or '$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)'))的计算结果为('' != '' and ('' != 'OnOutputUpdated' or '' != ''))。
       已跳过目标“GenerateBuildDependencyFile”。以前的生成已成功。
       由于条件的计算结果为 false，已跳过目标“GenerateBuildRuntimeConfigurationFiles”；( '$(GenerateRuntimeConfigurationFiles)' == 'true')的计算结果为( '' == 'true')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“CoreBuild”(目标“Build”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“CoreBuild”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterBuild”(目标“Build”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“AfterBuild”的操作。
       由于条件的计算结果为 false，已跳过目标“_CheckBrowserWorkloadNeededButNotAvailable”；('$(RuntimeIdentifier)' == 'browser-wasm' and '$(_BrowserWorkloadDisabled)' != 'true' and '$(WasmNativeWorkloadAvailable)' != 'true')的计算结果为('' == 'browser-wasm' and '' != 'true' and '' != 'true')。
       由于条件的计算结果为 false，已跳过目标“_ErrorWorkloadDisabledForTFMLessThan6”；('$(_BrowserWorkloadNotSupportedForTFM)' == 'true')的计算结果为('' == 'true')。
       由于条件的计算结果为 false，已跳过目标“_ErrorDualWasmThreadPropsOn7”；('$(TargetsNet7)' == 'true' and '$(RuntimeIdentifier)' == 'browser-wasm' and
           '$(BrowserWorkloadDisabled)' != 'true' and '$(WasmEnableThreads)' == 'true' and '$(WasmEnablePerfTrace)' == 'true')的计算结果为('' == 'true' and '' == 'browser-wasm' and
           '' != 'true' and '' == 'true' and '' == 'true')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Build”(目标“Rebuild”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“Build”的操作。
       由于条件的计算结果为 false，已跳过目标“_PackAsBuildAfterTarget”；('$(GeneratePackageOnBuild)' == 'true' AND '$(IsInnerBuild)' != 'true')的计算结果为('false' == 'true' AND '' != 'true')。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\dotnet\sdk\8.0.204\Containers\build\Microsoft.NET.Build.Containers.targets”中的目标“_CheckContainersPackage”(目标“Rebuild”依赖于它):
       由于 false 条件，已跳过任务“Warning”；('@(ContainersPackage)' != '')计算为('' != '')。
   2:2>已完成在项目“GameCore.csproj”中生成目标“_CheckContainersPackage”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“AfterRebuild”(目标“Rebuild”依赖于它):
   2:2>已完成在项目“GameCore.csproj”中生成目标“AfterRebuild”的操作。
   2:2>来自项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”的文件“C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Microsoft.Common.CurrentVersion.targets”中的目标“Rebuild”(入口点):
   2:2>已完成在项目“GameCore.csproj”中生成目标“Rebuild”的操作。
   2:2>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\App\GameCore\GameCore.csproj”(Rebuild 个目标)的操作。
     1>已完成执行任务“MSBuild”的操作。
     1>已完成在项目“GameLibrary.sln”中生成目标“Rebuild”的操作。
     1>已完成生成项目“F:\GitHub\GameDemo\GameLibrary\GameLibrary.sln”(clean;rebuild 个目标)的操作。

已成功生成。
    0 个警告
    0 个错误

已用时间 00:00:04.35
