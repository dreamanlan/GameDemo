//========================================================================================================================================================================================================
//此文档由DocGenerator根据storydoc.dsl生成，请勿手动修改！！！
//========================================================================================================================================================================================================

一、我们的剧情系统脚本与技能系统使用同一语法的DSL语言（解析器源码在https://github.com/dreamanlan/DSL）。

二、DSL语法元素（本部分可跳过不看）
  
	DSL语言的语句都以;结束，这可能是最有可能写错的地方，在实际使用时一定要注意，任何语句结束一定要写上;号。
  
	DSL语言在语法层面都是由语句构成，语句由函数级联而成，最后加一个分号表示语句结束：
  
  语句 ::= ｛ 函数 ｝;
  函数 ::= 函数调用 \{ 语句列表 \}
  
  函数调用 ::= 函数名 ( 函数参数表 )
  函数调用 ::= 函数调用 ( 函数参数表 )
  
  对语句，函数表为可选，亦即单独一个分号也构成一个语句。
  对函数，函数调用、语句部分以及函数调用的函数名部分都是可选的。如下形式都是合法的函数语法：
  
  (a,b,c,d)
  
  或
  
  (a,b,c,d)
	{
	  cmd1();
	  cmd2();
  }
  
  或
  
	{
	  cmd1();
	  cmd2();
  }
  
  函数调用可以级联，即一个函数调用返回一个函数，然后再调用：
  
	getSomething()(a,b,c,d);
  
  包含语句的函数不能直接用于构成函数调用，如下语法是合法的语法，但不是函数调用，而是语句：
  
	func(a,b)
	{
	  cmd1();
	  cmd2();
  }(e,f,g);
  
  这样的语法实际上被解析成语句的第一个函数与第二个函数，第二个函数是一个仅由函数参数表构成的函数。
  
  另外一种函数调用的变体是表达式语法：
  
	a + b 等价于 +(a,b)
  
	DSL语言支持三种形式的注释：
  
  /**/
  //
  #
  
  后两种是单行注释，第一种是与c语言相同的块注释。
  
	DSL语言里的字符串可以用单引号与双引号括起来。不带空格的字符串也可省略引号。目前true/false也被解释为字符串。可以认为DSL语言只有字符串与浮点数2种类型。
  函数名也是字符串，所以也可以是用引号括起来的。
  
三、用于剧情的DSL

  剧情脚本语法如下：
  
	story(main)
	{
	  local
	  {
	      @var1(0);
	      @var2(1);
	  };
	  onmessage("start")
	  {
	      
	  };
	  onmessage("allnpckilled")
	  {
	    
	  };
	};
  
  目前的实现，一个场景的story总是从main开始执行。story的名称在场景内唯一即可。一个story由局部变量定义与多个消息处理构成，即上面的onmessage语句。onmessage语句是由onmessage函数+分号构成。
	onmessage函数的参数表共同构成消息处理的消息id，多个参数会用:连接成一个字符串构成消息id，比如：
  
	onmessage("npckilled",12)
	{
	};
  
  这个消息处理的实际消息id是“npckilled:12”，在我们的游戏系统里触发消息时实际发送的消息ID就是这个。上面的写法与下面写法是完全等价的：
  
	onmessage("npckilled:12")
	{
	};
  
  消息id都是在story解析时就能确定的常量value（所以这部分不能出现任何变量）。
  
	story支持局部变量与全局变量，有一些全局变量将来会由游戏系统定义。局部变量命名必须是@局部变量名，全局变量命名必须是@@全局变量名。除@@变名的全局变量处，story还提供一种动
  态key/value方式的类全局变量，通过propget/propset来读写（它们也能用于全局变量与局部变量读写）。
  
  局部变量可以在story的local部分定义并指定一个初始value（这里指定的value必须是常量）。全局变量与局部变量都可以在消息处理里直接通过赋value产生新的变量，没有赋value的变量直接读取将得到未知value，所以一定要
  保证变量地读取前有赋value，对局部变量，最好是在local里定义。
  
  消息在触发时可以带有多个参数，在消息处理里，这些参数可以通过 $+索引 来访问，$0代表第一个参数，$1代表第二个参数，以此类推。
  
  消息处理也可以通过args语法来绑定参数到变量：
  
	onmessage("npckilled",12)args(@objId,@leftCt)
	{
	};
  
  上面写法相当于在消息处理的开头加上(变量与参数按顺序匹配)：
  
  @objId=$0;
  @leftCt=$1;
  
  消息处理由具体的处理语句构成。语句部分有三大类元素，一类是通用的类似传统程序语言里的语句，一类是特定的用于实现story逻辑的命令，还有一类是用于变量运算的函数。
  
  剧情命令与函数利用dotnet反射机制调用dotnet对象成员，此时可以采用与c#相似的写法：
  
	obj.property = val;
	val = obj.property;
	obj.method(arg1,arg2,...);
	val = obj.method(arg1,arg2,...);
  
  剧情脚本支持json的literal写法：
  
  [1,3,4,5];
	{'a' => 1, 'b' => 2, 'c' => 3};
  
  注：在dsl用于UI脚本时，每一个UI对应一个脚本，为了方便配置，不在dsl里出现UI的名字，消息处理采用下述写法：
	onnamespacedmessage(msgId)
	{
	};
  对于名为ns的UI，上述处理等价于（也就是说这是一种带隐藏名字空间的机制）：
	onmessage(ns,msgId)
	{
	};
  
  
四、剧情语句API

1.assign(@var,value);

作用：
  赋值操作，其中value可以是常量或者是一个表达式，如果是表达式最好括起来。在后续API，所有value也是这样。

2.@var=value;

作用：
  赋值操作，其中value可以是常量或者是一个表达式，如果是表达式最好括起来。在后续API，所有value也是这样。

3.inc(@var);
inc(@var,value);

作用：
  自增操作。

4.dec(@var);
dec(@var,value);

作用：
  自减操作。

5.propset(value,value);

作用：
  第一个value必须是一个字符串value，表示变量名(对于局部变量与全局变量，名字必须包括特殊的@与@@前缀)。

6.foreach(value1,value2,value3,...)
{
  cmd1($$);
  cmd2($$);
};

作用：
  对foreach部分指硋alue膙alue，依次执行命令列表部分，在命令中通过$$来获取当前遍历执行的value。

7.loop(value)
{
  cmd1($$);
  cmd2($$);
};

作用：
  执行命令列表由value指定的次数，在命令中通过$$来获取当前第几次执行，从0开始。

8.while(value)
{
  cmd1();
  cmd2();    
};

作用：
  如果value不为0就循环执行命令列表。

9.if(value)
{
  cmd1();
  cmd2();
};
  if(value)
  {
    cmd1();
    cmd2();
  }
  else
  {
    cmd3();
    cmd4();
  };
  if(value1)
  {
    cmd1();
    cmd2();
  }
  elseif(value2)
  {
    cmd3();
    cmd4();
  }
  elseif(valuen)
  {
    cmd5();
    cmd6();
  }
  else
  {
    cmd7();
    cmd8();
  }

作用：
  如果value不为0则执行cmd1与cmd2命令列表，否则如果有else则执行cmd3与cmd4命令列表。

10.wait(毫秒数)[if(条件表达式)];

作用：
  暂停当前的消息处理指定时间。注意，一个消息处理如果没有wait或sleep调用，会一直执行直到结束。因此如果有大的循环处理，里面应该调用sleep(0);来
  释放控制权以允许其它逻辑正常执行。if部分为可选，用于在条件不满足时提前结束等待。

11.sleep(毫秒数)[if(条件表达式)];

作用：
  暂停当前的消息处理指定时间。注意，一个消息处理如果没有wait或sleep调用，会一直执行直到结束。因此如果有大的循环处理，里面应该调用sleep(0);来
  释放控制权以允许其它逻辑正常执行。if部分为可选，用于在条件不满足时提前结束等待。

12.storywait(毫秒数)[if(条件表达式)];

作用：
  暂停当前的消息处理指定时间。注意，一个消息处理如果没有wait或sleep调用，会一直执行直到结束。因此如果有大的循环处理，里面应该调用sleep(0);来
  释放控制权以允许其它逻辑正常执行。if部分为可选，用于在条件不满足时提前结束等待。如果取消按钮按下，则等待直接在下一tick结束

13.storysleep(毫秒数)[if(条件表达式)];

作用：
  暂停当前的消息处理指定时间。注意，一个消息处理如果没有wait或sleep调用，会一直执行直到结束。因此如果有大的循环处理，里面应该调用sleep(0);来
  释放控制权以允许其它逻辑正常执行。if部分为可选，用于在条件不满足时提前结束等待。如果取消按钮按下，则等待直接在下一tick结束

14.log(format，参数表);

作用：
  按format指定的格式格式化参数表各个value，然后输出拼接好的字符串到调试日志。

15.localmessage(消息ID，参数表);

作用：
  触发一个本story内的消息。注意消息ID是一个字符串，对应onmessage的参数部分所描蕍alue南D，onmessage有多个参数则用:把各参数拼接成消息ID。这里
  的参数表的各个value在onmessage处理里可以通过$0,$1,...来访问。

16.storylocalmessage(消息ID，参数表);

作用：
  触发一个本story内的消息。注意消息ID是一个字符串，对应onmessage的参数部分所描蕍alue南D，onmessage有多个参数则用:把各参数拼接成消息ID。这里
  的参数表的各个value在onmessage处理里可以通过$0,$1,...来访问。如果剧情跳过按钮被按下了，则不触发消息。

17.terminate();

作用：
  结束当前story的执行。

18.looplist(value)
{
  	cmd1();
  	cmd2();
};

作用：
  对value指定的list的各个value遍历循环执行命令列表，在命令中通过$$来获得当前遍历到的list元素。

19.listset(list,index,value);

作用：
  修改指定list的index元素value为value。

20.listadd(list,value);

作用：
  给list添加值为value的元素。

21.listremove(list,value);

作用：
  删除list里值为value的元素。

22.listinsert(list,index,value);

作用：
  往list里index位置插入值为value的元素。

23.listremoveat(list,index);

作用：
  删除list里索引为index的元素。

24.listclear(list);

作用：
  清空list。

25.clearmessage(msgid1,msgid2,...);

作用：
  清空指定的消息队列，如果不指定参数刚清空所有消息队列。

26.dotnetexec(obj/type,method,arg1,arg2,...);

作用：
  调用指定类/对象的方法。

27.dotnetset(obj/type,property,arg1,arg2,...);

作用：
  设置指定类/对象的特性/字段。

28.writealllines(file,lines);

作用：
  写文件。

29.writefile(file,txt);

作用：
  写文件。

30.hashtableadd(hashtable,key,value);

作用：
  往哈希表里添加元素。

31.hashtableset(hashtable,key,value);

作用：
  往哈希表里添加或修改元素。

32.hashtableremove(hashtable,key);

作用：
  移除哈希表里的元素。

33.hashtableclear(hashtable);

作用：
  清空哈希表。

34.waitlocalmessage(msgid1,msgid2,...)[set(var,val)timeoutset(timeout,var,val)];

作用：
waitlocalmessage等待当前story的指定消息之一触发。(var部分用字符串指定变量名，这样允许一个变量或表达式的value作为变量)

35.waitlocalmessagehandler(msgid1,msgid2,...)[set(var,val)timeoutset(timeout,var,val)];

作用：
waitlocalmessagehandler等待当前story的指定消息处理全部执行完毕。(var部分用字符串指定变量名，这样允许一个变量或表达式的value作为变量)

36.storywaitlocalmessage(msgid1,msgid2,...)[set(var,val)timeoutset(timeout,var,val)];

作用：
storywaitlocalmessage等待当前story的指定消息之一触发。(var部分用字符串指定变量名，这样允许一个变量或表达式的value作为变量)。如果剧情取消按钮被按下，则不再等待按超时处理

37.storywaitlocalmessagehandler(msgid1,msgid2,...)[set(var,val)timeoutset(timeout,var,val)];

作用：
storywaitlocalmessagehandler等待当前story的指定消息处理全部执行完毕。(var部分用字符串指定变量名，这样允许一个变量或表达式的value作为变量)。如果剧情取消按钮被按下，则不再等待按超时处理

38.pauselocalmessagehandler(msgid,msgid,...);

作用：
  暂停同一story里的指定的消息处理。

39.resumelocalmessagehandler(msgid,msgid,...);

作用：
  恢复同一story里的指定的消息处理。

40.pauselocalnamespacedmessagehandler(msgid,msgid,...);

作用：
  暂停同一story里的指定的名字空间里的消息处理。

41.resumelocalnamespacedmessagehandler(msgid,msgid,...);

作用：
  恢复同一story里的指定的名字空间里的消息处理。

42.pause();

作用：
  暂停当前story

五、运算

1、数字加     +

2、数字减     -

3、数字乘     *

4、数字比较   >=

5、数字比较   >

6、数字比较   ==

7、数字比较   <=

8、数字比较   <

9、逻辑与     &&

10、逻辑或    ||

11、逻辑非    !

12、数学除    /

13、数学取模  %

14.abs(x);

15.floor(x);

16.ceiling(x);

17.round(x);

18.pow(x,y); or pow(x);

19.log(x,y); or log(x);

20.sqrt(x);

21.sin(x);

22.cos(x);

23.sinh(x);

24.cosh(x);

25.min(x,y,z,...);

26.max(x,y,z,...);

六、内部函数

1.vector2(x,y);

作用：
  构造一个vector2对象。

2.vector3(x,y,z);

作用：
  构造一个vector3对象。

3.vector4(x,y,z,w);

作用：
  构造一个vector4对象。

4.quaternion(x,y,z,w);

作用：
  构造一个quaternion对象。

5.eular(x,y,z);

作用：
  基于欧拉角构造一个quaternion对象。

6.time();

作用：
  获取当前时间（单位：毫秒）

7.format(format_string，参数列表);

作用：
  按格式化串格式化指定的参数列表，构成一个字符串。

8.propget(value[,defaultvalue]);

作用：
value必须是个字符串value，表示要读取value的变量名。此函数用于动态获取变量value。

9.intlist("1 2 3 4 5");

作用：
  从字符串里读取数字列表，分隔符可以是' '、','、'|'之一。返回value用于looplist语句遍历。

10.stringlist("a b c d e");

作用：
  从字符串里读取字符串列表，分隔符可以是' '、','、'|'之一。返回value用于looplist语句遍历。

11.vector2list("v1x v1y v2x v2y");

作用：
  从字符串里读取vector2列表，分隔符可以是' '、','、'|'之一。返回value用于looplist语句遍历。

12.vector3list("v1x v1y v1z v2x v2y v2z");

作用：
  从字符串里读取vector3列表，分隔符可以是' '、','、'|'之一。返回value用于looplist语句遍历。

13.list(1,2,3,4,5);

作用：
  由参数表构成一个列表。返回value用于looplist语句遍历。

14.substring(字符串,start[,length]);

作用：
  获取字符串子串。

15.rndint(min,max);

作用：
  获得一个介于[min,max)间的随机整数。

16.rndfloat();

作用：
  获得一个0~1之前的随机浮点数。

17.floatlist("1.0 2.0 3.0 4.0 5.0");

作用：
  从字符串里读取数字列表，分隔符可以是' '、','、'|'之一。返回value用于looplist语句遍历。

18.用法:
rndfromlist(intlist("1 2 3 4 5 6 7 8")[,defaultvalue]);

作用：
  从指定的list里随机取一个value。

19.listget(list,index[,defaultvalue]);

作用：
  从指定的list取第index个元素。

20.listsize(list);

作用：
  取指定list的元素个数。

21.vector2dist(vector2(1,2),vector2(3,4));

作用：
  计算2点距离。

22.vector3dist(vector3(1,2,3),vector3(4,5,6));

作用：
  计算2点距离（2D距离）。

23.vector2to3(vector2(1,2));

作用：
  将vector2转换成vector3，yvalue部分置0。

24.vector3to2(vector3(1,2,3));

作用：
  将vector3转换成vector2，丢掉yvalue部分。

25.isnull(x);

作用：
  判断指定value是否为空。

26.str2int(str);

作用：
  将字符串转成整数。

27.str2float(str);

作用：
  将字符串转成浮点数。

28.dotnetcall(obj/type,method,arg1,arg2,...);

作用：
  调用指定类/对象的方法，并取得返回value。

29.dotnetget(obj/type,property,arg1,arg2,...);

作用：
  获取指定类/对象的特性/字段的value。

30.changetype(value,obj/type);

作用：
  改变value的类型，返回新类型的value。(type可以是sbyte、byte、short、ushort、int、uint、long、ulong、float、double、string、bool等)

31.parseenum(obj/type, "enumvalue");

作用：
  按指定枚举类型解析字符串，返回一个枚举值。

32.readalllines(file);

作用：
  读文件所有行，返回文件行内容列表。

33.readfile(file);

作用：
  读文件，返回文件内容字符串。

34.tojson(hashtable);

作用：
  将哈希表转为json字符串。

35.fromjson(str);

作用：
  解析指定json字符串，返回哈希表或数组。

36.hashtable('a' => 1, 'b' => 2, 'c' => 3);
  或
{'a' => 1, 'b' => 2, 'c' => 3};

作用：
  构造一个哈希表。

37.hashtableget(hashtable,key[,defval]);

作用：
  获取哈希表指定名称或索引的value。（可选指定缺省value）

38.hashtablesize(hashtable);

作用：
  获取指定哈希表的元素个数。

39.hashtablekeys(hashtable);

作用：
  获取指定哈希表的key列表，结果可用于looplist语句。

40.hashtablevalues(hashtable);

作用：
  获取指定哈希表的value列表，结果可用于looplist语句。

41.dictformat(dictId,arg1,arg2,...);

作用：
  按譾alue浜胖付ǖ母袷交袷交址?

42.dictget(dictId);

作用：
  读取譾alue浜哦杂Φ淖址?

43.dictparse(str_from_server);

作用：
  对服务器传回使用了譾alue涞淖址凶value涮婊弧?

44.gettype("System.Console");

作用：
  获取指定名称的Class的Type。
  静态类名写法：TopNamespace.SubNameSpace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089

45.rndvector3(center,radius);

作用：
  取指定点周围的随机点。

46.rndvector2(center,radius);

作用：
  取指定点周围的随机点。

七、剧情函数

1.npcidlist();

作用：
  获取NPC id列表，结果用于looplist语句遍历。

2.objid2unitid(objid);

作用：
  取得指定objid对象的unitid。

3.unitid2objid(unitid);

作用：
  取得指定unitid对象的objid，仅对npc有效。

4.getposition(objid[, world_or_local]);

作用：
  取得指定objid对象的位置，可用于需要位置的函数与命令。

5.getcamp(objid);

作用：
  取得指定objid对象的阵营，用于判断敌我关系。

6.isenemy(camp1,camp2);

作用：
  判断2个阵营是否敌对。

7.isfriend(camp1,camp2);

作用：
  判断2个阵营是否友好。

8.getpositionx(objid[, world_or_local]);

作用：
  取得指定objid对象的位置，可用于需要位置的函数与命令。

9.getpositiony(objid[, world_or_local]);

作用：
  取得指定objid对象的位置，可用于需要位置的函数与命令。

10.getpositionz(objid[, world_or_local]);

作用：
  取得指定objid对象的位置，可用于需要位置的函数与命令。

11.getrotation(objid[, world_or_local]);

作用：
  取得指定objid对象的旋转（欧拉角）。

12.getrotationx(objid[, world_or_local]);

作用：
  取得指定objid对象的旋转（欧拉角）。

13.getrotationy(objid[, world_or_local]);

作用：
  取得指定objid对象的旋转（欧拉角）。

14.getrotationz(objid[, world_or_local]);

作用：
  取得指定objid对象的旋转（欧拉角）。

15.getscale(objid);

作用：
  取得指定objid对象的缩放。

16.getscalex(objid);

作用：
  取得指定objid对象的缩放。

17.getscaley(objid);

作用：
  取得指定objid对象的缩放。

18.getscalez(objid);

作用：
  取得指定objid对象的缩放。

19.gethp(objid);

作用：
  获取指定对象的hp

20.getmaxhp(objid);

作用：
  获取指定对象的maxhp属性value。

21.calcdir(objid,targetid);

作用：
  计算从指定对象面向目标对象的方向value。（弧度）

22.combatnpccount([camp_id]);

作用：
  获取战斗npc数量。

23.iscombatnpc(objid);

作用：
  获取指定npc是否战斗npc。

24.getlinkid(objid);

作用：
  获取指定对象的linkid。

25.getlevel(objid);

作用：
  获取指定对象的等级。

26.getattr(objid,attrid,value[,defaultvalue]);

作用：
  获取指定对象的指定属性value。

27.tableid2objid(tableid);

作用：
  取指定tableid NPC的objid。

28.objid2tableid(objid);

作用：
  取指定objid对象的tableid。

29.sceneindex2objid(sceneindex);

作用：
  取指定sceneindex NPC的objid。

30.objid2sceneindex(objid);

作用：
  取指定objid对象的sceneindex。

31.iscontrolbystory(objid);

作用：
  判断指定对象当前是否标记了由story脚本控制。

32.objisundercontrol(objid);

作用：
  判断指定对象是否处理硬直、浮空等由受击引起的受控状态。

33.getunitytype(typename);

作用：
  获取指定类型的unity3d类型Type实例。

34.getunityuitype(typename);

作用：
  获取指定类型的unity3d UI类型Type实例。

35.getscripttype(type_name);

作用：
  获取Assembly-CSharp.dll里指定类型的对象。

36.getentityinfo(objid);

作用：
  获取指定id的EntityInfo对象。

37.getentityview(objid);

作用：
  获取指定id的EntityViewModel对象。

38.getmountview(objid);

作用：
  获取指定id的对象的骑乘EntityViewModel对象。

39.getentityrootgameobject(objid);

作用：
  获取指定id对象的根GameObject（如果使用了骑乘，则返回骑乘的GameObject）。

40.getglobal();

作用：
  获取GlobalVariables对象实例。

41.clientmodule();

作用：
  获取ClientModule.Instance对象实例。

42.ispureclient();

作用：
  判断是否纯客户端模式。

43.deg2rad(val);

作用：
  将角度转换为弧度。

44.rad2deg(val);

作用：
  将弧度转换为角度。

45.getspline(path, num);

作用：
  获取Curvy插件在场景里放置的曲线路点列表，path为路径，num为要获取的插值计算的路点数。

46.getsplinepoints(path);

作用：
  获取Curvy插件在场景里放置的曲线的控制点列表，path为路径。

47.offsetspline(spline, vector3(x,y,z));

作用：
  获取一条曲线偏移vector3(x,y,z)后的曲线。

48.offsetvector3(pt, vector3(x,y,z));
offsetvector3(pt, pt2, vector3(x,y,z));

作用：
  获取指定点偏移vector3(x,y,z)后的曲线，如果指定pt2，则偏移按pt->pt2方向旋转。

49.npcfindimpactseqbyid(unitId,impactId);

作用：
  查找指定NPC上指定impactId的第一个impact的seq。

50.objfindimpactseqbyid(objId,impactId);

作用：
  查找指定NPC上指定impactId的第一个impact的seq。

51.npcgetaiparam(unitId,index);

作用：
  获得指定AI参数。

52.objgetaiparam(objId,index);

作用：
  获得指定AI参数。

53.getplayertableid();

作用：
  获取当前玩家的tableid，一般为0，对应npcinfo表ID。

54.getplayerid();

作用：
  获取当前玩家的objid。

55.findobjid(tableid);
findobjid(type, tableid);
findobjid(type, vector3(x, 0 ,z), range);
findobjid(type, tableid, vector3(x, 0 ,z), range);

作用：
  查找符合条件的obj的objid。type为TypedEntityEnum的值：
  public enum TypedEntityEnum
  {
      Player = 0,
      Npc,
      Pickup,
      Transport,
      Monster,
      Elite,
      Boss,
      Vehicle,
      DropItem,
      Pet,
      Other,
      MaxTypeNum
  }

56.npcgetnpctype(unitid);

作用：
  获取指定npc的类型。

57.npcgetsummonerid(unitid);

作用：
  获取指定npc的召唤者id。

58.objgetnpctype(objid);

作用：
  获取指定obj的类型。

59.objgetsummonerid(objid);

作用：
  获取指定obj的召唤者id。

60.calcoffset(objid,targetobjid,vector3(x,y,z));

作用：
  计算沿objid->targetobjid方向，相对objid偏移(x,y,z)的位置。

61.npccount(startUnitId,endUnitId);

作用：
  统计在指定范围[startUnitId,endUnitId]内的活着的npc数目。

62.getaidata(objid,aidatatype);

作用：
  获取指定npc的AiData,aidatatype可以是AiData_General等。

63.npcgetsummonskillid(unitid);

作用：
  获取召唤指定npc的技能ID。

64.objgetsummonskillid(objid);

作用：
  获取召唤指定npc的技能ID。

65.getactor(objid);

作用：
  获取指定objid的unity3d GameObject。

66.isvisible(objid);

作用：
  获取指定objid的显示状态。

67.npcgetformation(unitid);

作用：
  获取npc队形数据。

68.objgetformation(objid);

作用：
  获取npc除形数据。

69.movementenabled(objid);

作用：
  获取对象是否允许移动。

八、剧情命令

1.startstory("clientlogic");

作用：
  启动指定的story。

2.stopstory("clientlogic");

作用：
  停止指定的story。

3.firemessage(消息id,参数表);

作用：
  触发指定消息，与localmessage的不同是这个命令触发的消息将广播到当前所有在执行的story。

4.changescene(scene_id);

作用：
  切换到目标场景。

5.createnpc(npc_unit_id,vector3(x,y,z),dir,camp,linkId[,ai,stringlist("param1 param2 param3 ...")])[objid("@objid")];

作用：
  创建npc，可指定位置与朝向。带objid语法的样式用于获取objid到指定变量名（字符串名，可以是运算结果构成的变量名）

6.waitnpcload(npc_unit_id, timeout);

作用：
  等待指定的npc加载完成，timeout为等待超时时间。

7.waitnpcanimload(npc_unit_id, timeout);

作用：
  等待指定的npc的动作组加载完成，timeout为等待超时时间。

8.destroynpc(npc_unit_id);

作用：
  删除指定unit_id的npc，如果有多个，则都会删除。

9.npcmove(unit_id,vector3(x,y,z)[, event]);

作用：
  移动指定npc到目标点。

10.npcenableai(unit_id,true_or_false);

作用：
  允许或禁止npc AI，第二个参数必须是"true"或"false"。
  以一定速度移向目标点。

11.npcmount(unit_id,mount_id,timeout);

作用：
  npc骑乘。

12.npcunmount(unit_id,mount_id);

作用：
  npc下骑乘。

13.npcface(unit_id,dir);

作用：
  控制npc朝向（如果有ai控制，这一命令不一定有效果）。

14.npcmovewithwaypoints(unit_id,vector3list("v1x v1y v2x v2y")[, event]);

作用：
  控制npc沿指定路线移动。

15.npcstop(unit_id);

作用：
  停止正在执行的移动或巡逻命令，进入休闲ai状态。

16.npcenablemovement(unit_id[,1_or_0]);

作用：
  允许/禁止npc移动。

17.npcsetcamp(unit_id,camp_id);

作用：
  设置npc阵营id。

18.waitobjload(obj_id, timeout);

作用：
  等待指定的obj加载完成，timeout为等待超时时间。

19.waitobjanimload(obj_id, timeout);

作用：
  等待指定的obj的动作组加载完成，timeout为等待超时时间。

20.objmount(obj_id,mount_id,timeout);

作用：
  obj骑乘。

21.objunmount(obj_id,mount_id);

作用：
  obj下骑乘。

22.objface(objid,dir);

作用：
  控制游戏对象朝向。

23.objmove(objid,vector3(x,y,z)[, event]);

作用：
  移动游戏对象到目标点。

24.objmovewithwaypoints(objid,vector3list("v1x v1y v2x v2y")[, event]);

作用：
  控制游戏对象沿指定路线移动。

25.lockframe(0.1);

作用：
  改变当前渲染层时间快慢。通常在一定时间后恢复。

26.setbattlestate(objid, 0_1_or_2);

作用：
  改变指定obj的战斗状态。

27.setdramastate(0_or_1);

作用：
  设置是否剧情状态（剧情状态会隐藏服务器NPC，退出剧情状态后再显示。注意这与story状态概念不一样，story状态指服务器进入story展示状态，但客户端表现上可能是无缝的。剧情状态通常应该在story状态下使用）。

28.isdramastate();

作用：
  检查是否剧情状态。

29.setstorystate(0_or_1);

作用：
  设置是否处理服务器story状态（这种状态不会弹出功能UI）。

30.isstorystate();

作用：
  检查是否服务器story状态。

31.setstoryskipped(0_or_1);

作用：
  设置是否跳过story状态。

32.isstoryskipped();

作用：
  检查是否跳过story状态。

33.sendaimessage(objid,msg,arg1,arg2,...);

作用：
  在剧情脚本里给某个obj的ai发剧情消息。（注意：参数只支持整数、浮点数与字符串三种类型）

34.sendaiconcurrentmessage(objid,msg,arg1,arg2,...);

作用：
  在剧情脚本里给某个obj的ai发剧情消息。（注意：参数只支持整数、浮点数与字符串三种类型）

35.sendainamespacedmessage(objid,msg,arg1,arg2,...);

作用：
  在剧情脚本里给某个obj的ai发剧情消息。（注意：参数只支持整数、浮点数与字符串三种类型）

36.sendaiconcurrentnamespacedmessage(objid,msg,arg1,arg2,...);

作用：
  在剧情脚本里给某个obj的ai发剧情消息。（注意：参数只支持整数、浮点数与字符串三种类型）

37.publishevent(ev_name,group,arg1,arg2,...);

作用：
  在剧情脚本里直接发布逻辑层或渲染层事件，从而触发订阅对应事件的处理。（注意：参数只支持整数、浮点数与字符串三种类型，所以并不是所有事件都能由此命令触发）

38.objanimation(objid,anim[,normalized_start_time]);

作用：
  让指定对象播放指定动作anim。

39.npcanimation(unitid,anim[,normalized_start_time]);

作用：
  让指定对象播放指定动作anim。

40.sendmessage(name,msg,arg1,arg2,...);

作用：
  在剧情脚本里直接给渲染层指定gameobject发消息。（注意：参数只支持整数、浮点数与字符串三种类型）

41.sendmessagewithtag(tag,msg,arg1,arg2,...);

作用：
  在剧情脚本里直接给渲染层指定gameobject发消息。（注意：参数只支持整数、浮点数与字符串三种类型）

42.sendmessagewithgameobject(gameobject or objid,msg,arg1,arg2,...);

作用：
  在剧情脚本里直接给渲染层指定gameobject发消息。（注意：参数只支持整数、浮点数与字符串三种类型）

43.npcsetai(unit_id,ai_logic_id,stringlist("aiparam0 aiparam1 aiparam2"));

作用：
  改变指定npc的ai逻辑并指定对应ai逻辑的ai参数。

44.npcaddimpact(unit_id,impact_id,arg1,arg2,arg3,...)[seq("@seq")];

作用：
  给npc加buff。

45.npcremoveimpact(unit_id,seq);

作用：
  去掉npc身上的指定buff。

46.objstop(objid);

作用：与对应版本的npcXXX相同，只是第一个参数改成objid，并可用于玩家。

47.objenablemovement(obj_id[,1_or_0]);

作用：
  允许/禁止obj移动。

48.objenableai(objid,true_or_false);

作用：与对应版本的npcXXX相同，只是第一个参数改成objid，并可用于玩家。

49.objsetai(objid,ailogicid,stringlist("p1 p2 p3 p4"));

作用：与对应版本的npcXXX相同，只是第一个参数改成objid，并可用于玩家。

50.objaddimpact(objid,impactid,arg1,arg2,arg3,...)[seq("@seq")];

作用：与对应版本的npcXXX相同，只是第一个参数改成objid，并可用于玩家。

51.objremoveimpact(objid,seq);

作用：与对应版本的npcXXX相同，只是第一个参数改成objid，并可用于玩家。

52.highlightpromptwithdict(objid,dictid,arg1,arg2,...);

作用：
  在屏幕中上方显示醒目提示信息

53.highlightprompt(msg);

作用：
  在屏幕中上方显示醒目提示信息

54.destroynpcwithobjid(objid);

作用：
  销毁指定objid的npc。

55.sethp(objid,hp);

作用：
  设置指定obj的战斗属性value。

56.setlevel(objid,lvl);

作用：
  设置指定对象的等级。

57.setattr(objid,attrid,value);

作用：
  设置指定对象的指定属性value。  

58.markcontrolbystory(objid,true/false);

作用：
  标记指定对象是否由story脚本控制。（主要用在战神赛的机器人放技能时）

59.waitstory(storyid1,storyid2,...)[set(var,val)timeoutset(timeout,var,val)];

作用：
  等待运行的各story执行完毕。(var部分用字符串指定变量名，这样允许一个变量或表达式的value作为变量)

60.waitallmessage(msgid1,msgid2,...)[set(var,val)timeoutset(timeout,var,val)];

作用：
waitallmessage等待指定的消息之一触发。(var部分用字符串指定变量名，这样允许一个变量或表达式的value作为变量)

61.waitallmessagehandler(msgid1,msgid2,...)[set(var,val)timeoutset(timeout,var,val)];

作用：
waitallmessagehandler等待运行的各story的指定消息都执行完毕。(var部分用字符串指定变量名，这样允许一个变量或表达式的value作为变量)

62.camerafollow(npc_unit_id1,npc_unit_id2,...)[with(camera_path)];

作用：
  让像机跟随指定的npc列表，按顺序处理，找到第一个可跟随目标为止。

63.cameralook(unit_id)[with(camera_path)];
cameralook(vector3(x,y,z))[with(camera_path)];

作用：
  让像机看着指定目标。  

64.cameralookimmediately(unit_id)[with(camera_path)];
cameralookimmediately(vector3(x,y,z))[with(camera_path)];

作用：
  让像机立即看着指定目标。  

65.cameralooktoward(unit_id)[with(camera_path)];
cameralooktoward(vector3(x,y,z))[with(camera_path)];

作用：
  让像机在当前位置转向指定目标。  

66.camerakeepfollow(1_or_0)[with(camera_path)];

作用：
  像机是否自动跟随（仅游戏主像机支持）。  

67.camerafixedyaw(yaw)[with(camera_path)];

作用：
  让像机水平方向旋转指定角度。  

68.camerayaw(yaw, anglelag, snaplag)[with(camera_path)];

作用：
  水平旋转摄像机。

69.camerafixedpitch(pitch)[with(camera_path)];

作用：
  改变像机的pitch，目前仅用于主像机。  

70.camerapitch(pitch, anglelag, snaplag)[with(camera_path)];

作用：
  摄像机抬头、低头（目前未实现）。

71.cameraheight(height, lag)[with(camera_path)];

作用：
  设置摄像机高度。

72.cameradistance(distance, lag)[with(camera_path)];

作用：
  设置摄像机远近。

73.camerasetdistanceheight(distance, height)[with(camera_path)];

作用：
  设置摄像机高度与远近参数，立即生效。

74.camerastoredistanceheight()[with(camera_path)];

作用：
  记录摄像机高度与远近参数（后续恢复命令使用此记录值）。

75.camerarestoredistanceheight()[with(camera_path)];

作用：
  恢复摄像机高度与远近参数到记录的值。

76.camerasetfollowspeed(maxdist, mindist, maxspeed, minspeed, power)[with(camera_path)];

作用：
  设置摄像机跟随的速度相关参数。

77.cameraresetfollowspeed()[with(camera_path)];

作用：
  恢复摄像机跟随的速度相关参数到初始值。

78.camerafollowobj(objid)[with(camera_path)];

作用：
  摄像机跟随指定对象。

79.cameralookobj(objid)[with(camera_path)];

作用：
  摄像机看着指定对象，像机平滑移动到目标位置。

80.cameralookobjimmediately(objid)[with(camera_path)];

作用：
  摄像机立即看着指定对象。

81.cameralooktowardobj(objid)[with(camera_path)];

作用：
  摄像机立即看着指定对象。

82.cameralookcopy(src_camera_path, unit_id or vector3(x,y,z))[with(camera_path)];

作用：
  拷贝另一摄像机参数，使用这些参数看向同一目标(使用unitid指定)或目标点。

83.cameralookobjcopy(src_camera_path, objid)[with(camera_path)];

作用：
  拷贝另一摄像机参数，使用这些参数看向同一目标(使用objid指定)。

84.cameraenable(name, 1_or_0, 1_or_0);

作用：
  允许/禁用摄像机。(参数1--像机路径，参数2--是否允许fading，参数3--是否允许story)

85.cameraenablestory(name, 1_or_0, 1_or_0);

作用：
  允许/禁用摄像机。(参数1--像机路径，参数2--是否允许fading，参数3--是否允许story)

86.bindtomaincamera(prefab_name);

作用：
  将剧情prefab里对剧情相机的操作修改为对主相机的操作。

87.showdlg(objid, dlgid[, event]);

作用：
  显示NPC对话，并可以指定结束时触发的消息。

88.setunitid(objid,unitid);

作用：
  修改某个obj的unitid。

89.setplayerid(objid);

作用：
  设置玩家对象objid。 

90.npcsetsummonerid(unitid,objid);

作用：
  指定召唤者id。  

91.objsetsummonerid(objid,objid);

作用：
  指定召唤者id。  

92.npcdisplay(unit_id, display_name);

作用：
  播放技能表现组。

93.npcstopdisplay(unit_id, display_name);

作用：
  停止技能表现组。

94.objdisplay(obj_id, display_name);

作用：
  播放技能表现组。

95.objstopdisplay(obj_id, display_name);

作用：
  停止技能表现组。

96.npcspeedmode(unit_id, speed_mode);

作用：
  修改npc移动速度模式(0-慢 1-正常 2-快)。

97.npcinfight(unit_id, is_in_fight);

作用：
  修改npc动作战斗模式(0-非战斗 1-战斗)。

98.objspeedmode(obj_id, speed_mode);

作用：
  修改npc移动速度模式(0-慢 1-正常 2-快)。

99.objinfight(obj_id, is_in_fight);

作用：
  修改npc动作战斗模式(0-非战斗 1-战斗)。

100.npccastskill(unit_id, skill_id);

作用：
  客户端发起技能。

101.npchideweapon(unit_id, type, is_hide);

作用：
  隐藏武器(type--0 名剑 1 主武器 2 副武器)。

102.npcautosync(unit_id, target_pos);

作用：
  客户端自动同步位置到指定点（只适用于小范围位置差异）。

103.objcastskill(obj_id, skill_id);

作用：
  客户端发起技能。

104.objhideweapon(obj_id, type, is_hide);

作用：
  隐藏武器(type--0 名剑 1 主武器 2 副武器)。

105.objautosync(obj_id, target_pos);

作用：
  客户端自动同步位置到指定点（只适用于小范围位置差异）。

106.usevehicle(obj_id,vehicle_table_id[,event]);

作用：
  使用载具。

107.areadetect(gameobjectname,radius,callback)[set(var,val,elseval)];

示例：
	while(@triggered==0){
	  areadetect("StoryPoint",5,"LetsGo")set("@triggered",1,0);    
	  wait(100);
	};
作用：
  检测区域条件是否满足，满足后发送callback的message，message带一个参数：gameobjectname。可选的在检测条件满足时设置变量为一个valueval，否则设置为另一个valueelseval。

108.gameobjectanimation(objpath, anim[, normalized_time]);

作用：
  让指定unity gameobject播放动作。  

109.gameobjectanimationparam(obj)
{
    float(name,val);
    int(name,val);
    bool(name,val);
    trigger(name,val);
};

作用：
  修改unity gameobject的动画控制器参数。  

110.npcsetaitarget(unit_id,target);

作用：
  设置指定npc的AI目标。

111.objsetaitarget(objid,target);

作用：
  设置指定npc的AI目标。

112.npcsetaireachscope(unit_id,scope);

作用：
  设置指定npc的AI移动到达目标的停止范围。

113.objsetaireachscope(objid,scope);

作用：
  设置指定npc的AI移动到达目标的停止范围。

114.npcsetsummonskillid(unitid,skillid);

作用：
  指定召唤技能id。  

115.objsetsummonskillid(objid,skillid);

作用：
  指定召唤技能id。  

116.objsetcamp(objid,camp_id);

作用：
  设置npc阵营id。

117.setvisible(objid,0_or_1);

作用：
  设置npc是否显示。

118.putonground(objpath);

作用：
  将gameobject放置到地面，这样开启navmeshagent不会报错。

119.npcsetformation(npc_unit_id,index);

作用：
  设置npc队形数据。

120.objsetformation(obj_id, index);

作用：
  设置npc队形数据。

121.defplayer(id){
    name(val);
    title(val);
    viewrange(val);
    gohomerange(val);
    speed(val);
    bornskill(id);
    deadskill(id);
    category(val);
    npctype(type, subtype);
    avatar(prefab);
    hair(prefab);
    face(prefab);
    body(prefab);
    weapon(prefab);
    weapon2(prefab);
    animbase(prefab);
    animshow(prefab);
    camp(campid);
};

作用：
  定义一个临时用的npc信息，未明确指定项目使用当前玩家的信息。

122.defnpc(id){
    name(val);
    title(val);
    viewrange(val);
    gohomerange(val);
    speed(val);
    bornskill(id);
    deadskill(id);
    category(val);
    npctype(type, subtype);
    avatar(prefab);
    hair(prefab);
    face(prefab);
    body(prefab);
    weapon(prefab);
    weapon2(prefab);
    animbase(prefab);
    animshow(prefab);
    camp(campid);
};

作用：
  定义一个临时用的npc信息。

123.preload(actor_id_1, actor_id_2, ...);
  preload(objresid1, objresid2, ...)
  {
    objectresources(res1, res2, ...);
    sharedresources(res1, res2, ...);
    ...
  };

作用：
  预加载指定的NPC的相关资源。

124.loadui(name, prefab, dslfile);

作用：
  加载dsl实现逻辑的UI。

125.bindui(gameobject){
    var("@varname","Panel/Input"); 										//variable bind to control
    inputs("",...);           												//the InputField args to event
    toggles("",...);																	//the Toggle args to event
    sliders("",...);																	//the Slider args to event
    dropdowns("",...);																//the Dropdown args to event
    onevent("button","eventtag","Panel/Button"); 			//on_click event's tag and the control bind to
    onevent("toogle","eventtag","Panel/Toggle"); 			//on_toggle event's tag and the control bind to
    onevent("dropdown","eventtag","Panel/Dropdown"); 	//on_dropdown event's tag and the control bind to
    onevent("slider","eventtag","Panel/Slider"); 			//on_slider event's tag and the control bind to
    onevent("input","eventtag","Panel/Input"); 				//on_input event's tag and the control bind to
};

作用：
  与UI prefab绑定。其中inputs、toggles、sliders、dropdowns指定在事件处理里除固定参数外额外传递的参数，参数顺序为inputs、toggles、sliders、dropdowns，但没有指定的不会作为参数传递，此时后面顺序的参数相应前移。
on_click事件的固定参数为tag
on_toggle事件的固定参数为tag、toggle_value(整数value：1--选中 0--未选中)
on_dropdown事件的固定参数为tag、selected_index（整数value）
on_slider事件的固定参数为tag、slider_value（浮点数)
on_input事件的固定参数为tag、input_value（字符串)

126.pausestory(storyid,storyid,...);

作用：
  暂停指定的story。

127.resumestory(storyid,storyid,...);

作用：
  恢复指定的story。

128.pauseallmessagehandler(msgid,msgid,...);

作用：
  暂停当前所有story里的指定消息处理

129.resumeallmessagehandler(msgid,msgid,...);

作用：
  恢复当前所有story里的指定消息处理

130.objanimationparam(obj_id)
{
    float(name,val);
    int(name,val);
    bool(name,val);
    trigger(name,val);
};

作用：
  修改指定对象的动画控制器的参数或触发器。  

131.npcanimationparam(unit_id)
{
    float(name,val);
    int(name,val);
    bool(name,val);
    trigger(name,val);
};

作用：
  修改指定对象的动画控制器的参数或触发器。  

九、渲染层函数

1.blackboardget(name);

作用：
  获取渲染层指定名譾alue幕捍媸荨?

2.gettime();

作用：
  获取渲染层时间。

3.gettimescale();

作用：
  获取渲染层时间倍率。

4.isactive(game_object_path);

作用：
  判断指定GameObject是否active，isactive判断对象自身，isreallyactive检查对象所在层次路径是否都active。（主要用于判断窗口是否可见）

5.isreallyactive(game_object_path);

作用：
  判断指定GameObject是否active，isactive判断对象自身，isreallyactive检查对象所在层次路径是否都active。（主要用于判断窗口是否可见）

6.getcomponent(game_object_path，component_type_name/type);

作用：
  获取指定gameobject上的指定component实例。

7.getgameobject(game_object_path);

作用：
  获取gameobject对象实例。 

8.getparent(game_object_path);

作用：
  获取gameobject父对象实例。 

9.getchild(game_object_path, child_path);

作用：
  获取gameobject子对象实例。 

10.namespace();

作用：
  获取当前脚本的namespace（用于UI脚本，一般UI脚本的namespace为UI名，由加载UI时传入）。

十、渲染染层命令

1.blackboardclear();

作用：
  清空渲染层数据缓存。

2.blackboardset(name,value);

作用：
  添加/修改渲染层数据缓存。

3.creategameobject(name, prefab[, parent])[obj("varname")]{
    position(vector3(x,y,z));
    rotation(vector3(x,y,z));
    scale(vector3(x,y,z));
};

作用：
  创建一个GameObject，可选的挂在指定父节点上。

4.settransform(name, world_or_local){
    position(vector3(x,y,z));
    rotation(vector3(x,y,z));
    scale(vector3(x,y,z));
};

作用：
  修改指定对象的transform。

5.destroygameobject(path);

作用：
  销毁gameobject。

6.autorecycle(path, 1_or_0);

作用：
  设置是否在场景重置时自动销毁gameobject。

7.followtarget(objid,parent);

作用：
  让obj跟随指定目标，parent为空串或0则解除跟随。

8.setparent(objpath,parent,stay_world_pos);

作用：
  销毁gameobject。

9.setactive(objpath,1_or_0);

作用：
  改变gameobject的active状态。

10.addcomponent(objpath, component_name/component_type)[obj("@varname")];

作用：
  添加component到obj.可选部分指定一个对象名来存储component对象实例。

11.removecomponent(objpath,type);

作用：
  删除指定组件。

12.openurl(url);

作用：
  用浏览器打开指定url。

13.quit();

作用：
  退出游戏。

14.localnamespacedmessage(msgId,arg1,arg2,...);

作用：
  发送本名字空间内的消息，对应的消息处理由下述语法提供
  onnamespacedmessage(msgId)
  {
      //消息处理
  };
  因为名字空间无法由dsl本身指定，所以单独提供了一套消息/处理机制，这套机制其实是对原来的消息机制的msgId添加了一个namespace前缀，如果知道dsl对应的名字空间，假设为ns，则下述语法与上面的处理等价
  onmessage(ns,msgId)
  {
      //消息处理
  };
  类似的，localmessage(ns+":"+msgId,arg1,arg2,...);与发送消息的语法等价，后面类似的基于namespace的方法是这样与对应的普通方法等价，不再一一缀述。

15.storylocalnamespacedmessage(msgId,arg1,arg2,...);

作用：
  发送本名字空间内的消息（如果取消按钮被按下，则不再发送消息），对应的消息处理由下述语法提供
  onnamespacedmessage(msgId)
  {
      //消息处理
  };
  因为名字空间无法由dsl本身指定，所以单独提供了一套消息/处理机制，这套机制其实是对原来的消息机制的msgId添加了一个namespace前缀，如果知道dsl对应的名字空间，假设为ns，则下述语法与上面的处理等价
  onmessage(ns,msgId)
  {
      //消息处理
  };
  类似的，storylocalmessage(ns+":"+msgId,arg1,arg2,...);与发送消息的语法等价，后面类似的基于namespace的方法是这样与对应的普通方法等价，不再一一缀述。

16.clearnamespacedmessage(msgid1,msgid2,...);

作用：
  清空指定的本地名字空间内的消息。

17.waitlocalnamespacedmessage(msgid1,msgid2,...)[set(var,val)timeoutset(timeout,var,val)];

作用：
  waitlocalnamespacedmessage等待指定的本地名字空间内的消息之一触发。(var部分用字符串指定变量名，这样允许一个变量或表达式的value作为变量)

18.waitlocalnamespacedmessagehandler(msgid1,msgid2,...)[set(var,val)timeoutset(timeout,var,val)];

作用：
  waitlocalnamespacedmessagehandler等待指定的本地名字空间内的消息处理全部执行完毕。(var部分用字符串指定变量名，这样允许一个变量或表达式的value作为变量)

19.storywaitlocalnamespacedmessage(msgid1,msgid2,...)[set(var,val)timeoutset(timeout,var,val)];

作用：
  storywaitlocalnamespacedmessage等待指定的本地名字空间内的消息之一触发。(var部分用字符串指定变量名，这样允许一个变量或表达式的value作为变量)。如果剧情取消按钮被按下，则不再等待按超时处理

20.storywaitlocalnamespacedmessagehandler(msgid1,msgid2,...)[set(var,val)timeoutset(timeout,var,val)];

作用：
  storywaitlocalnamespacedmessagehandler等待指定的本地名字空间内的消息处理全部执行完毕。(var部分用字符串指定变量名，这样允许一个变量或表达式的value作为变量)。如果剧情取消按钮被按下，则不再等待按超时处理

十一、脚本支持消息

1.sendmessage("ZhanChangLogic/Spline", "PlayCurvy", "on_end_reached");

作用：
  播放一段Curvy轨迹

2.sendmessage("ZhanChangLogic/Spline", "PlayCurvy2", "on_end_reached", "on_control_point_reached");

作用：
  播放一段Curvy轨迹

3.sendmessage("ZhanChangLogic/Spline", "PauseCurvy");

作用：
  暂停一段Curvy轨迹

4.sendmessage("ZhanChangLogic/Spline", "ResumeCurvy");

作用：
  恢复一段Curvy轨迹

5.sendmessage("ZhanChangLogic/Spline", "StopCurvy");

作用：
  停止一段Curvy轨迹

6.sendmessage("ZhanChangLogic/Spline", "PlayTimeline");

作用：
  播放timeline

7.sendmessage("ZhanChangLogic/Spline", "PauseTimeline");

作用：
  暂停timeline

8.sendmessage("ZhanChangLogic/Spline", "ResumeTimeline");

作用：
  恢复timeline

9.sendmessage("ZhanChangLogic/Spline", "StopTimeline");

作用：
  停止timeline

10.sendmessage("ZhanChangLogic/Video", "PlayVideo");

作用：
  播放video

11.sendmessage("ZhanChangLogic/Video", "PauseVideo");

作用：
  暂停video

12.sendmessage("ZhanChangLogic/Video", "ResumeVideo");

作用：
  恢复video

13.sendmessage("ZhanChangLogic/Video", "StopVideo");

作用：
  停止video

14.sendmessage("ZhanChangLogic/Camera", "DimScreen", time);

作用：
  淡出屏幕（变暗），time为毫秒，在time时间内变暗

15.sendmessage("ZhanChangLogic/Camera", "LightScreen", time);

作用：
  淡入屏幕（变亮），time为毫秒，在time时间内变亮

16.sendmessage("ZhanChangLogic/Camera", "LightTo", time, red, green, blue, alpha);

作用：
  变亮到指定颜色，time为毫秒，在time时间内变亮, r,g,b,a的范围为0~2，超过1表示过曝光。

17.sendmessage("StartScript","ToFollowPathSmoothly",@playerObjId);

作用：
  游戏相机跟随指定对象。

18.sendmessage("ZhanChangLogic/Camera","CameraShake",time,shake_type,magnitude,shake_curve);

作用：
  震屏。time为时间，shake_type为类型，一般为0，magnitude为幅度，shake_curve为震屏曲线，一般为0。

19.sendmessage("ZhanChangLogic/DynamicObstacle","EnableObstacle",1_or_0);

作用：
  开关动态阻挡。

20.sendmessage("ZhanChangLogic/Light","SetLightVisible",1_or_0);

作用：
  开关点光。

21.sendmessage("ZhanChangLogic/Object","SetVisible",1_or_0);

作用：
  显示/隐藏对象。

22.sendmessage("ZhanChangLogic/Object","PlayAnimation", anim, speed);

作用：
  播放动画。

23.sendmessage("ZhanChangLogic/Object","PlayParticle", 1_or_0);

作用：
  播放特效。

24.sendmessage("ZhanChangLogic/Object","PlaySound", index);

作用：
  播放声音，使用unity3d的AudioSource。

25.sendmessage("ZhanChangLogic/Object","StopSound", index);

作用：
  停止播放声音，使用unity3d的AudioSource。

26.sendmessage("StartScript","PlaySoundWithFmod", eventname);

作用：
  播放Fmod声音。

27.sendmessage("StartScript","ChangeWeather", type, time);

作用：
  改变天气。目前支持type为rain -- 下雨、night -- 正常天气

